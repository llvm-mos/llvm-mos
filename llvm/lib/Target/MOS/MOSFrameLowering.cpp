//===-- MOSFrameLowering.cpp - MOS Frame Information ----------------------===//
//
// Part of LLVM-MOS, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file contains the MOS implementation of TargetFrameLowering class.
//
//===----------------------------------------------------------------------===//

#include "MOSFrameLowering.h"

#include "MCTargetDesc/MOSMCTargetDesc.h"
#include "MOSRegisterInfo.h"

#include "MOSSubtarget.h"
#include "llvm/CodeGen/GlobalISel/CallLowering.h"
#include "llvm/CodeGen/GlobalISel/MachineIRBuilder.h"
#include "llvm/CodeGen/MachineBasicBlock.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineOperand.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/PseudoSourceValue.h"
#include "llvm/CodeGen/TargetFrameLowering.h"
#include "llvm/CodeGen/TargetInstrInfo.h"
#include "llvm/CodeGen/TargetRegisterInfo.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/ErrorHandling.h"

#define DEBUG_TYPE "mos-framelowering"

using namespace llvm;

MOSFrameLowering::MOSFrameLowering()
    : TargetFrameLowering(StackGrowsDown, /*StackAlignment=*/Align(1),
                          /*LocalAreaOffset=*/0) {}

bool MOSFrameLowering::assignCalleeSavedSpillSlots(
    MachineFunction &MF, const TargetRegisterInfo *TRI,
    std::vector<CalleeSavedInfo> &CSI) const {
  MachineFrameInfo &MFI = MF.getFrameInfo();

  for (unsigned I = 0, E = CSI.size(); I != E; ++I) {
    auto &Info = CSI[I];
    // We place the first four CSRs on the hard stack, which we don't explicitly
    // model in PEI.
    if (I < 4)
      Info.setTargetSpilled();
    else
      Info.setFrameIdx(MFI.CreateSpillStackObject(1, Align()));
  }

  return true;
}

bool MOSFrameLowering::enableShrinkWrapping(const MachineFunction &MF) const {
  // Prologues and epilogues are pretty expensive on the 6502: 16-bit additions,
  // saving/restoring CSRs, the works. Accordingly, it's usually a good idea to
  // do shrink wrapping, as this can make prolog/epilogue execution conditional,
  // with no downside.
  //
  // If we're in an interrupt handler, we'll need to save a number of temporary
  // locations, but the uses of those locations haven't been generated by the
  // time shrink wrapping occurs.  Since there's no way for shrink wrapping to
  // determine which blocks will eventually use those locations, we can't use it
  // in that case.
  return !isISR(MF);
}

bool MOSFrameLowering::spillCalleeSavedRegisters(
    MachineBasicBlock &MBB, MachineBasicBlock::iterator MI,
    ArrayRef<CalleeSavedInfo> CSI, const TargetRegisterInfo *TRI) const {
  MachineIRBuilder Builder(MBB, MI);
  MachineInstrSpan MIS(MI, &MBB);
  const MOSSubtarget &STI = MBB.getParent()->getSubtarget<MOSSubtarget>();
  const TargetInstrInfo &TII = *STI.getInstrInfo();
  const TargetRegisterClass &StackRegClass =
      STI.has65C02() ? MOS::GPRRegClass : MOS::AcRegClass;

  // There are intentionally very few CSRs, few enough to place on the hard
  // stack without much risk of overflow. This is the only across-calls way
  // the compiler uses the hard stack, since the free CSRs can then be used
  // with impunity. This is slightly more expensive than saving/resting values
  // directly on the hard stack, but it's significantly simpler.
  for (const CalleeSavedInfo &CI : CSI) {
    Register Reg = CI.getReg();
    if (!CI.isTargetSpilled())
      continue;
    if (!StackRegClass.contains(Reg))
      Reg = Builder.buildCopy(&StackRegClass, Reg).getReg(0);
    Builder.buildInstr(MOS::PH, {}, {Reg});
  }

  // Record that the frame pointer is killed by these instructions.
  for (auto MI = MIS.begin(), MIE = MIS.getInitial(); MI != MIE; ++MI)
    MI->setFlag(MachineInstr::FrameSetup);

  // The frame pointer will be generated after the last frame setup instruction.

  // Save registers to the soft stack afterwards, since this may require the
  // frame pointer.
  for (const CalleeSavedInfo &CI : CSI) {
    Register Reg = CI.getReg();
    if (CI.isTargetSpilled())
      continue;
    assert(!CI.isSpilledToReg());
    const TargetRegisterClass *RC = TRI->getMinimalPhysRegClass(Reg);
    TII.storeRegToStackSlot(MBB, Builder.getInsertPt(), Reg, true,
                            CI.getFrameIdx(), RC, TRI);
  }

  return true;
}

template <typename F>
static void visitReturnBlocks(MachineBasicBlock *MBB, const F &Func,
                              DenseSet<MachineBasicBlock *> &VisitedBBs) {
  if (!VisitedBBs.insert(MBB).second)
    return;
  if (MBB->isReturnBlock())
    Func(*MBB);

  // Follow branches in BB and look for returns
  for (MachineBasicBlock *Succ : MBB->successors())
    visitReturnBlocks(Succ, Func, VisitedBBs);
}

template <typename F>
static void visitReturnBlocks(MachineBasicBlock *MBB, const F &Func) {
  DenseSet<MachineBasicBlock *> VisitedBBs;
  visitReturnBlocks(MBB, Func, VisitedBBs);
}

bool MOSFrameLowering::restoreCalleeSavedRegisters(
    MachineBasicBlock &MBB, MachineBasicBlock::iterator MI,
    MutableArrayRef<CalleeSavedInfo> CSI, const TargetRegisterInfo *TRI) const {
  MachineIRBuilder Builder(MBB, MI);
  const MOSSubtarget &STI = MBB.getParent()->getSubtarget<MOSSubtarget>();
  const TargetInstrInfo &TII = *STI.getInstrInfo();
  const TargetRegisterClass &StackRegClass =
      STI.has65C02() ? MOS::GPRRegClass : MOS::AcRegClass;

  for (const CalleeSavedInfo &CI : reverse(CSI)) {
    Register Reg = CI.getReg();
    if (CI.isTargetSpilled())
      continue;
    assert(!CI.isSpilledToReg());
    const TargetRegisterClass *RC = TRI->getMinimalPhysRegClass(Reg);
    TII.loadRegFromStackSlot(MBB, Builder.getInsertPt(), Reg, CI.getFrameIdx(),
                             RC, TRI);
  }

  // Begin tracking the frame pointer exclusion region only after all soft stack
  // CSR restores are emitted.
  MachineInstrSpan MIS(MI, &MBB);

  for (const CalleeSavedInfo &CI : reverse(CSI)) {
    Register Reg = CI.getReg();
    if (!CI.isTargetSpilled())
      continue;
    if (!StackRegClass.contains(Reg))
      Reg = Builder.getMRI()->createVirtualRegister(&StackRegClass);
    Builder.buildInstr(MOS::PL, {Reg}, {});
    if (Reg != CI.getReg())
      Builder.buildCopy(CI.getReg(), Reg);
  }

  // Mark the CSRs as used by the return to ensure Machine Copy Propagation
  // doesn't remove the copies that set them.
  visitReturnBlocks(&MBB, [&CSI](MachineBasicBlock &MBB) {
    assert(MBB.rbegin()->isReturn());
    for (const CalleeSavedInfo &CI : CSI) {
      MBB.rbegin()->addOperand(MachineOperand::CreateReg(
          CI.getReg(), /*isDef=*/false, /*isImp=*/true));
    }
  });

  // Record that the frame pointer is killed by these instructions.
  for (auto MI = MIS.begin(), MIE = MIS.getInitial(); MI != MIE; ++MI)
    MI->setFlag(MachineInstr::FrameDestroy);

  return true;
}

void MOSFrameLowering::determineCalleeSaves(MachineFunction &MF,
                                            BitVector &SavedRegs,
                                            RegScavenger *RS) const {
  TargetFrameLowering::determineCalleeSaves(MF, SavedRegs, RS);

  // If we have a frame pointer, the frame register RS15 needs to be saved as
  // well, since the code that uses it hasn't yet been emitted.
  if (hasFP(MF)) {
    SavedRegs.set(MOS::RC30);
    SavedRegs.set(MOS::RC31);
  }

  if (isISR(MF)) {
    // Accesses to RS8 can occur through the register scavenger, which occurs
    // after PEI. Conservatively assume these are used.
    SavedRegs.set(MOS::RC16);
    SavedRegs.set(MOS::RC17);

    // We need A to save anything else. This may require in turn saving A.
    // Normally, this could be done with __save_A, but for ISRs, that location
    // must also be saved. So we have to save A as a CSR, not through the
    // scavenger. Luckily, due to the register ordering, we're ensured that A
    // is saved before any other register.
    if (!SavedRegs.none())
      SavedRegs.set(MOS::A);

    // We need Y to save anything to the soft stack. Similar reasoning applies
    // to Y.
    if (SavedRegs.size() > 4)
      SavedRegs.set(MOS::Y);
  }
}

void MOSFrameLowering::processFunctionBeforeFrameFinalized(
    MachineFunction &MF, RegScavenger *RS) const {
  MachineFrameInfo &MFI = MF.getFrameInfo();

  // Assign all locals to static stack in non-recursive functions.
  if (MF.getFunction().doesNotRecurse()) {
    int64_t Offset = 0;
    for (int Idx = 0, End = MFI.getObjectIndexEnd(); Idx < End; ++Idx) {
      if (MFI.isDeadObjectIndex(Idx) || MFI.isVariableSizedObjectIndex(Idx))
        continue;

      MFI.setStackID(Idx, TargetStackID::NoAlloc);
      MFI.setObjectOffset(Idx, Offset);
      Offset += MFI.getObjectSize(Idx); // Static stack grows up.
    }
    return;
  }
}

MachineBasicBlock::iterator MOSFrameLowering::eliminateCallFramePseudoInstr(
    MachineFunction &MF, MachineBasicBlock &MBB,
    MachineBasicBlock::iterator MI) const {
  int64_t Offset = MI->getOperand(0).getImm();

  // If we've already reserved the outgoing call frame in the prolog/epilog, the
  // pseudo can be summarily removed.
  if (hasReservedCallFrame(MF) || !Offset)
    return MBB.erase(MI);

  // Increment/decrement the stack pointer to reserve space for the call frame.
  MachineIRBuilder Builder(MBB, MI);
  if (MI->getOpcode() ==
      MF.getSubtarget().getInstrInfo()->getCallFrameSetupOpcode())
    Offset = -Offset;
  offsetSP(Builder, Offset);
  return MBB.erase(MI);
}

void MOSFrameLowering::emitPrologue(MachineFunction &MF,
                                    MachineBasicBlock &MBB) const {
  const MachineFrameInfo &MFI = MF.getFrameInfo();
  const TargetRegisterInfo &TRI = *MF.getRegInfo().getTargetRegisterInfo();
  MachineIRBuilder Builder(MBB, MBB.begin());

  int64_t StackSize = MFI.getStackSize();
  // If the interrupted routine is in the middle of decrementing its stack
  // pointer, this routine may observe a stack pointer up to 255 bytes higher
  // than its atomic value.  Accordingly, summarily decrement the SP by a page.
  // Interrupts are rarer than the the routines they interrupt, so they pay the
  // cost of dealing with this atomicity problem.
  if (isISR(MF))
    StackSize += 256;

  if (StackSize)
    offsetSP(Builder, -StackSize);

  if (!hasFP(MF))
    return;

  // Skip the callee-saved push instructions.
  MachineBasicBlock::iterator MBBI, MBBE;
  for (MBBI = Builder.getInsertPt(), MBBE = MBB.end();
       MBBI != MBBE && MBBI->getFlag(MachineInstr::FrameSetup); ++MBBI)
    ;

  // Set the frame pointer to the stack pointer.
  Builder.setInsertPt(MBB, MBBI);
  Builder.buildCopy(TRI.getFrameRegister(MF), Register(MOS::RS0));
}

void MOSFrameLowering::emitEpilogue(MachineFunction &MF,
                                    MachineBasicBlock &MBB) const {
  const MachineFrameInfo &MFI = MF.getFrameInfo();
  const TargetRegisterInfo &TRI = *MF.getRegInfo().getTargetRegisterInfo();
  MachineIRBuilder Builder(MBB, MBB.getFirstTerminator());

  // Restore the stack pointer from the frame pointer.
  if (hasFP(MF)) {
    // Skip the callee-saved push instructions.
    MachineBasicBlock::iterator MBBI = Builder.getInsertPt();
    for (MachineBasicBlock::iterator MBBE = MBB.begin();
         MBBI != MBBE && std::prev(MBBI)->getFlag(MachineInstr::FrameDestroy);
         --MBBI)
      ;
    Builder.setInsertPt(MBB, MBBI);

    // Set the stack pointer to the frame pointer.
    Builder.buildCopy(MOS::RS0, TRI.getFrameRegister(MF));
    Builder.setInsertPt(MBB, MBB.getFirstTerminator());
  }

  int64_t StackSize = MFI.getStackSize();

  if (isISR(MF))
    StackSize += 256;

  // If soft stack is used, increase the soft stack pointer SP.
  if (StackSize)
    offsetSP(Builder, StackSize);
}

bool MOSFrameLowering::hasFP(const MachineFunction &MF) const {
  const MachineFrameInfo &MFI = MF.getFrameInfo();
  return MFI.isFrameAddressTaken() || MFI.hasVarSizedObjects();
}

uint64_t MOSFrameLowering::staticSize(const MachineFrameInfo &MFI) const {
  uint64_t Size = 0;
  for (int Idx = 0, End = MFI.getObjectIndexEnd(); Idx < End; ++Idx)
    if (MFI.getStackID(Idx) == TargetStackID::NoAlloc)
      Size += MFI.getObjectSize(Idx);
  return Size;
}

void MOSFrameLowering::offsetSP(MachineIRBuilder &Builder,
                                int64_t Offset) const {
  assert(Offset);
  assert(-32768 <= Offset && Offset < 32768);

  auto Bytes = static_cast<uint16_t>(Offset);
  int64_t LoBytes = Bytes & 0xFF;
  int64_t HiBytes = Bytes >> 8;
  assert(LoBytes || HiBytes);

  Register A = Builder.getMRI()->createVirtualRegister(&MOS::AcRegClass);
  Register P = Builder.getMRI()->createVirtualRegister(&MOS::PcRegClass);
  Builder.buildInstr(MOS::LDCImm)
      .addDef(P, RegState::Undef, MOS::subcarry)
      .addImm(0);
  if (LoBytes) {
    Builder.buildCopy(A, Register(MOS::RC0));
    auto Add = Builder.buildInstr(MOS::ADCImm, {A, P, P}, {A, LoBytes, P});
    Add->getOperand(1).setSubReg(MOS::subcarry);
    Add->getOperand(2).setSubReg(MOS::subv);
    Add->getOperand(5).setSubReg(MOS::subcarry);
    Builder.buildCopy(MOS::RC0, A);
    // Without this, A would have two definitions; the register scavenger does
    // not allow this.
    A = Builder.getMRI()->createVirtualRegister(&MOS::AcRegClass);
  }

  Builder.buildCopy(A, Register(MOS::RC1));
  auto Add = Builder.buildInstr(MOS::ADCImm, {A, P, P}, {A, HiBytes, P});
  Add->getOperand(1).setSubReg(MOS::subcarry);
  Add->getOperand(2).setSubReg(MOS::subv);
  Add->getOperand(5).setSubReg(MOS::subcarry);
  Builder.buildCopy(MOS::RC1, A);
}

bool MOSFrameLowering::isISR(const MachineFunction &MF) const {
  const Function &F = MF.getFunction();
  if (F.hasFnAttribute("no-isr"))
    return false;
  return F.hasFnAttribute("interrupt") ||
         F.hasFnAttribute("interrupt-norecurse");
}
