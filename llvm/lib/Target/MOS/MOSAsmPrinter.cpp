//===-- MOSAsmPrinter.cpp - MOS LLVM assembly writer ----------------------===//
//
// Part of LLVM-MOS, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file contains a printer that converts from our internal representation
// of machine-dependent LLVM code to GAS-format MOS assembly language.
//
//===----------------------------------------------------------------------===//

#include "MCTargetDesc/MOSMCExpr.h"
#include "MCTargetDesc/MOSMCTargetDesc.h"
#include "MCTargetDesc/MOSAsmBackend.h"
#include "MOSMCInstLower.h"
#include "MOSMachineFunctionInfo.h"
#include "MOSRegisterInfo.h"
#include "MOSSubtarget.h"
#include "TargetInfo/MOSTargetInfo.h"

#include "llvm/ADT/StringSet.h"
#include "llvm/BinaryFormat/MOSFlags.h"
#include "llvm/CodeGen/AsmPrinter.h"
#include "llvm/CodeGen/MachineJumpTableInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/Module.h"
#include "llvm/MC/MCAssembler.h"
#include "llvm/MC/MCStreamer.h"
#include "llvm/MC/TargetRegistry.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Target/TargetLoweringObjectFile.h"

using namespace llvm;

#define DEBUG_TYPE "asm-printer"

namespace {

class MOSAsmPrinter : public AsmPrinter {
  MOSMCInstLower InstLowering;

public:
  explicit MOSAsmPrinter(TargetMachine &TM,
                         std::unique_ptr<MCStreamer> Streamer)
      : AsmPrinter(TM, std::move(Streamer)), InstLowering(OutContext, *this) {}

  // Generated by TableGen.
  bool emitPseudoExpansionLowering(MCStreamer &OutStreamer,
                                   const MachineInstr *MI);

  // Wrapper needed for tblgenned pseudo lowering.
  void lowerOperand(const MachineOperand &MO, MCOperand &MCOp);

  void EmitToStreamer(MCStreamer &S, MCInst &Inst);

  void emitInstruction(const MachineInstr *MI) override;

  bool PrintAsmOperand(const MachineInstr *MI, unsigned OpNo,
                       const char *ExtraCode, raw_ostream &OS) override;

  bool PrintAsmMemoryOperand(const MachineInstr *MI, unsigned OpNo,
                             const char *ExtraCode, raw_ostream &OS) override;

  void emitStartOfAsmFile(Module &M) override;

  void emitJumpTableInfo() override;

  const MCSymbol *getFunctionFrameSymbol(int FI) const override;
};

// Simple pseudo-instructions have their lowering (with expansion to real
// instructions) auto-generated.
#include "MOSGenMCPseudoLowering.inc"

void MOSAsmPrinter::EmitToStreamer(MCStreamer &S, MCInst &Inst) {
  // If this instruction contains an out-of-range immediate address, perform an
  // early relax.
  MOSAsmBackend::relaxForImmediate(Inst);
  AsmPrinter::EmitToStreamer(S, Inst);
}

void MOSAsmPrinter::emitInstruction(const MachineInstr *MI) {
  // Do any auto-generated pseudo lowerings.
  if (emitPseudoExpansionLowering(*OutStreamer, MI))
    return;

  MCInst Inst;
  InstLowering.lower(MI, Inst);
  EmitToStreamer(*OutStreamer, Inst);
}

void MOSAsmPrinter::lowerOperand(const MachineOperand &MO, MCOperand &MCOp) {
  if (!InstLowering.lowerOperand(MO, MCOp))
    llvm_unreachable("Failed to lower operand.");
}

bool MOSAsmPrinter::PrintAsmOperand(const MachineInstr *MI, unsigned OpNo,
                                    const char *ExtraCode, raw_ostream &OS) {
  if (!AsmPrinter::PrintAsmOperand(MI, OpNo, ExtraCode, OS))
    return false;

  const MachineOperand &MO = MI->getOperand(OpNo);
  const MOSRegisterInfo &TRI =
      *MO.getParent()->getMF()->getSubtarget<MOSSubtarget>().getRegisterInfo();

  switch (MO.getType()) {
  default:
    errs() << "Unsupported inline asm operand: " << MO << "\n";
    return true;
  case MachineOperand::MO_Immediate:
    OS << MO.getImm();
    break;
  case MachineOperand::MO_GlobalAddress:
    OS << MO.getGlobal()->getName();
    break;
  case MachineOperand::MO_Register:
    Register Reg = MO.getReg();
    if (MOS::Imag16RegClass.contains(Reg) || MOS::Imag8RegClass.contains(Reg))
      OS << "mos8(" << TRI.getImag8SymbolName(Reg) << ")";
    else
      OS << TRI.getRegAsmName(Reg);
    break;
  }
  return false;
}

bool MOSAsmPrinter::PrintAsmMemoryOperand(const MachineInstr *MI, unsigned OpNo,
                                          const char *ExtraCode,
                                          raw_ostream &OS) {
  // Memory operands are simply stored in pointer registers; no extra work is
  // required.
  return PrintAsmOperand(MI, OpNo, ExtraCode, OS);
}

void MOSAsmPrinter::emitStartOfAsmFile(Module &M) {
  unsigned ModuleEFlags = 0;

  // Early check to see if module mixes incompatible feature bits.
  for (const Function &F : M) {
    const MOSSubtarget &STI =
        static_cast<const MOSSubtarget &>(*TM.getSubtargetImpl(F));

    const unsigned EFlags = STI.getEFlags();
    if (!MOS::checkEFlagsCompatibility(EFlags, ModuleEFlags)) {
      F.getContext().emitError("Function '" + F.getName() +
                               "' uses bad MOS "
                               "feature combination from rest of module.\n"
                               "Function: " +
                               MOS::makeEFlagsString(EFlags) + "Module: " +
                               MOS::makeEFlagsString(ModuleEFlags));
      report_fatal_error("Bad MOS feature combination");
    }

    ModuleEFlags |= EFlags;
  }

  // Output feature bits in e_flags
  bool SaveFlag = OutStreamer->getUseAssemblerInfoForParsing();
  OutStreamer->setUseAssemblerInfoForParsing(true);
  MCAssembler *Assembler = OutStreamer->getAssemblerPtr();
  OutStreamer->setUseAssemblerInfoForParsing(SaveFlag);
  if (Assembler)
    Assembler->setELFHeaderEFlags(ModuleEFlags);
}

void MOSAsmPrinter::emitJumpTableInfo() {
  const DataLayout &DL = MF->getDataLayout();
  const MachineJumpTableInfo *MJTI = MF->getJumpTableInfo();
  if (!MJTI)
    return;
  assert(MJTI->getEntryKind() == MachineJumpTableInfo::EK_BlockAddress);
  const std::vector<MachineJumpTableEntry> &JT = MJTI->getJumpTables();
  if (JT.empty())
    return;

  // Pick the directive to use to print the jump table entries, and switch to
  // the appropriate section.
  const Function &F = MF->getFunction();
  const TargetLoweringObjectFile &TLOF = getObjFileLowering();
  bool JTInDiffSection = !TLOF.shouldPutJumpTableInFunctionSection(
      /*UsesLabelDifference*/ false, F);
  if (JTInDiffSection) {
    // Drop it in the readonly section.
    MCSection *ReadOnlySection = TLOF.getSectionForJumpTable(F, TM);
    OutStreamer->SwitchSection(ReadOnlySection);
  }

  emitAlignment(Align(MJTI->getEntryAlignment(DL)));

  // Jump tables in code sections are marked with a data_region directive
  // where that's supported.
  if (!JTInDiffSection)
    OutStreamer->emitDataRegion(MCDR_DataRegionJT32);

  for (const auto &JTI : enumerate(JT)) {
    const std::vector<MachineBasicBlock *> &JTBBs = JTI.value().MBBs;

    // If this jump table was deleted, ignore it.
    if (JTBBs.empty())
      continue;

    MCSymbol *JTISymbol = GetJTISymbol(JTI.index());
    OutStreamer->emitLabel(JTISymbol);

    // Emit an array of the low bytes of the target addresses.
    for (const MachineBasicBlock *JTBB : JTBBs) {
      OutStreamer->emitValue(
          MCSymbolRefExpr::create(
              JTBB->getSymbol(), MCSymbolRefExpr::VK_MOS_ADDR16_LO, OutContext),
          1);
    }

    // Emit an array of the high bytes of the target addresses.
    for (const MachineBasicBlock *JTBB : JTBBs) {
      OutStreamer->emitValue(
          MCSymbolRefExpr::create(
              JTBB->getSymbol(), MCSymbolRefExpr::VK_MOS_ADDR16_HI, OutContext),
          1);
    }
  }
  if (!JTInDiffSection)
    OutStreamer->emitDataRegion(MCDR_DataRegionEnd);
}

const MCSymbol *MOSAsmPrinter::getFunctionFrameSymbol(int FI) const {
  if (MF->getFrameInfo().getStackID(FI) == TargetStackID::NoAlloc) {
    MOSFunctionInfo &MFI = *MF->getInfo<MOSFunctionInfo>();
    return getSymbol(MFI.getStaticStackVariable());
  }
  return AsmPrinter::getFunctionFrameSymbol(FI);
}

} // namespace

// Force static initialization.
extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializeMOSAsmPrinter() {
  RegisterAsmPrinter<MOSAsmPrinter> X(getTheMOSTarget());
}
