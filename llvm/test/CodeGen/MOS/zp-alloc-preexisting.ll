; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -O2 --filetype=asm -zp-avail=224 < %s | FileCheck %s

target datalayout = "e-m:e-p:16:8-p1:8:8-i16:8-i32:8-i64:8-f32:8-f64:8-a:8-Fi8-n8"
target triple = "mos-sim"

@c = dso_local global [224 x i8] zeroinitializer, section ".zp", align 1
@llvm.compiler.used = appending global [1 x ptr] [ptr @c], section "llvm.metadata"

@global = global i8 0, align 1
@global_noinit = global i8 undef, align 1

define i64 @foo(i64 %live_across_call) norecurse {
; CHECK-LABEL: foo:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta .Lfoo_sstk ; 1-byte Folded Spill
; CHECK-NEXT:    stx .Lfoo_sstk+1 ; 1-byte Folded Spill
; CHECK-NEXT:    ldx mos8(__rc2)
; CHECK-NEXT:    stx .Lfoo_sstk+2 ; 1-byte Folded Spill
; CHECK-NEXT:    ldx mos8(__rc3)
; CHECK-NEXT:    stx .Lfoo_sstk+3 ; 1-byte Folded Spill
; CHECK-NEXT:    ldx mos8(__rc4)
; CHECK-NEXT:    stx .Lfoo_sstk+4 ; 1-byte Folded Spill
; CHECK-NEXT:    ldx mos8(__rc5)
; CHECK-NEXT:    stx .Lfoo_sstk+5 ; 1-byte Folded Spill
; CHECK-NEXT:    ldx mos8(__rc6)
; CHECK-NEXT:    stx .Lfoo_sstk+6 ; 1-byte Folded Spill
; CHECK-NEXT:    ldx mos8(__rc7)
; CHECK-NEXT:    stx .Lfoo_sstk+7 ; 1-byte Folded Spill
; CHECK-NEXT:    ldx global
; CHECK-NEXT:    stx global_noinit
; CHECK-NEXT:    jsr bar
; CHECK-NEXT:    ldx .Lfoo_sstk+2 ; 1-byte Folded Reload
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    ldx .Lfoo_sstk+3 ; 1-byte Folded Reload
; CHECK-NEXT:    stx mos8(__rc3)
; CHECK-NEXT:    ldx .Lfoo_sstk+4 ; 1-byte Folded Reload
; CHECK-NEXT:    stx mos8(__rc4)
; CHECK-NEXT:    ldx .Lfoo_sstk+5 ; 1-byte Folded Reload
; CHECK-NEXT:    stx mos8(__rc5)
; CHECK-NEXT:    ldx .Lfoo_sstk+6 ; 1-byte Folded Reload
; CHECK-NEXT:    stx mos8(__rc6)
; CHECK-NEXT:    ldx .Lfoo_sstk+7 ; 1-byte Folded Reload
; CHECK-NEXT:    stx mos8(__rc7)
; CHECK-NEXT:    ldx .Lfoo_sstk+1 ; 1-byte Folded Reload
; CHECK-NEXT:    lda .Lfoo_sstk ; 1-byte Folded Reload
; CHECK-NEXT:    rts
entry:
  %0 = load i8, ptr @global, align 1
  store i8 %0, ptr @global_noinit, align 1
  call void @bar()
  ret i64 %live_across_call
}

define void @bar() norecurse noinline {
; CHECK-LABEL: bar:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    rts
entry:
  ret void
}
