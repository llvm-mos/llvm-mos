# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=mos -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck %s
--- |
  @.str = constant [2 x i8] c"XY"
  define void @ptradd_global_offset() {
    entry:
      ret void
  }
  define void @load_global() {
    entry:
      ret void
  }
  define void @load_ptradd_global_offset() {
    entry:
      ret void
  }
  define void @load_ptradd_global_offset_after_zext() {
    entry:
      ret void
  }
  define void @load_frame_index_offset() "nonreentrant" {
    entry:
      ret void
  }
  define void @load_frame_index_offset_no_ss() "nonreentrant" "target-features"="-static-stack" {
    entry:
      ret void
  }
  define void @load_frame_index_zext() "nonreentrant" {
    entry:
      ret void
  }
---
name: ptradd_global_offset
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ptradd_global_offset
    ; CHECK: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @.str + 1234
    ; CHECK-NEXT: RTS implicit [[GV]](p0)
    %0:_(p0) = G_GLOBAL_VALUE @.str + 1200
    %1:_(s16) = G_CONSTANT i16 34
    %2:_(p0) = G_PTR_ADD %0, %1
    RTS implicit %2
...
---
name: load_global
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_global
    ; CHECK: [[LOAD_ABS:%[0-9]+]]:_(s8) = G_LOAD_ABS @.str :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ABS]](s8)
    %0:_(p0) = G_GLOBAL_VALUE @.str
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    RTS implicit %1
...
---
name: load_ptradd_global_offset
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_ptradd_global_offset
    ; CHECK: [[LOAD_ABS:%[0-9]+]]:_(s8) = G_LOAD_ABS @.str + 1234 :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ABS]](s8)
    %0:_(p0) = G_GLOBAL_VALUE @.str + 1200
    %1:_(s16) = G_CONSTANT i16 34
    %2:_(p0) = G_PTR_ADD %0, %1
    %3:_(s8) = G_LOAD %2 :: (load (s8))
    RTS implicit %3
...
---
name: load_ptradd_global_offset_after_zext
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_ptradd_global_offset_after_zext
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[LOAD_ABS_IDX:%[0-9]+]]:_(s8) = G_LOAD_ABS_IDX @.str + 1234, [[COPY]](s8) :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ABS_IDX]](s8)
    %0:_(p0) = G_GLOBAL_VALUE @.str + 1200
    %1:_(s8) = COPY $x
    %2:_(s16) = G_ZEXT %1
    %3:_(p0) = G_PTR_ADD %0, %2
    %4:_(s16) = G_CONSTANT i16 34
    %5:_(p0) = G_PTR_ADD %3, %4
    %6:_(s8) = G_LOAD %5 :: (load (s8))
    RTS implicit %6
...
---
name: load_frame_index_offset
stack:
  - { id: 0, size: 256 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_frame_index_offset
    ; CHECK: [[LOAD_ABS:%[0-9]+]]:_(s8) = G_LOAD_ABS %stack.0 + 1234 :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ABS]](s8)
    %0:_(p0) = G_FRAME_INDEX %stack.0
    %1:_(s16) = G_CONSTANT i16 1234
    %2:_(p0) = G_PTR_ADD %0, %1
    %3:_(s8) = G_LOAD %2 :: (load (s8))
    RTS implicit %3
...
---
name: load_frame_index_offset_no_ss
stack:
  - { id: 0, size: 256 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_frame_index_offset_no_ss
    ; CHECK: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -46
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 4
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[FRAME_INDEX]](p0)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[UADDE:%[0-9]+]]:_(s8), [[UADDE1:%[0-9]+]]:_(s1) = G_UADDE [[UV]], [[C]], [[C2]]
    ; CHECK-NEXT: [[UADDE2:%[0-9]+]]:_(s8), [[UADDE3:%[0-9]+]]:_(s1) = G_UADDE [[UV1]], [[C1]], [[UADDE1]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[UADDE]](s8), [[UADDE2]](s8)
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[LOAD_INDIR_IDX:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[INTTOPTR]](p0), [[C3]] :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_INDIR_IDX]](s8)
    %0:_(p0) = G_FRAME_INDEX %stack.0
    %1:_(s16) = G_CONSTANT i16 1234
    %2:_(p0) = G_PTR_ADD %0, %1
    %3:_(s8) = G_LOAD %2 :: (load (s8))
    RTS implicit %3
...
---
name: load_frame_index_zext
stack:
  - { id: 0, size: 256 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_frame_index_zext
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[LOAD_ABS_IDX:%[0-9]+]]:_(s8) = G_LOAD_ABS_IDX %stack.0 + 1234, [[COPY]](s8) :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ABS_IDX]](s8)
    %0:_(p0) = G_FRAME_INDEX %stack.0
    %1:_(s8) = COPY $x
    %2:_(s16) = G_ZEXT %1
    %3:_(p0) = G_PTR_ADD %0, %2
    %4:_(s16) = G_CONSTANT i16 1234
    %5:_(p0) = G_PTR_ADD %3, %4
    %6:_(s8) = G_LOAD %5 :: (load (s8))
    RTS implicit %6
...
