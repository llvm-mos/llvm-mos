# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=mos -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck %s
---
name: const_ptr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: const_ptr
    ; CHECK: [[C:%[0-9]+]]:_(p0) = G_CONSTANT i16 1234
    ; CHECK-NEXT: RTS implicit [[C]](p0)
    %0:_(p0) = G_CONSTANT i16 1234
    RTS implicit %0
...
---
name: const_zp_ptr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: const_zp_ptr
    ; CHECK: [[C:%[0-9]+]]:_(p1) = G_CONSTANT i8 123
    ; CHECK-NEXT: RTS implicit [[C]](p1)
    %0:_(p1) = G_CONSTANT i8 123
    RTS implicit %0
...
---
name: mul_s2
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: mul_s2
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[ASSERT_ZEXT:%[0-9]+]]:_(s8) = G_ASSERT_ZEXT [[COPY]], 2
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[ASSERT_ZEXT]](s8)
    ; CHECK-NEXT: $x = COPY [[ASSERT_ZEXT]](s8)
    ; CHECK-NEXT: JSR &__mulqi3, mos_csr, implicit $a, implicit $x, implicit-def $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 3
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY1]], [[C]]
    ; CHECK-NEXT: RTS implicit [[AND]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_ASSERT_ZEXT %0, 2
    %2:_(s2) = G_TRUNC %1
    %3:_(s2) = G_MUL %2, %2
    %4:_(s8) = G_ZEXT %3
    RTS implicit %4
...
---
name: mul_s128
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: mul_s128
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s8) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY20:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY21:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY22:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY23:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY24:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY25:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY26:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY27:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY28:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY29:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY30:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY31:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY2]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY3]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY4]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[COPY]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[DEF]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[COPY18]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[COPY19]](s8)
    ; CHECK-NEXT: JSR &__mulsi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: [[COPY32:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY33:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY34:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY35:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY36:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY37:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY38:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY39:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY40:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY41:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY42:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY43:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY44:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY45:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY46:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY47:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY48:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY49:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY50:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY51:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY52:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY53:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY54:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY55:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY56:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY57:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY58:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY59:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY60:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY61:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY62:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY63:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY64:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: $a = COPY [[COPY37]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY38]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY39]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY40]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[COPY]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[COPY50]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[COPY51]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[COPY52]](s8)
    ; CHECK-NEXT: JSR &__mulsi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY65:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY66:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY67:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY68:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY69:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY70:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY71:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY72:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY73:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY74:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY75:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY76:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY77:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY78:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY79:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY80:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY81:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY82:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY83:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY84:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY85:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY86:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY87:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY88:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY89:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY90:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY91:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY92:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY93:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY94:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY95:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY96:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY66]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY67]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY68]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[COPY85]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[COPY86]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[COPY87]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[COPY88]](s8)
    ; CHECK-NEXT: JSR &__mulsi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY97:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY98:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY99:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY100:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY101:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY102:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY103:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY104:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY105:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY106:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY107:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY108:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY109:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY110:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY111:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY112:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[COPY113:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY114:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY115:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY116:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY117:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY118:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY119:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY120:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY121:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY122:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY123:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY124:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY125:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY126:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY127:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY128:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY98]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY99]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY100]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc8 = COPY [[COPY]](s8)
    ; CHECK-NEXT: $rc9 = COPY [[COPY114]](s8)
    ; CHECK-NEXT: $rc10 = COPY [[COPY115]](s8)
    ; CHECK-NEXT: $rc11 = COPY [[COPY116]](s8)
    ; CHECK-NEXT: $rc12 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc13 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc14 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc15 = COPY [[C]](s8)
    ; CHECK-NEXT: JSR &__muldi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit $rc8, implicit $rc9, implicit $rc10, implicit $rc11, implicit $rc12, implicit $rc13, implicit $rc14, implicit $rc15, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3, implicit-def $rc4, implicit-def $rc5, implicit-def $rc6, implicit-def $rc7
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY129:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY130:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY131:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY132:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY133:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY134:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY135:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY136:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY137:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY138:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY139:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY140:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY141:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY142:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY143:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY144:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY145:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY146:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY147:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY148:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY149:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY150:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY151:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY152:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY153:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY154:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY155:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY156:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY157:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY158:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY159:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY160:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: $a = COPY [[COPY137]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY138]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY139]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY140]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[COPY]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[COPY146]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[COPY147]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[COPY148]](s8)
    ; CHECK-NEXT: JSR &__mulsi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY161:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY162:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY163:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY164:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY165:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY166:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY167:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY168:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY169:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY170:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY171:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY172:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY173:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY174:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY175:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY176:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY177:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY178:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY179:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY180:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY181:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY182:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY183:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY184:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY185:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY186:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY187:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY188:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY189:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY190:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY191:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY192:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: $a = COPY [[COPY165]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY166]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY167]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY168]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[COPY181]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[COPY182]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[COPY183]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[COPY184]](s8)
    ; CHECK-NEXT: JSR &__mulsi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY193:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY194:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY195:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY196:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY197:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY198:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY199:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY200:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY201:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY202:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY203:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY204:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY205:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY206:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY207:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY208:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY209:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY210:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY211:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY212:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY213:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY214:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY215:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY216:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY217:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY218:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY219:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY220:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY221:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY222:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY223:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY224:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY194]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY195]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY196]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[COPY217]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[COPY218]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[COPY219]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[COPY220]](s8)
    ; CHECK-NEXT: JSR &__mulsi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY225:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY226:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY227:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY228:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY229:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY230:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY231:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY232:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY233:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY234:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY235:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY236:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY237:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY238:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY239:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY240:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY229]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY230]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY231]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY232]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc8 = COPY [[COPY]](s8)
    ; CHECK-NEXT: $rc9 = COPY [[COPY114]](s8)
    ; CHECK-NEXT: $rc10 = COPY [[COPY115]](s8)
    ; CHECK-NEXT: $rc11 = COPY [[COPY116]](s8)
    ; CHECK-NEXT: $rc12 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc13 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc14 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc15 = COPY [[C]](s8)
    ; CHECK-NEXT: JSR &__muldi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit $rc8, implicit $rc9, implicit $rc10, implicit $rc11, implicit $rc12, implicit $rc13, implicit $rc14, implicit $rc15, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3, implicit-def $rc4, implicit-def $rc5, implicit-def $rc6, implicit-def $rc7
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY241:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY242:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY243:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY244:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY245:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY246:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY247:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY248:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY249:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY250:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY251:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY252:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY253:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY254:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY255:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY256:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY98]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY99]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY100]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc8 = COPY [[COPY245]](s8)
    ; CHECK-NEXT: $rc9 = COPY [[COPY246]](s8)
    ; CHECK-NEXT: $rc10 = COPY [[COPY247]](s8)
    ; CHECK-NEXT: $rc11 = COPY [[COPY248]](s8)
    ; CHECK-NEXT: $rc12 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc13 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc14 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc15 = COPY [[C]](s8)
    ; CHECK-NEXT: JSR &__muldi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit $rc8, implicit $rc9, implicit $rc10, implicit $rc11, implicit $rc12, implicit $rc13, implicit $rc14, implicit $rc15, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3, implicit-def $rc4, implicit-def $rc5, implicit-def $rc6, implicit-def $rc7
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY257:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY258:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY259:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY260:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY261:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY262:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY263:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY264:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY265:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY266:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY267:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY268:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY269:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY270:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY271:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY272:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY273:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY274:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY275:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY276:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY277:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY278:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY279:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY280:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY281:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY282:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY283:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY284:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY285:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY286:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY287:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY288:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: $a = COPY [[COPY269]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY270]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY271]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY272]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[COPY]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[COPY274]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[COPY275]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[COPY276]](s8)
    ; CHECK-NEXT: JSR &__mulsi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY289:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY290:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY291:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY292:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY293:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY294:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY295:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY296:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY297:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY298:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY299:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY300:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY301:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY302:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY303:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY304:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY305:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY306:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY307:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY308:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY309:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY310:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY311:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY312:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY313:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY314:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY315:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY316:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY317:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY318:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY319:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY320:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: $a = COPY [[COPY297]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY298]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY299]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY300]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[COPY309]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[COPY310]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[COPY311]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[COPY312]](s8)
    ; CHECK-NEXT: JSR &__mulsi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY321:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY322:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY323:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY324:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY325:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY326:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY327:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY328:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY329:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY330:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY331:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY332:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY333:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY334:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY335:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY336:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY337:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY338:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY339:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY340:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY341:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY342:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY343:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY344:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY345:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY346:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY347:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY348:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY349:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY350:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY351:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY352:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: $a = COPY [[COPY325]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY326]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY327]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY328]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[COPY345]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[COPY346]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[COPY347]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[COPY348]](s8)
    ; CHECK-NEXT: JSR &__mulsi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY353:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY354:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY355:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY356:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY357:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY358:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY359:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY360:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY361:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY362:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY363:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY364:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY365:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY366:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY367:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY368:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY369:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY370:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY371:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY372:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY373:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY374:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY375:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY376:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY377:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY378:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY379:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY380:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY381:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY382:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY383:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY384:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY354]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY355]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY356]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[COPY381]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[COPY382]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[COPY383]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[COPY384]](s8)
    ; CHECK-NEXT: JSR &__mulsi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY385:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY386:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY387:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY388:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY389:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY390:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY391:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY392:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY393:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY394:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY395:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY396:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY397:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY398:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY399:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY400:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY393]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY394]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY395]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY396]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc8 = COPY [[COPY]](s8)
    ; CHECK-NEXT: $rc9 = COPY [[COPY114]](s8)
    ; CHECK-NEXT: $rc10 = COPY [[COPY115]](s8)
    ; CHECK-NEXT: $rc11 = COPY [[COPY116]](s8)
    ; CHECK-NEXT: $rc12 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc13 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc14 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc15 = COPY [[C]](s8)
    ; CHECK-NEXT: JSR &__muldi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit $rc8, implicit $rc9, implicit $rc10, implicit $rc11, implicit $rc12, implicit $rc13, implicit $rc14, implicit $rc15, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3, implicit-def $rc4, implicit-def $rc5, implicit-def $rc6, implicit-def $rc7
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY229]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY230]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY231]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY232]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc8 = COPY [[COPY245]](s8)
    ; CHECK-NEXT: $rc9 = COPY [[COPY246]](s8)
    ; CHECK-NEXT: $rc10 = COPY [[COPY247]](s8)
    ; CHECK-NEXT: $rc11 = COPY [[COPY248]](s8)
    ; CHECK-NEXT: $rc12 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc13 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc14 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc15 = COPY [[C]](s8)
    ; CHECK-NEXT: JSR &__muldi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit $rc8, implicit $rc9, implicit $rc10, implicit $rc11, implicit $rc12, implicit $rc13, implicit $rc14, implicit $rc15, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3, implicit-def $rc4, implicit-def $rc5, implicit-def $rc6, implicit-def $rc7
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY401:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[COPY402:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY403:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY404:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY405:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY406:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY407:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY408:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY409:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY410:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY411:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY412:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY413:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY414:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY415:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY416:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY98]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY99]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY100]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc8 = COPY [[COPY409]](s8)
    ; CHECK-NEXT: $rc9 = COPY [[COPY410]](s8)
    ; CHECK-NEXT: $rc10 = COPY [[COPY411]](s8)
    ; CHECK-NEXT: $rc11 = COPY [[COPY412]](s8)
    ; CHECK-NEXT: $rc12 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc13 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc14 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc15 = COPY [[C]](s8)
    ; CHECK-NEXT: JSR &__muldi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit $rc8, implicit $rc9, implicit $rc10, implicit $rc11, implicit $rc12, implicit $rc13, implicit $rc14, implicit $rc15, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3, implicit-def $rc4, implicit-def $rc5, implicit-def $rc6, implicit-def $rc7
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: RTS implicit [[COPY32]](s8)
    %0:_(s8) = COPY $a
    %1:_(s128) = G_ANYEXT %0
    %2:_(s128) = G_MUL %1, %1
    %3:_(s8) = G_TRUNC %2
    RTS implicit %3
...
---
name: udivrem
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: udivrem
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY1]](s8)
    ; CHECK-NEXT: $rs1 = COPY [[FRAME_INDEX]](p0)
    ; CHECK-NEXT: JSR &__udivmodqi4, mos_csr, implicit $a, implicit $x, implicit $rs1, implicit-def $a
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[LOAD_INDIR_IDX:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[FRAME_INDEX]](p0), [[C]] :: (dereferenceable load (s8) from %stack.0)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s8), implicit [[LOAD_INDIR_IDX]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8), %3:_(s8) = G_UDIVREM %0, %1
    RTS implicit %2, implicit %3
...
---
name: sdivrem
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: sdivrem
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY1]](s8)
    ; CHECK-NEXT: $rs1 = COPY [[FRAME_INDEX]](p0)
    ; CHECK-NEXT: JSR &__divmodqi4, mos_csr, implicit $a, implicit $x, implicit $rs1, implicit-def $a
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[LOAD_INDIR_IDX:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[FRAME_INDEX]](p0), [[C]] :: (dereferenceable load (s8) from %stack.0)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s8), implicit [[LOAD_INDIR_IDX]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8), %3:_(s8) = G_SDIVREM %0, %1
    RTS implicit %2, implicit %3
...
---
name: anyext_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: anyext_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s1) = COPY $c
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[C1]], [[C1]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[C1]], [[C1]]
    ; CHECK-NEXT: [[SELECT3:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[C1]], [[C1]]
    ; CHECK-NEXT: RTS implicit [[SELECT]](s8), implicit [[SELECT1]](s8), implicit [[SELECT2]](s8), implicit [[SELECT3]](s8)
    %0:_(s1) = COPY $c
    %1:_(s32) = G_ANYEXT %0
    %2:_(s8), %3:_(s8), %4:_(s8), %5:_(s8) = G_UNMERGE_VALUES %1
    RTS implicit %2, implicit %3, implicit %4, implicit %5
...
---
name: sext_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: sext_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s1) = COPY $c
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: [[SELECT3:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: RTS implicit [[SELECT]](s8), implicit [[SELECT1]](s8), implicit [[SELECT2]](s8), implicit [[SELECT3]](s8)
    %0:_(s1) = COPY $c
    %1:_(s32) = G_SEXT %0
    %2:_(s8), %3:_(s8), %4:_(s8), %5:_(s8) = G_UNMERGE_VALUES %1
    RTS implicit %2, implicit %3, implicit %4, implicit %5
...
---
name: sext_8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: sext_8
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC2]](s1)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY1]](s1), [[C2]], [[C]]
    ; CHECK-NEXT: RTS implicit [[COPY]](s8), implicit [[SELECT]](s8), implicit [[SELECT]](s8), implicit [[SELECT]](s8)
    %0:_(s8) = COPY $a
    %1:_(s32) = G_SEXT %0
    %2:_(s8), %3:_(s8), %4:_(s8), %5:_(s8) = G_UNMERGE_VALUES %1
    RTS implicit %2, implicit %3, implicit %4, implicit %5
...
---
name: sext_16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: sext_16
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY1]], [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC2]](s1)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY2]](s1), [[C2]], [[C]]
    ; CHECK-NEXT: RTS implicit [[COPY]](s8), implicit [[COPY1]](s8), implicit [[SELECT]](s8), implicit [[SELECT]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $a
    %2:_(s16) = G_MERGE_VALUES %0, %1
    %3:_(s32) = G_SEXT %2
    %4:_(s8), %5:_(s8), %6:_(s8), %7:_(s8) = G_UNMERGE_VALUES %3
    RTS implicit %4, implicit %5, implicit %6, implicit %7
...
---
name: sext_32_24
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: sext_32_24
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY $y
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY2]], [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s1) = COPY [[SBC2]](s1)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY3]](s1), [[C2]], [[C]]
    ; CHECK-NEXT: RTS implicit [[COPY]](s8), implicit [[COPY1]](s8), implicit [[COPY2]](s8), implicit [[SELECT]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8) = COPY $y
    %3:_(s24) = G_MERGE_VALUES %0, %1, %2
    %4:_(s32) = G_SEXT %3
    %5:_(s8), %6:_(s8), %7:_(s8), %8:_(s8) = G_UNMERGE_VALUES %4
    RTS implicit %5, implicit %6, implicit %7, implicit %8
...
---
name: zext_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: zext_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s1) = COPY $c
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[C1]], [[C1]]
    ; CHECK-NEXT: RTS implicit [[SELECT]](s8), implicit [[SELECT1]](s8)
    %0:_(s1) = COPY $c
    %1:_(s16) = G_ZEXT %0
    %2:_(s8), %3:_(s8) = G_UNMERGE_VALUES %1
    RTS implicit %2, implicit %3
...
---
name: zext_8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: zext_8
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: RTS implicit [[COPY]](s8), implicit [[C]](s8)
    %0:_(s8) = COPY $a
    %1:_(s16) = G_ZEXT %0
    %2:_(s8), %3:_(s8) = G_UNMERGE_VALUES %1
    RTS implicit %2, implicit %3
...
---
name: zext_16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: zext_16
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: RTS implicit [[UV]](s8), implicit [[UV1]](s8), implicit [[C]](s8), implicit [[C]](s8)
    %0:_(s16) = COPY $rs1
    %1:_(s32) = G_ZEXT %0
    %2:_(s8), %3:_(s8), %4:_(s8), %5:_(s8) = G_UNMERGE_VALUES %1
    RTS implicit %2, implicit %3, implicit %4, implicit %5
...
---
name: trunc_anyext
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: trunc_anyext
    ; CHECK: [[COPY:%[0-9]+]]:_(s1) = COPY $c
    ; CHECK-NEXT: RTS implicit [[COPY]](s1)
    %1:_(s1) = COPY $c
    %2:_(s8) = G_ANYEXT %1
    %3:_(s1) = G_TRUNC %2
    RTS implicit %3
...
---
name: unmerge_anyext_to_copy
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: unmerge_anyext_to_copy
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s8) = G_IMPLICIT_DEF
    ; CHECK-NEXT: RTS implicit [[COPY]](s8), implicit [[DEF]](s8)
    %1:_(s8) = COPY $a
    %2:_(s16) = G_ANYEXT %1
    %3:_(s8), %4:_(s8) = G_UNMERGE_VALUES %2
    RTS implicit %3, implicit %4
...
---
name: unmerge_anyext_to_unmerge
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: unmerge_anyext_to_unmerge
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s8) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: RTS implicit [[UV]](s8), implicit [[UV1]](s8), implicit [[DEF]](s8), implicit [[COPY1]](s8)
    %1:_(s16) = COPY $rs1
    %2:_(s32) = G_ANYEXT %1
    %3:_(s8), %4:_(s8), %5:_(s8), %6:_(s8) = G_UNMERGE_VALUES %2
    RTS implicit %3, implicit %4, implicit %5, implicit %6
...
---
name: bswap_16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: bswap_16
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[UV1]](s8)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[UV]](s8)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[COPY1]](s8), [[COPY2]](s8)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = G_BSWAP %0
    RTS implicit %1
...
---
name: inc_16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: inc_16
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[INC:%[0-9]+]]:_(s8), [[INC1:%[0-9]+]]:_(s8) = G_INC [[UV]](s8), [[UV1]](s8)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[INC]](s8), [[INC1]](s8)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = G_CONSTANT i16 1
    %2:_(s16) = G_ADD %0, %1
    RTS implicit %2
...
---
name: inc_by_sub
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: inc_by_sub
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[INC:%[0-9]+]]:_(s8), [[INC1:%[0-9]+]]:_(s8) = G_INC [[UV]](s8), [[UV1]](s8)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[INC]](s8), [[INC1]](s8)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = G_CONSTANT i16 -1
    %2:_(s16) = G_SUB %0, %1
    RTS implicit %2
...
---
name: inc_32
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: inc_32
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s16) = COPY $rs2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY1]](s16)
    ; CHECK-NEXT: [[INC:%[0-9]+]]:_(s8), [[INC1:%[0-9]+]]:_(s8), [[INC2:%[0-9]+]]:_(s8), [[INC3:%[0-9]+]]:_(s8) = G_INC [[UV]](s8), [[UV1]](s8), [[UV2]](s8), [[UV3]](s8)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[INC]](s8), [[INC1]](s8)
    ; CHECK-NEXT: [[MV1:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[INC2]](s8), [[INC3]](s8)
    ; CHECK-NEXT: RTS implicit [[MV]](s16), implicit [[MV1]](s16)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = COPY $rs2
    %2:_(s32) = G_MERGE_VALUES %0, %1
    %3:_(s32) = G_CONSTANT i32 1
    %4:_(s32) = G_ADD %2, %3
    %5:_(s16), %6:_(s16) = G_UNMERGE_VALUES %4
    RTS implicit %5, implicit %6
...
---
name: dec_16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: dec_16
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[DEC:%[0-9]+]]:_(s8), [[DEC1:%[0-9]+]]:_(s8) = G_DEC [[UV]](s8), [[UV1]](s8)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[DEC]](s8), [[DEC1]](s8)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = G_CONSTANT i16 1
    %2:_(s16) = G_SUB %0, %1
    RTS implicit %2
...
---
name: dec_by_add
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: dec_by_add
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[DEC:%[0-9]+]]:_(s8), [[DEC1:%[0-9]+]]:_(s8) = G_DEC [[UV]](s8), [[UV1]](s8)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[DEC]](s8), [[DEC1]](s8)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = G_CONSTANT i16 -1
    %2:_(s16) = G_ADD %0, %1
    RTS implicit %2
...
---
name: dec_32
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: dec_32
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s16) = COPY $rs2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY1]](s16)
    ; CHECK-NEXT: [[DEC:%[0-9]+]]:_(s8), [[DEC1:%[0-9]+]]:_(s8), [[DEC2:%[0-9]+]]:_(s8), [[DEC3:%[0-9]+]]:_(s8) = G_DEC [[UV]](s8), [[UV1]](s8), [[UV2]](s8), [[UV3]](s8)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[DEC]](s8), [[DEC1]](s8)
    ; CHECK-NEXT: [[MV1:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[DEC2]](s8), [[DEC3]](s8)
    ; CHECK-NEXT: RTS implicit [[MV]](s16), implicit [[MV1]](s16)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = COPY $rs2
    %2:_(s32) = G_MERGE_VALUES %0, %1
    %3:_(s32) = G_CONSTANT i32 1
    %4:_(s32) = G_SUB %2, %3
    %5:_(s16), %6:_(s16) = G_UNMERGE_VALUES %4
    RTS implicit %5, implicit %6
...
---
name: usubsat
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: usubsat
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 16
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 32
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[C]], [[C1]], [[C3]]
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s8) = COPY [[SBC]](s8)
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[SBC1]](s1), [[C2]], [[C3]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s8) = G_SELECT [[SELECT]](s1), [[C4]], [[COPY]]
    ; CHECK-NEXT: RTS implicit [[SELECT1]](s8)
    %0:_(s8) = G_CONSTANT i8 16
    %1:_(s8) = G_CONSTANT i8 32
    %2:_(s8) = G_USUBSAT %0, %1
    RTS implicit %2
...
---
name: shl_1_8bit
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shl_1_8bit
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SHLE:%[0-9]+]]:_(s8), [[SHLE1:%[0-9]+]]:_(s1) = G_SHLE [[COPY]], [[C]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[SHLE]](s8)
    ; CHECK-NEXT: RTS implicit [[COPY1]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_SHL %0, %1
    RTS implicit %2
...
---
name: shl_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shl_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY $y
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s8) = COPY $rc0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SHLE:%[0-9]+]]:_(s8), [[SHLE1:%[0-9]+]]:_(s1) = G_SHLE [[COPY]], [[C]]
    ; CHECK-NEXT: [[SHLE2:%[0-9]+]]:_(s8), [[SHLE3:%[0-9]+]]:_(s1) = G_SHLE [[COPY1]], [[SHLE1]]
    ; CHECK-NEXT: [[SHLE4:%[0-9]+]]:_(s8), [[SHLE5:%[0-9]+]]:_(s1) = G_SHLE [[COPY2]], [[SHLE3]]
    ; CHECK-NEXT: [[SHLE6:%[0-9]+]]:_(s8), [[SHLE7:%[0-9]+]]:_(s1) = G_SHLE [[COPY3]], [[SHLE5]]
    ; CHECK-NEXT: RTS implicit [[SHLE]](s8), implicit [[SHLE2]](s8), implicit [[SHLE4]](s8), implicit [[SHLE6]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8) = COPY $y
    %3:_(s8) = COPY $rc0
    %4:_(s32) = G_MERGE_VALUES %0, %1, %2, %3
    %5:_(s32) = G_CONSTANT i32 1
    %6:_(s32) = G_SHL %4, %5
    %7:_(s8), %8:_(s8), %9:_(s8), %10:_(s8) = G_UNMERGE_VALUES %6
    RTS implicit %7, implicit %8, implicit %9, implicit %10
...
---
name: shl_2
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shl_2
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SHLE:%[0-9]+]]:_(s8), [[SHLE1:%[0-9]+]]:_(s1) = G_SHLE [[COPY]], [[C]]
    ; CHECK-NEXT: [[SHLE2:%[0-9]+]]:_(s8), [[SHLE3:%[0-9]+]]:_(s1) = G_SHLE [[COPY1]], [[SHLE1]]
    ; CHECK-NEXT: [[SHLE4:%[0-9]+]]:_(s8), [[SHLE5:%[0-9]+]]:_(s1) = G_SHLE [[SHLE]], [[C]]
    ; CHECK-NEXT: [[SHLE6:%[0-9]+]]:_(s8), [[SHLE7:%[0-9]+]]:_(s1) = G_SHLE [[SHLE2]], [[SHLE5]]
    ; CHECK-NEXT: RTS implicit [[SHLE4]](s8), implicit [[SHLE6]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s16) = G_MERGE_VALUES %0, %1
    %3:_(s16) = G_CONSTANT i16 2
    %4:_(s16) = G_SHL %2, %3
    %5:_(s8), %6:_(s8) = G_UNMERGE_VALUES %4
    RTS implicit %5, implicit %6
...
---
name: shl_5
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shl_5
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[LSHRE2:%[0-9]+]]:_(s8), [[LSHRE3:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[LSHRE1]]
    ; CHECK-NEXT: [[LSHRE4:%[0-9]+]]:_(s8), [[LSHRE5:%[0-9]+]]:_(s1) = G_LSHRE [[C]], [[LSHRE3]]
    ; CHECK-NEXT: [[LSHRE6:%[0-9]+]]:_(s8), [[LSHRE7:%[0-9]+]]:_(s1) = G_LSHRE [[LSHRE]], [[C1]]
    ; CHECK-NEXT: [[LSHRE8:%[0-9]+]]:_(s8), [[LSHRE9:%[0-9]+]]:_(s1) = G_LSHRE [[LSHRE2]], [[LSHRE7]]
    ; CHECK-NEXT: [[LSHRE10:%[0-9]+]]:_(s8), [[LSHRE11:%[0-9]+]]:_(s1) = G_LSHRE [[LSHRE4]], [[LSHRE9]]
    ; CHECK-NEXT: [[LSHRE12:%[0-9]+]]:_(s8), [[LSHRE13:%[0-9]+]]:_(s1) = G_LSHRE [[LSHRE6]], [[C1]]
    ; CHECK-NEXT: [[LSHRE14:%[0-9]+]]:_(s8), [[LSHRE15:%[0-9]+]]:_(s1) = G_LSHRE [[LSHRE8]], [[LSHRE13]]
    ; CHECK-NEXT: [[LSHRE16:%[0-9]+]]:_(s8), [[LSHRE17:%[0-9]+]]:_(s1) = G_LSHRE [[LSHRE10]], [[LSHRE15]]
    ; CHECK-NEXT: RTS implicit [[LSHRE16]](s8), implicit [[LSHRE14]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s16) = G_MERGE_VALUES %0, %1
    %3:_(s16) = G_CONSTANT i16 5
    %4:_(s16) = G_SHL %2, %3
    %5:_(s8), %6:_(s8) = G_UNMERGE_VALUES %4
    RTS implicit %5, implicit %6
...
---
name: shl_9
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shl_9
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SHLE:%[0-9]+]]:_(s8), [[SHLE1:%[0-9]+]]:_(s1) = G_SHLE [[C]], [[C1]]
    ; CHECK-NEXT: [[SHLE2:%[0-9]+]]:_(s8), [[SHLE3:%[0-9]+]]:_(s1) = G_SHLE [[COPY]], [[SHLE1]]
    ; CHECK-NEXT: RTS implicit [[SHLE]](s8), implicit [[SHLE2]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s16) = G_MERGE_VALUES %0, %1
    %3:_(s16) = G_CONSTANT i16 9
    %4:_(s16) = G_SHL %2, %3
    %5:_(s8), %6:_(s8) = G_UNMERGE_VALUES %4
    RTS implicit %5, implicit %6
...
---
name: shl_16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shl_16
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: RTS implicit [[C]](s8), implicit [[C]](s8), implicit [[COPY]](s8), implicit [[COPY1]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8) = COPY $y
    %3:_(s8) = COPY $rc0
    %4:_(s32) = G_MERGE_VALUES %0, %1, %2, %3
    %5:_(s32) = G_CONSTANT i32 16
    %6:_(s32) = G_SHL %4, %5
    %7:_(s8), %8:_(s8), %9:_(s8), %10:_(s8) = G_UNMERGE_VALUES %6
    RTS implicit %7, implicit %8, implicit %9, implicit %10
...
---
name: shl_var
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shl_var
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY1]](s8)
    ; CHECK-NEXT: JSR &__ashlqi3, mos_csr, implicit $a, implicit $x, implicit-def $a
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: RTS implicit [[COPY2]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8) = G_SHL %0, %1
    RTS implicit %2
...
---
name: shl_var_17
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shl_var_17
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s8) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY3]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY4]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[DEF]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[COPY1]](s8)
    ; CHECK-NEXT: JSR &__ashlsi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: RTS implicit [[COPY5]](s8)
    %0:_(s8) = COPY $a
    %1:_(s17) = G_ANYEXT %0
    %2:_(s8) = COPY $x
    %3:_(s17) = G_SHL %1, %2
    %4:_(s8) = G_TRUNC %3
    RTS implicit %4
...
---
name: lshr_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: lshr_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY1]], [[C]]
    ; CHECK-NEXT: [[LSHRE2:%[0-9]+]]:_(s8), [[LSHRE3:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[LSHRE1]]
    ; CHECK-NEXT: RTS implicit [[LSHRE2]](s8), implicit [[LSHRE]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s16) = G_MERGE_VALUES %0, %1
    %3:_(s32) = G_CONSTANT i32 1
    %4:_(s16) = G_LSHR %2, %3
    %5:_(s8), %6:_(s8) = G_UNMERGE_VALUES %4
    RTS implicit %5, implicit %6
...
---
name: lshr_var
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: lshr_var
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY1]](s8)
    ; CHECK-NEXT: JSR &__lshrqi3, mos_csr, implicit $a, implicit $x, implicit-def $a
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: RTS implicit [[COPY2]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8) = G_LSHR %0, %1
    RTS implicit %2
...
---
name: ashr_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ashr_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[LSHRE]](s8)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_ASHR %0, %1
    RTS implicit %2
...
---
name: ashr_7
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ashr_7
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC2]](s1)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY1]](s1), [[C2]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SHLE:%[0-9]+]]:_(s8), [[SHLE1:%[0-9]+]]:_(s1) = G_SHLE [[COPY]], [[C3]]
    ; CHECK-NEXT: [[SHLE2:%[0-9]+]]:_(s8), [[SHLE3:%[0-9]+]]:_(s1) = G_SHLE [[SELECT]], [[SHLE1]]
    ; CHECK-NEXT: RTS implicit [[SHLE2]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 7
    %2:_(s8) = G_ASHR %0, %1
    RTS implicit %2
...
---
name: ashr_var_17
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ashr_var_17
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s8) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(s8) = COPY [[DEF]](s8)
    ; CHECK-NEXT: $a = COPY [[COPY]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY3]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY4]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[DEF]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[COPY1]](s8)
    ; CHECK-NEXT: JSR &__ashlsi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: RTS implicit [[COPY5]](s8)
    %0:_(s8) = COPY $a
    %1:_(s17) = G_ANYEXT %0
    %2:_(s8) = COPY $x
    %3:_(s17) = G_SHL %1, %2
    %4:_(s8) = G_TRUNC %3
    RTS implicit %4
...
---
name: ashr_16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ashr_16
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $y
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $rc0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY1]], [[C]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[SBC2]](s1), [[C1]], [[C2]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SELECT]](s1)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s8) = G_SELECT [[COPY2]](s1), [[C3]], [[C]]
    ; CHECK-NEXT: RTS implicit [[COPY]](s8), implicit [[COPY1]](s8), implicit [[SELECT1]](s8), implicit [[SELECT1]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8) = COPY $y
    %3:_(s8) = COPY $rc0
    %4:_(s32) = G_MERGE_VALUES %0, %1, %2, %3
    %5:_(s32) = G_CONSTANT i32 16
    %6:_(s32) = G_ASHR %4, %5
    %7:_(s8), %8:_(s8), %9:_(s8), %10:_(s8) = G_UNMERGE_VALUES %6
    RTS implicit %7, implicit %8, implicit %9, implicit %10
...
---
name: rotl_narrow
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: rotl_narrow
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SHLE:%[0-9]+]]:_(s8), [[SHLE1:%[0-9]+]]:_(s1) = G_SHLE [[COPY]], [[C]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[SHLE]](s8)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 7
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY]], [[C1]]
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[AND]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[LSHRE]](s8)
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s8) = G_AND [[COPY2]], [[C1]]
    ; CHECK-NEXT: [[LSHRE2:%[0-9]+]]:_(s8), [[LSHRE3:%[0-9]+]]:_(s1) = G_LSHRE [[AND1]], [[C]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s8) = COPY [[LSHRE2]](s8)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s8) = G_OR [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: RTS implicit [[OR]](s8)
    %0:_(s8) = COPY $a
    %1:_(s3) = G_TRUNC %0
    %2:_(s3) = G_CONSTANT i3 1
    %3:_(s3) = G_ROTL %1, %2
    %4:_(s8) = G_ANYEXT %3
    RTS implicit %4
...
---
name: rotl_var_16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: rotl_var_16
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s16) = COPY $rs2
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[COPY1]](s16)
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: $a = COPY [[UV]](s8)
    ; CHECK-NEXT: $x = COPY [[UV1]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[TRUNC]](s8)
    ; CHECK-NEXT: JSR &__rotlhi3, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit-def $a, implicit-def $x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: RTS implicit [[COPY2]](s8), implicit [[COPY3]](s8)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = COPY $rs2
    %2:_(s16) = G_ROTL %0, %1
    %3:_(s8), %4:_(s8) = G_UNMERGE_VALUES %2
    RTS implicit %3, implicit %4
...
---
name: rotl_7
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: rotl_7
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s1) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY1]], [[DEF]]
    ; CHECK-NEXT: [[LSHRE2:%[0-9]+]]:_(s8), [[LSHRE3:%[0-9]+]]:_(s1) = G_LSHRE [[COPY1]], [[LSHRE1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[LSHRE2]](s8)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 7
    %2:_(s8) = G_ROTL %0, %1
    RTS implicit %2
...
---
name: rotr_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: rotr_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s1) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[DEF]]
    ; CHECK-NEXT: [[LSHRE2:%[0-9]+]]:_(s8), [[LSHRE3:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[LSHRE1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[LSHRE2]](s8)
    ; CHECK-NEXT: RTS implicit [[COPY1]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_ROTR %0, %1
    RTS implicit %2
...
---
name: icmp_ptr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ptr
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $rs3
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT1]](s16)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[UV1]], [[UV3]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC4]](s1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[UV]], [[UV2]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[SBC9]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s1) = COPY [[SELECT]](s1)
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[COPY2]](s1), [[COPY3]], [[C1]]
    ; CHECK-NEXT: RTS implicit [[SELECT1]](s1)
    %0:_(p0) = COPY $rs1
    %1:_(p0) = COPY $rs3
    %2:_(s1) = G_ICMP intpred(eq), %0, %1
    RTS implicit %2
...
---
name: icmp_zp_ptr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_zp_ptr
    ; CHECK: [[COPY:%[0-9]+]]:_(p1) = COPY $rc4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p1) = COPY $rc6
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY]](p1)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY1]](p1)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[PTRTOINT]], [[PTRTOINT1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[SBC4]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SELECT]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s1)
    %0:_(p1) = COPY $rc4
    %1:_(p1) = COPY $rc6
    %2:_(s1) = G_ICMP intpred(eq), %0, %1
    RTS implicit %2
...
---
name: icmp_s3
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_s3
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 7
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[AND]](s8)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY1]], [[AND]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[SBC4]](s1), [[C1]], [[C2]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SELECT]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s1)
    %0:_(s8) = COPY $a
    %1:_(s3) = G_TRUNC %0
    %2:_(s3) = G_TRUNC %0
    %3:_(s1) = G_ICMP intpred(eq), %1, %2
    RTS implicit %3
...
---
name: icmp_eq_s16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_eq_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s16) = COPY $rs2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY1]](s16)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[UV1]], [[UV3]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC4]](s1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[UV]], [[UV2]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[SBC9]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s1) = COPY [[SELECT]](s1)
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[COPY2]](s1), [[COPY3]], [[C1]]
    ; CHECK-NEXT: RTS implicit [[SELECT1]](s1)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = COPY $rs2
    %2:_(s1) = G_ICMP intpred(eq), %0, %1
    RTS implicit %2
...
---
name: icmp_z_s16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_z_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[UV1]], [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC4]](s1)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[UV]], [[C]], [[C1]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[SBC9]](s1), [[C1]], [[C2]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SELECT]](s1)
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[COPY1]](s1), [[COPY2]], [[C2]]
    ; CHECK-NEXT: RTS implicit [[SELECT1]](s1)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = G_CONSTANT i16 0
    %2:_(s1) = G_ICMP intpred(eq), %0, %1
    RTS implicit %2
...
---
name: icmp_ule_s16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ule_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s16) = COPY $rs2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY1]](s16)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[UV1]], [[UV3]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC4]](s1)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[UV]], [[UV2]], [[C]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(s1) = COPY [[SBC6]](s1)
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[COPY2]](s1), [[COPY4]], [[COPY3]]
    ; CHECK-NEXT: RTS implicit [[SELECT]](s1)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = COPY $rs2
    %2:_(s1) = G_ICMP intpred(ule), %0, %1
    RTS implicit %2
...
---
name: icmp_slt_s16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_slt_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s16) = COPY $rs2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY1]](s16)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[UV]], [[UV2]], [[C]]
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[UV1]], [[UV3]], [[SBC1]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SBC5]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[SBC8]](s1), [[XOR]], [[SBC5]]
    ; CHECK-NEXT: [[SBC10:%[0-9]+]]:_(s8), [[SBC11:%[0-9]+]]:_(s1), [[SBC12:%[0-9]+]]:_, [[SBC13:%[0-9]+]]:_, [[SBC14:%[0-9]+]]:_ = G_SBC [[SELECT]], [[C2]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[SBC12]](s1), [[C]], [[C3]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SELECT1]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s1)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = COPY $rs2
    %2:_(s1) = G_ICMP intpred(slt), %0, %1
    RTS implicit %2
...
---
name: icmp_eq
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_eq
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[COPY1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[SBC4]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SELECT]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(eq), %0, %1
    RTS implicit %2
...
---
name: icmp_ne
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ne
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[COPY1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[SBC4]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SELECT]](s1)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s8) = G_SELECT [[COPY2]](s1), [[C2]], [[C3]]
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SELECT1]], [[C2]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR]](s8)
    ; CHECK-NEXT: RTS implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(ne), %0, %1
    RTS implicit %2
...
---
name: icmp_ugt
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ugt
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY1]], [[COPY]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY2]](s1), [[C1]], [[C2]]
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SELECT]], [[C1]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR]](s8)
    ; CHECK-NEXT: RTS implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(ugt), %0, %1
    RTS implicit %2
...
---
name: icmp_ugt_254
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ugt_254
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 254
    %2:_(s1) = G_ICMP intpred(ugt), %0, %1
    RTS implicit %2
...
---
name: icmp_ugt_255
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ugt_255
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[C]], [[COPY]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY1]](s1), [[C2]], [[C3]]
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SELECT]], [[C2]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR]](s8)
    ; CHECK-NEXT: RTS implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 255
    %2:_(s1) = G_ICMP intpred(ugt), %0, %1
    RTS implicit %2
...
---
name: icmp_uge
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_uge
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[COPY1]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(uge), %0, %1
    RTS implicit %2
...
---
name: icmp_ult
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ult
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[COPY1]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY2]](s1), [[C1]], [[C2]]
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SELECT]], [[C1]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR]](s8)
    ; CHECK-NEXT: RTS implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(ult), %0, %1
    RTS implicit %2
...
---
name: icmp_ule
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ule
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY1]], [[COPY]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(ule), %0, %1
    RTS implicit %2
...
---
name: icmp_ule_254
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ule_254
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY1]](s1), [[C2]], [[C3]]
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SELECT]], [[C2]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR]](s8)
    ; CHECK-NEXT: RTS implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 254
    %2:_(s1) = G_ICMP intpred(ule), %0, %1
    RTS implicit %2
...
---
name: icmp_ule_255
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ule_255
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[C]], [[COPY]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 255
    %2:_(s1) = G_ICMP intpred(ule), %0, %1
    RTS implicit %2
...
---
name: icmp_sgt
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_sgt
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY1]], [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SBC]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[SBC3]](s1), [[XOR]], [[SBC]]
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[SELECT]], [[C2]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[SBC7]](s1), [[C]], [[C3]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SELECT1]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(sgt), %0, %1
    RTS implicit %2
...
---
name: icmp_sgt_126
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_sgt_126
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 127
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[C1]], [[C2]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC2]](s1)
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[COPY]], [[C]], [[C2]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC6]](s1)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[COPY2]](s1), [[C3]], [[C2]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[COPY1]](s1), [[C2]], [[SELECT]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s8) = G_SELECT [[SELECT1]](s1), [[C4]], [[C1]]
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SELECT2]], [[C4]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR]](s8)
    ; CHECK-NEXT: RTS implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 126
    %2:_(s1) = G_ICMP intpred(sgt), %0, %1
    RTS implicit %2
...
---
name: icmp_sgt_127
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_sgt_127
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 127
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[C]], [[COPY]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SBC]], [[C2]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[SBC3]](s1), [[XOR]], [[SBC]]
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[SELECT]], [[C3]], [[C1]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[SBC7]](s1), [[C1]], [[C4]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SELECT1]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 127
    %2:_(s1) = G_ICMP intpred(sgt), %0, %1
    RTS implicit %2
...
---
name: icmp_sge
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_sge
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[COPY1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SBC]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[SBC3]](s1), [[XOR]], [[SBC]]
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[SELECT]], [[C2]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[SBC7]](s1), [[C]], [[C3]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SELECT1]](s1)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s8) = G_SELECT [[COPY2]](s1), [[C4]], [[C2]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s8) = G_XOR [[SELECT2]], [[C4]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR1]](s8)
    ; CHECK-NEXT: RTS implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(sge), %0, %1
    RTS implicit %2
...
---
name: icmp_slt
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_slt
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[COPY1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SBC]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[SBC3]](s1), [[XOR]], [[SBC]]
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[SELECT]], [[C2]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[SBC7]](s1), [[C]], [[C3]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SELECT1]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(slt), %0, %1
    RTS implicit %2
...
---
name: icmp_slt_0
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_slt_0
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[C]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[SBC2]](s1), [[C1]], [[C2]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SELECT]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 0
    %2:_(s1) = G_ICMP intpred(slt), %0, %1
    RTS implicit %2
...
---
name: icmp_slt_0_s16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_slt_0_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[C]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[SBC2]](s1), [[C1]], [[C2]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SELECT]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s16) = G_MERGE_VALUES %0, %1
    %3:_(s16) = G_CONSTANT i16 0
    %4:_(s1) = G_ICMP intpred(slt), %2, %3
    RTS implicit %4
...
---
name: icmp_sle
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_sle
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY1]], [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SBC]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[SBC3]](s1), [[XOR]], [[SBC]]
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[SELECT]], [[C2]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[SBC7]](s1), [[C]], [[C3]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SELECT1]](s1)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s8) = G_SELECT [[COPY2]](s1), [[C4]], [[C2]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s8) = G_XOR [[SELECT2]], [[C4]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR1]](s8)
    ; CHECK-NEXT: RTS implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(sle), %0, %1
    RTS implicit %2
...
---
name: icmp_sle_126
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_sle_126
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 127
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[C1]], [[C2]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC2]](s1)
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[COPY]], [[C]], [[C2]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC6]](s1)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[COPY2]](s1), [[C3]], [[C2]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[COPY1]](s1), [[C2]], [[SELECT]]
    ; CHECK-NEXT: RTS implicit [[SELECT1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 126
    %2:_(s1) = G_ICMP intpred(sle), %0, %1
    RTS implicit %2
...
---
name: icmp_sle_127
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_sle_127
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 127
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[C]], [[COPY]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SBC]], [[C2]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[SBC3]](s1), [[XOR]], [[SBC]]
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[SELECT]], [[C3]], [[C1]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[SBC7]](s1), [[C1]], [[C4]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SELECT1]](s1)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s8) = G_SELECT [[COPY1]](s1), [[C5]], [[C3]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s8) = G_XOR [[SELECT2]], [[C5]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR1]](s8)
    ; CHECK-NEXT: RTS implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 127
    %2:_(s1) = G_ICMP intpred(sle), %0, %1
    RTS implicit %2
...
---
name: select_p
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: select_p
    ; CHECK: [[COPY:%[0-9]+]]:_(s1) = COPY $alsb
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $rs1
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY2]](p0)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT1]](s16)
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[UV]], [[UV2]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[UV1]], [[UV3]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[SELECT]](s8), [[SELECT1]](s8)
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: RTS implicit [[INTTOPTR]](p0)
    %0:_(s1) = COPY $alsb
    %1:_(p0) = COPY $rs0
    %2:_(p0) = COPY $rs1
    %3:_(p0) = G_SELECT %0, %1, %2
    RTS implicit %3
...
---
name: select_zp
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: select_zp
    ; CHECK: [[COPY:%[0-9]+]]:_(s1) = COPY $alsb
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p1) = COPY $rc0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p1) = COPY $rc1
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY1]](p1)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY2]](p1)
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[PTRTOINT]], [[PTRTOINT1]]
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p1) = G_INTTOPTR [[SELECT]](s8)
    ; CHECK-NEXT: RTS implicit [[INTTOPTR]](p1)
    %0:_(s1) = COPY $alsb
    %1:_(p1) = COPY $rc0
    %2:_(p1) = COPY $rc1
    %3:_(p1) = G_SELECT %0, %1, %2
    RTS implicit %3
...
---
name: abs
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: abs
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC2]](s1)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s8) = G_SUB [[C]], [[COPY]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY1]](s1), [[SUB]], [[COPY]]
    ; CHECK-NEXT: RTS implicit [[SELECT]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_ABS %0
    RTS implicit %1
...
---
name: ptradd
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ptradd
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY1]](s16)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[UADDE:%[0-9]+]]:_(s8), [[UADDE1:%[0-9]+]]:_(s1) = G_UADDE [[UV]], [[UV2]], [[C]]
    ; CHECK-NEXT: [[UADDE2:%[0-9]+]]:_(s8), [[UADDE3:%[0-9]+]]:_(s1) = G_UADDE [[UV1]], [[UV3]], [[UADDE1]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[UADDE]](s8), [[UADDE2]](s8)
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: RTS implicit [[INTTOPTR]](p0)
    %0:_(p0) = COPY $rs0
    %1:_(s16) = COPY $rs1
    %2:_(p0) = G_PTR_ADD %0, %1
    RTS implicit %2
...
---
name: ptr_inc
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ptr_inc
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[INC:%[0-9]+]]:_(p0) = G_INC [[COPY]](p0)
    ; CHECK-NEXT: RTS implicit [[INC]](p0)
    %0:_(p0) = COPY $rs0
    %1:_(s16) = G_CONSTANT i16 1
    %2:_(p0) = G_PTR_ADD %0, %1
    RTS implicit %2
...
---
name: ptr_dec
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ptr_dec
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[DEC:%[0-9]+]]:_(p0) = G_DEC [[COPY]](p0)
    ; CHECK-NEXT: RTS implicit [[DEC]](p0)
    %0:_(p0) = COPY $rs0
    %1:_(s16) = G_CONSTANT i16 -1
    %2:_(p0) = G_PTR_ADD %0, %1
    RTS implicit %2
...
---
name: ptradd_zp
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ptradd_zp
    ; CHECK: [[COPY:%[0-9]+]]:_(p1) = COPY $rc0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $rc1
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY]](p1)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s8) = G_ADD [[PTRTOINT]], [[COPY1]]
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p1) = G_INTTOPTR [[ADD]](s8)
    ; CHECK-NEXT: RTS implicit [[INTTOPTR]](p1)
    %0:_(p1) = COPY $rc0
    %1:_(s8) = COPY $rc1
    %2:_(p1) = G_PTR_ADD %0, %1
    RTS implicit %2
...
---
name: ptrmask
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ptrmask
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -46
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 4
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[UV]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s8) = G_AND [[UV1]], [[C1]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[AND]](s8), [[AND1]](s8)
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: RTS implicit [[INTTOPTR]](p0)
    %0:_(p0) = COPY $rs0
    %1:_(s16) = G_CONSTANT i16 1234
    %2:_(p0) = G_PTRMASK %0, %1
    RTS implicit %2
...
---
name: ptrmask_zp
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ptrmask_zp
    ; CHECK: [[COPY:%[0-9]+]]:_(p1) = COPY $rc0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 123
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY]](p1)
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[PTRTOINT]], [[C]]
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p1) = G_INTTOPTR [[AND]](s8)
    ; CHECK-NEXT: RTS implicit [[INTTOPTR]](p1)
    %0:_(p1) = COPY $rc0
    %1:_(s8) = G_CONSTANT i8 123
    %2:_(p1) = G_PTRMASK %0, %1
    RTS implicit %2
...
---
name: uaddo
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: uaddo
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[UADDE:%[0-9]+]]:_(s8), [[UADDE1:%[0-9]+]]:_(s1) = G_UADDE [[COPY]], [[COPY1]], [[C]]
    ; CHECK-NEXT: RTS implicit [[UADDE]](s8), implicit [[UADDE1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8), %3:_(s1) = G_UADDO %0, %1
    RTS implicit %2, implicit %3
...
---
name: saddo
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: saddo
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SADDE:%[0-9]+]]:_(s8), [[SADDE1:%[0-9]+]]:_(s1) = G_SADDE [[COPY]], [[COPY1]], [[C]]
    ; CHECK-NEXT: RTS implicit [[SADDE]](s8), implicit [[SADDE1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8), %3:_(s1) = G_SADDO %0, %1
    RTS implicit %2, implicit %3
...
---
name: usubo
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: usubo
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[COPY1]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[SBC]](s8)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[SBC1]](s1), [[C1]], [[C2]]
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SELECT]], [[C1]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR]](s8)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s8), implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8), %3:_(s1) = G_USUBO %0, %1
    RTS implicit %2, implicit %3
...
---
name: ssubo
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ssubo
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[COPY1]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[SBC]](s8)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s1) = COPY [[SBC3]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY2]](s8), implicit [[COPY3]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8), %3:_(s1) = G_SSUBO %0, %1
    RTS implicit %2, implicit %3
...
---
name: usube
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: usube
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY $v
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[COPY2]](s1), [[C1]], [[C]]
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[COPY1]], [[SELECT]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s8) = COPY [[SBC]](s8)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s8) = G_SELECT [[SBC1]](s1), [[C2]], [[C3]]
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[SELECT1]], [[C2]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR]](s8)
    ; CHECK-NEXT: RTS implicit [[COPY3]](s8), implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = COPY $v
    %3:_(s8), %4:_(s1) = G_USUBE %0, %1, %2
    RTS implicit %3, implicit %4
...
---
name: ssube
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ssube
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY $v
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[COPY2]](s1), [[C1]], [[C]]
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[COPY1]], [[SELECT]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s8) = COPY [[SBC]](s8)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(s1) = COPY [[SBC3]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY3]](s8), implicit [[COPY4]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = COPY $v
    %3:_(s8), %4:_(s1) = G_SSUBE %0, %1, %2
    RTS implicit %3, implicit %4
...
---
name: load_ptr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_ptr
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[LOAD_INDIR_IDX:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C]] :: (load (s8), align 2)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[LOAD_INDIR_IDX1:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C1]] :: (load (s8) from unknown-address + 1)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[LOAD_INDIR_IDX]](s8), [[LOAD_INDIR_IDX1]](s8)
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: RTS implicit [[INTTOPTR]](p0)
    %0:_(p0) = COPY $rs0
    %1:_(p0) = G_LOAD %0 :: (load 2)
    RTS implicit %1
...
---
name: load_constant_addr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_constant_addr
    ; CHECK: [[LOAD_ABS:%[0-9]+]]:_(s8) = G_LOAD_ABS 1234 :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ABS]](s8)
    %0:_(s16) = G_CONSTANT i16 1234
    %1:_(p0) = G_INTTOPTR %0
    %2:_(s8) = G_LOAD %1 :: (load (s8))
    RTS implicit %2
...
---
name: load_constant_zp_addr_negative
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_constant_zp_addr_negative
    ; CHECK: [[LOAD_ABS:%[0-9]+]]:_(s8) = G_LOAD_ABS target-flags(zeropage) 192 :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ABS]](s8)
    %0:_(s8) = G_CONSTANT i8 -64
    %1:_(p1) = G_INTTOPTR %0
    %2:_(s8) = G_LOAD %1 :: (load (s8))
    RTS implicit %2
...
---
name: load_constant_ptradd_zext_8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_constant_ptradd_zext_8
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[LOAD_ABS_IDX:%[0-9]+]]:_(s8) = G_LOAD_ABS_IDX 1234, [[COPY]](s8) :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ABS_IDX]](s8)
    %0:_(p0) = G_CONSTANT i16 1234
    %1:_(s8) = COPY $a
    %2:_(s16) = G_ZEXT %1
    %3:_(p0) = G_PTR_ADD %0, %2
    %4:_(s8) = G_LOAD %3 :: (load (s8))
    RTS implicit %4
...
---
name: load_constant_zext_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_constant_zext_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s1) = COPY $c
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: [[LOAD_ABS_IDX:%[0-9]+]]:_(s8) = G_LOAD_ABS_IDX 1234, [[SELECT]](s8) :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ABS_IDX]](s8)
    %0:_(p0) = G_CONSTANT i16 1234
    %1:_(s1) = COPY $c
    %2:_(s16) = G_ZEXT %1
    %3:_(p0) = G_PTR_ADD %0, %2
    %4:_(s8) = G_LOAD %3 :: (load (s8))
    RTS implicit %4
...
---
name: load_variable_ptradd_zext_8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_variable_ptradd_zext_8
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[LOAD_INDIR_IDX:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[COPY1]] :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_INDIR_IDX]](s8)
    %0:_(p0) = COPY $rs0
    %1:_(s8) = COPY $a
    %2:_(s16) = G_ZEXT %1
    %3:_(p0) = G_PTR_ADD %0, %2
    %4:_(s8) = G_LOAD %3 :: (load (s8))
    RTS implicit %4
...
---
name: load_ptradd_const8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_ptradd_const8
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[LOAD_INDIR_IDX:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C]] :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_INDIR_IDX]](s8)
    %0:_(p0) = COPY $rs0
    %2:_(s16) = G_CONSTANT i16 255
    %3:_(p0) = G_PTR_ADD %0, %2
    %4:_(s8) = G_LOAD %3 :: (load (s8))
    RTS implicit %4
...
---
name: load_zp_ptr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_zp_ptr
    ; CHECK: [[COPY:%[0-9]+]]:_(p1) = COPY $rc0
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY]](p1)
    ; CHECK-NEXT: [[LOAD_ZP_IDX:%[0-9]+]]:_(s8) = G_LOAD_ZP_IDX target-flags(zeropage) 0, [[PTRTOINT]](s8) :: (load (s8))
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p1) = G_INTTOPTR [[LOAD_ZP_IDX]](s8)
    ; CHECK-NEXT: RTS implicit [[INTTOPTR]](p1)
    %0:_(p1) = COPY $rc0
    %1:_(p1) = G_LOAD %0 :: (load 1)
    RTS implicit %1
...
---
name: load_zp_constant_addr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_zp_constant_addr
    ; CHECK: [[LOAD_ABS:%[0-9]+]]:_(s8) = G_LOAD_ABS target-flags(zeropage) 123 :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ABS]](s8)
    %0:_(s8) = G_CONSTANT i8 123
    %1:_(p1) = G_INTTOPTR %0
    %2:_(s8) = G_LOAD %1 :: (load (s8))
    RTS implicit %2
...
---
name: load_zp_constant_ptradd_8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_zp_constant_ptradd_8
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: [[LOAD_ZP_IDX:%[0-9]+]]:_(s8) = G_LOAD_ZP_IDX target-flags(zeropage) 123, [[COPY1]](s8) :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ZP_IDX]](s8)
    %0:_(p1) = G_CONSTANT i8 123
    %1:_(s8) = COPY $a
    %2:_(p1) = G_PTR_ADD %0, %1
    %3:_(s8) = G_LOAD %2 :: (load (s8))
    RTS implicit %3
...
---
name: load_zp_constant_zext_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_zp_constant_zext_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s1) = COPY $c
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY]](s1), [[C]], [[C1]]
    ; CHECK-NEXT: [[LOAD_ZP_IDX:%[0-9]+]]:_(s8) = G_LOAD_ZP_IDX target-flags(zeropage) 123, [[SELECT]](s8) :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ZP_IDX]](s8)
    %0:_(p1) = G_CONSTANT i8 123
    %1:_(s1) = COPY $c
    %2:_(s8) = G_ZEXT %1
    %3:_(p1) = G_PTR_ADD %0, %2
    %4:_(s8) = G_LOAD %3 :: (load (s8))
    RTS implicit %4
...
---
name: load_zp_ptradd_const8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_zp_ptradd_const8
    ; CHECK: [[COPY:%[0-9]+]]:_(p1) = COPY $rc0
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY]](p1)
    ; CHECK-NEXT: [[LOAD_ZP_IDX:%[0-9]+]]:_(s8) = G_LOAD_ZP_IDX target-flags(zeropage) 255, [[PTRTOINT]](s8) :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LOAD_ZP_IDX]](s8)
    %0:_(p1) = COPY $rc0
    %2:_(s8) = G_CONSTANT i8 255
    %3:_(p1) = G_PTR_ADD %0, %2
    %4:_(s8) = G_LOAD %3 :: (load (s8))
    RTS implicit %4
...
---
name: store_ptradd_zext_8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: store_ptradd_zext_8
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: G_STORE_INDIR_IDX [[COPY1]](s8), [[COPY]](p0), [[COPY1]] :: (store (s8))
    ; CHECK-NEXT: RTS
    %0:_(p0) = COPY $rs0
    %1:_(s8) = COPY $a
    %2:_(s16) = G_ZEXT %1
    %3:_(p0) = G_PTR_ADD %0, %2
    G_STORE %1, %3 :: (store (s8))
    RTS
...
---
name: store_ptr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: store_ptr
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $rs1
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: G_STORE_INDIR_IDX [[UV]](s8), [[COPY]](p0), [[C]] :: (store (s8), align 2)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: G_STORE_INDIR_IDX [[UV1]](s8), [[COPY]](p0), [[C1]] :: (store (s8) into unknown-address + 1)
    ; CHECK-NEXT: RTS
    %0:_(p0) = COPY $rs0
    %1:_(p0) = COPY $rs1
    G_STORE %1, %0 :: (store 2)
    RTS
...
---
name: store_zp_ptradd_8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: store_zp_ptradd_8
    ; CHECK: [[COPY:%[0-9]+]]:_(p1) = COPY $rc0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY]](p1)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s8) = G_ADD [[PTRTOINT]], [[COPY1]]
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p1) = G_INTTOPTR [[ADD]](s8)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[COPY1]](s8)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s8) = G_PTRTOINT [[INTTOPTR]](p1)
    ; CHECK-NEXT: G_STORE_ZP_IDX [[COPY1]](s8), target-flags(zeropage) 0, [[PTRTOINT1]](s8) :: (store (s8))
    ; CHECK-NEXT: RTS
    %0:_(p1) = COPY $rc0
    %1:_(s8) = COPY $a
    %2:_(p1) = G_PTR_ADD %0, %1
    G_STORE %1, %2 :: (store (s8))
    RTS
...
---
name: store_zp_ptr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: store_zp_ptr
    ; CHECK: [[COPY:%[0-9]+]]:_(p1) = COPY $rc0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p1) = COPY $rc1
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY1]](p1)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s8) = G_PTRTOINT [[COPY]](p1)
    ; CHECK-NEXT: G_STORE_ZP_IDX [[PTRTOINT]](s8), target-flags(zeropage) 0, [[PTRTOINT1]](s8) :: (store (s8))
    ; CHECK-NEXT: RTS
    %0:_(p1) = COPY $rc0
    %1:_(p1) = COPY $rc1
    G_STORE %1, %0 :: (store 1)
    RTS
...
---
name: sextload
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: sextload
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[LOAD_INDIR_IDX:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C]] :: (load (s8))
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[LOAD_INDIR_IDX]], [[C]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC2]](s1)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s8) = G_SELECT [[COPY1]](s1), [[C2]], [[C]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[LOAD_INDIR_IDX]](s8), [[SELECT]](s8)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %0:_(p0) = COPY $rs1
    %1:_(s16) = G_SEXTLOAD %0 :: (load (s8))
    RTS implicit %1
...
---
name: zextload
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: zextload
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[LOAD_INDIR_IDX:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C]] :: (load (s8))
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[LOAD_INDIR_IDX]](s8), [[C]](s8)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %0:_(p0) = COPY $rs1
    %1:_(s16) = G_ZEXTLOAD %0 :: (load (s8))
    RTS implicit %1
...
---
name: brcond
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: brcond
    ; CHECK: successors: %bb.0(0x80000000)
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s1) = COPY $c
    ; CHECK-NEXT: G_BRCOND_IMM [[COPY]](s1), %bb.0, 1
    %0:_(s1) = COPY $c
    G_BRCOND %0, %bb.0
...
---
name: brcond_not
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: brcond_not
    ; CHECK: successors: %bb.0(0x80000000)
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s1) = COPY $c
    ; CHECK-NEXT: G_BRCOND_IMM [[COPY]](s1), %bb.0, 0
    %0:_(s1) = COPY $c
    %1:_(s1) = G_CONSTANT i1 true
    %2:_(s1) = G_XOR %0, %1
    G_BRCOND %2, %bb.0
...
---
name: brcond_icmp_ne
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: brcond_icmp_ne
    ; CHECK: successors: %bb.0(0x80000000)
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[COPY]], [[COPY1]], [[C]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC4]](s1)
    ; CHECK-NEXT: G_BRCOND_IMM [[COPY2]](s1), %bb.0, 0
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(ne), %0, %1
    G_BRCOND %2, %bb.0
...
---
name: brcond_cmpz_s16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: brcond_cmpz_s16
    ; CHECK: successors: %bb.0(0x80000000)
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[CMPZ:%[0-9]+]]:_(s1) = G_CMPZ [[UV]](s8), [[UV1]](s8)
    ; CHECK-NEXT: G_BRCOND_IMM [[CMPZ]](s1), %bb.0, 1
    ; CHECK-NEXT: RTS
    %0:_(s16) = COPY $rs1
    %1:_(s16) = G_CONSTANT i16 0
    %2:_(s1) = G_ICMP intpred(eq), %0, %1
    G_BRCOND %2, %bb.0
    RTS
...
---
name: brjt
jumpTable:
  kind: block-address
  entries:
    - id: 0
      blocks: ['%bb.0']
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: brjt
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[LOAD_ABS_IDX:%[0-9]+]]:_(s8) = G_LOAD_ABS_IDX %jump-table.0, [[COPY]](s8)
    ; CHECK-NEXT: [[LOAD_ABS_IDX1:%[0-9]+]]:_(s8) = G_LOAD_ABS_IDX target-flags(hi-jt) %jump-table.0, [[COPY]](s8)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(p0) = G_MERGE_VALUES [[LOAD_ABS_IDX]](s8), [[LOAD_ABS_IDX1]](s8)
    ; CHECK-NEXT: G_BRINDIRECT [[MV]](p0)
    %0:_(p0) = G_JUMP_TABLE %jump-table.0
    %1:_(s8) = COPY $a
    %2:_(s16) = G_ZEXT %1
    G_BRJT %0, %jump-table.0, %2
...
---
name: vaarg
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: vaarg
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[LOAD_INDIR_IDX:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C]] :: (invariant load (s8))
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[LOAD_INDIR_IDX1:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C1]] :: (invariant load (s8) from unknown-address + 1)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[LOAD_INDIR_IDX]](s8), [[LOAD_INDIR_IDX1]](s8)
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: [[LOAD_INDIR_IDX2:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[INTTOPTR]](p0), [[C]] :: (invariant load (s8))
    ; CHECK-NEXT: [[LOAD_INDIR_IDX3:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[INTTOPTR]](p0), [[C1]] :: (invariant load (s8) from unknown-address + 1)
    ; CHECK-NEXT: [[MV1:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[LOAD_INDIR_IDX2]](s8), [[LOAD_INDIR_IDX3]](s8)
    ; CHECK-NEXT: [[INTTOPTR1:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV1]](s16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 2
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[INTTOPTR]](p0)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[UADDE:%[0-9]+]]:_(s8), [[UADDE1:%[0-9]+]]:_(s1) = G_UADDE [[UV]], [[C2]], [[C3]]
    ; CHECK-NEXT: [[UADDE2:%[0-9]+]]:_(s8), [[UADDE3:%[0-9]+]]:_(s1) = G_UADDE [[UV1]], [[C]], [[UADDE1]]
    ; CHECK-NEXT: [[MV2:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[UADDE]](s8), [[UADDE2]](s8)
    ; CHECK-NEXT: [[INTTOPTR2:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV2]](s16)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s16) = G_PTRTOINT [[INTTOPTR2]](p0)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT1]](s16)
    ; CHECK-NEXT: G_STORE_INDIR_IDX [[UV2]](s8), [[COPY]](p0), [[C]] :: (store (s8))
    ; CHECK-NEXT: G_STORE_INDIR_IDX [[UV3]](s8), [[COPY]](p0), [[C1]] :: (store (s8) into unknown-address + 1)
    ; CHECK-NEXT: RTS implicit [[INTTOPTR1]](p0)
    %0:_(p0) = COPY $rs1
    %1:_(p0) = G_VAARG %0, 1
    RTS implicit %1
...
---
name: alloca
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: alloca
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 2
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[UV]], [[C]], [[C3]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[SBC]](s8)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[UV1]], [[C1]], [[COPY2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s8) = COPY [[SBC5]](s8)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[COPY1]](s8), [[COPY3]](s8)
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: $rs0 = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(p0) = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: RTS implicit [[COPY4]](p0)
    %0:_(s16) = G_CONSTANT i16 2
    %1:_(p0) = G_DYN_STACKALLOC %0:_(s16), 1
    RTS implicit %1
...
---
name: va_copy
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: va_copy
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $rs1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[LOAD_INDIR_IDX:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C]] :: (load (s8))
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[LOAD_INDIR_IDX1:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C1]] :: (load (s8) from unknown-address + 1)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[LOAD_INDIR_IDX]](s8), [[LOAD_INDIR_IDX1]](s8)
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[INTTOPTR]](p0)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK-NEXT: G_STORE_INDIR_IDX [[UV]](s8), [[COPY1]](p0), [[C]] :: (store (s8))
    ; CHECK-NEXT: G_STORE_INDIR_IDX [[UV1]](s8), [[COPY1]](p0), [[C1]] :: (store (s8) into unknown-address + 1)
    ; CHECK-NEXT: RTS implicit [[COPY1]](p0)
    %0:_(p0) = COPY $rs0
    %1:_(p0) = COPY $rs1
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.va_copy), %1, %0
    RTS implicit %1
...
---
name: trap
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: trap
    ; CHECK: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: JSR &abort, mos_csr
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    G_TRAP
...
---
name: dyn_stackalloc
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: dyn_stackalloc
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[UV]], [[UV2]], [[C1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[SBC]](s8)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[UV1]], [[UV3]], [[COPY3]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(s8) = COPY [[SBC5]](s8)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 -8
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY2]], [[C2]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s8) = G_AND [[COPY4]], [[C3]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[AND]](s8), [[AND1]](s8)
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: $rs0 = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(p0) = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: RTS implicit [[COPY5]](p0)
    %0:_(s16) = COPY $rs1
    %1:_(p0) = G_DYN_STACKALLOC %0, 8
    RTS implicit %1
...
---
name: cse_shle
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: cse_shle
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SHLE:%[0-9]+]]:_(s8), [[SHLE1:%[0-9]+]]:_(s1) = G_SHLE [[COPY]], [[C]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[SHLE]](s8)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[SHLE]](s8)
    ; CHECK-NEXT: RTS implicit [[COPY1]](s8), implicit [[COPY2]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_SHL %0, %1
    %3:_(s8) = G_SHL %0, %1
    RTS implicit %2, implicit %3
...
---
name: cse_lshr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: cse_lshr
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[C]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[LSHRE]](s8)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY [[LSHRE]](s8)
    ; CHECK-NEXT: RTS implicit [[COPY1]](s8), implicit [[COPY2]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    %3:_(s8) = G_LSHR %0, %1
    RTS implicit %2, implicit %3
...
---
name: freeze_s1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: freeze_s1
    ; CHECK: [[COPY:%[0-9]+]]:_(s1) = COPY $c
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[COPY]](s1)
    ; CHECK-NEXT: RTS implicit [[COPY1]](s1)
    %0:_(s1) = COPY $c
    %1:_(s1) = G_FREEZE %0
    RTS implicit %1
...
---
name: freeze_s8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: freeze_s8
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY [[COPY]](s8)
    ; CHECK-NEXT: RTS implicit [[COPY1]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_FREEZE %0
    RTS implicit %1
...
---
name: freeze_s32
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: freeze_s32
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 2
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: RTS implicit [[C]](s8), implicit [[C1]](s8), implicit [[C1]](s8), implicit [[C1]](s8)
    %0:_(s32) = G_CONSTANT i32 2
    %1:_(s32) = G_FREEZE %0
    %2:_(s8), %3:_(s8), %4:_(s8), %5:_(s8) = G_UNMERGE_VALUES %1
    RTS implicit %2, implicit %3, implicit %4, implicit %5
...
---
name: freeze_p0
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: freeze_p0
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY [[COPY]](p0)
    ; CHECK-NEXT: RTS implicit [[COPY1]](p0)
    %0:_(p0) = COPY $rs1
    %1:_(p0) = G_FREEZE %0
    RTS implicit %1
...
---
name: freeze_p1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: freeze_p1
    ; CHECK: [[COPY:%[0-9]+]]:_(p1) = COPY $rc1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p1) = COPY [[COPY]](p1)
    ; CHECK-NEXT: RTS implicit [[COPY1]](p1)
    %0:_(p1) = COPY $rc1
    %1:_(p1) = G_FREEZE %0
    RTS implicit %1
...
---
name: memcpy
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: memcpy
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C]](s8)
    ; CHECK-NEXT: [[LOAD_ABS:%[0-9]+]]:_(s8) = G_LOAD_ABS 8704 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)`, align 512)
    ; CHECK-NEXT: G_STORE_ABS [[LOAD_ABS]](s8), 8960 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256)
    ; CHECK-NEXT: [[LOAD_ABS1:%[0-9]+]]:_(s8) = G_LOAD_ABS 8705 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)` + 1, basealign 512)
    ; CHECK-NEXT: G_STORE_ABS [[LOAD_ABS1]](s8), 8961 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 1, basealign 256)
    ; CHECK-NEXT: [[LOAD_ABS2:%[0-9]+]]:_(s8) = G_LOAD_ABS 8706 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)` + 2, align 2, basealign 512)
    ; CHECK-NEXT: G_STORE_ABS [[LOAD_ABS2]](s8), 8962 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 2, align 2, basealign 256)
    ; CHECK-NEXT: [[LOAD_ABS3:%[0-9]+]]:_(s8) = G_LOAD_ABS 8707 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)` + 3, basealign 512)
    ; CHECK-NEXT: G_STORE_ABS [[LOAD_ABS3]](s8), 8963 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 3, basealign 256)
    ; CHECK-NEXT: [[LOAD_ABS4:%[0-9]+]]:_(s8) = G_LOAD_ABS 8708 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)` + 4, align 4, basealign 512)
    ; CHECK-NEXT: G_STORE_ABS [[LOAD_ABS4]](s8), 8964 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 4, align 4, basealign 256)
    ; CHECK-NEXT: [[LOAD_ABS5:%[0-9]+]]:_(s8) = G_LOAD_ABS 8709 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)` + 5, basealign 512)
    ; CHECK-NEXT: G_STORE_ABS [[LOAD_ABS5]](s8), 8965 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 5, basealign 256)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %1:_(s16) = G_CONSTANT i16 8960
    %0:_(p0) = G_INTTOPTR %1:_(s16)
    %3:_(s16) = G_CONSTANT i16 8704
    %2:_(p0) = G_INTTOPTR %3:_(s16)
    %4:_(s16) = G_CONSTANT i16 6
    %5:_(s16) = G_CONSTANT i16 0
    G_MEMCPY %0:_(p0), %2:_(p0), %4:_(s16), 1 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256), (load (s8) from `ptr inttoptr (i16 8704 to ptr)`, align 512); example.c:11:3
    RTS implicit %5
...
---
name: memcpy_large
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: memcpy_large
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 35
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C1]](s8)
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 34
    ; CHECK-NEXT: [[MV1:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C2]](s8)
    ; CHECK-NEXT: [[INTTOPTR1:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV1]](s16)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[MV2:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C]](s8)
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $rs1 = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: $rs2 = COPY [[INTTOPTR1]](p0)
    ; CHECK-NEXT: $a = COPY [[C3]](s8)
    ; CHECK-NEXT: $x = COPY [[C4]](s8)
    ; CHECK-NEXT: JSR &memcpy, mos_csr, implicit $rs1, implicit $rs2, implicit $a, implicit $x
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: RTS implicit [[MV2]](s16)
    %1:_(s16) = G_CONSTANT i16 8960
    %0:_(p0) = G_INTTOPTR %1:_(s16)
    %3:_(s16) = G_CONSTANT i16 8704
    %2:_(p0) = G_INTTOPTR %3:_(s16)
    %4:_(s16) = G_CONSTANT i16 384
    %5:_(s16) = G_CONSTANT i16 0
    G_MEMCPY %0:_(p0), %2:_(p0), %4:_(s16), 1 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256), (load (s8) from `ptr inttoptr (i16 8704 to ptr)`, align 512); example.c:11:3
    RTS implicit %5
...
---
name: memmove
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: memmove
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C]](s8)
    ; CHECK-NEXT: [[LOAD_ABS:%[0-9]+]]:_(s8) = G_LOAD_ABS 8704 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)`, align 512)
    ; CHECK-NEXT: [[LOAD_ABS1:%[0-9]+]]:_(s8) = G_LOAD_ABS 8705 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)` + 1, basealign 512)
    ; CHECK-NEXT: [[LOAD_ABS2:%[0-9]+]]:_(s8) = G_LOAD_ABS 8706 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)` + 2, align 2, basealign 512)
    ; CHECK-NEXT: [[LOAD_ABS3:%[0-9]+]]:_(s8) = G_LOAD_ABS 8707 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)` + 3, basealign 512)
    ; CHECK-NEXT: [[LOAD_ABS4:%[0-9]+]]:_(s8) = G_LOAD_ABS 8708 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)` + 4, align 4, basealign 512)
    ; CHECK-NEXT: [[LOAD_ABS5:%[0-9]+]]:_(s8) = G_LOAD_ABS 8709 :: (load (s8) from `ptr inttoptr (i16 8704 to ptr)` + 5, basealign 512)
    ; CHECK-NEXT: G_STORE_ABS [[LOAD_ABS]](s8), 8960 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256)
    ; CHECK-NEXT: G_STORE_ABS [[LOAD_ABS1]](s8), 8961 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 1, basealign 256)
    ; CHECK-NEXT: G_STORE_ABS [[LOAD_ABS2]](s8), 8962 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 2, align 2, basealign 256)
    ; CHECK-NEXT: G_STORE_ABS [[LOAD_ABS3]](s8), 8963 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 3, basealign 256)
    ; CHECK-NEXT: G_STORE_ABS [[LOAD_ABS4]](s8), 8964 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 4, align 4, basealign 256)
    ; CHECK-NEXT: G_STORE_ABS [[LOAD_ABS5]](s8), 8965 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 5, basealign 256)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %1:_(s16) = G_CONSTANT i16 8960
    %0:_(p0) = G_INTTOPTR %1:_(s16)
    %3:_(s16) = G_CONSTANT i16 8704
    %2:_(p0) = G_INTTOPTR %3:_(s16)
    %4:_(s16) = G_CONSTANT i16 6
    %5:_(s16) = G_CONSTANT i16 0
    G_MEMMOVE %0:_(p0), %2:_(p0), %4:_(s16), 1 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256), (load (s8) from `ptr inttoptr (i16 8704 to ptr)`, align 512); example.c:11:3
    RTS implicit %5
...
---
name: memmove_large
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: memmove_large
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 35
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C1]](s8)
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 34
    ; CHECK-NEXT: [[MV1:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C2]](s8)
    ; CHECK-NEXT: [[INTTOPTR1:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV1]](s16)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[MV2:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C]](s8)
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $rs1 = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: $rs2 = COPY [[INTTOPTR1]](p0)
    ; CHECK-NEXT: $a = COPY [[C3]](s8)
    ; CHECK-NEXT: $x = COPY [[C4]](s8)
    ; CHECK-NEXT: JSR &memmove, mos_csr, implicit $rs1, implicit $rs2, implicit $a, implicit $x
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: RTS implicit [[MV2]](s16)
    %1:_(s16) = G_CONSTANT i16 8960
    %0:_(p0) = G_INTTOPTR %1:_(s16)
    %3:_(s16) = G_CONSTANT i16 8704
    %2:_(p0) = G_INTTOPTR %3:_(s16)
    %4:_(s16) = G_CONSTANT i16 384
    %5:_(s16) = G_CONSTANT i16 0
    G_MEMMOVE %0:_(p0), %2:_(p0), %4:_(s16), 1 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256), (load (s8) from `ptr inttoptr (i16 8704 to ptr)`, align 512); example.c:11:3
    RTS implicit %5
...
---
name: memset
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: memset
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C]](s8)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: G_STORE_ABS [[C1]](s8), 8960 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256)
    ; CHECK-NEXT: G_STORE_ABS [[C1]](s8), 8961 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 1, basealign 256)
    ; CHECK-NEXT: G_STORE_ABS [[C1]](s8), 8962 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 2, align 2, basealign 256)
    ; CHECK-NEXT: G_STORE_ABS [[C1]](s8), 8963 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 3, basealign 256)
    ; CHECK-NEXT: G_STORE_ABS [[C1]](s8), 8964 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 4, align 4, basealign 256)
    ; CHECK-NEXT: G_STORE_ABS [[C1]](s8), 8965 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)` + 5, basealign 256)
    ; CHECK-NEXT: RTS implicit [[MV]](s16)
    %1:_(s16) = G_CONSTANT i16 8960
    %0:_(p0) = G_INTTOPTR %1:_(s16)
    %2:_(s8) = G_CONSTANT i8 0
    %3:_(s16) = G_CONSTANT i16 6
    %4:_(s16) = G_CONSTANT i16 0
    G_MEMSET %0:_(p0), %2:_(s8), %3:_(s16), 1 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256); example.c:11:3
    RTS implicit %4
...
---
name: memset_large
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: memset_large
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 35
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C1]](s8)
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[MV1:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C]](s8)
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $rs1 = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: $a = COPY [[C]](s8)
    ; CHECK-NEXT: $x = COPY [[C2]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[C3]](s8)
    ; CHECK-NEXT: JSR &__memset, mos_csr, implicit $rs1, implicit $a, implicit $x, implicit $rc4
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: RTS implicit [[MV1]](s16)
    %1:_(s16) = G_CONSTANT i16 8960
    %0:_(p0) = G_INTTOPTR %1:_(s16)
    %2:_(s8) = G_CONSTANT i8 0
    %3:_(s16) = G_CONSTANT i16 384
    %4:_(s16) = G_CONSTANT i16 0
    G_MEMSET %0:_(p0), %2:_(s8), %3:_(s16), 1 :: (store (s8) into `ptr inttoptr (i16 8960 to ptr)`, align 256); example.c:11:3
    RTS implicit %4
...
---
name: addrspace_cast_data_zp
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: addrspace_cast_data_zp
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs2
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[COPY]](s16)
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[INTTOPTR]](p0)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[PTRTOINT]](s16)
    ; CHECK-NEXT: [[INTTOPTR1:%[0-9]+]]:_(p1) = G_INTTOPTR [[TRUNC]](s8)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s8) = G_PTRTOINT [[INTTOPTR1]](p1)
    ; CHECK-NEXT: RTS implicit [[PTRTOINT1]](s8)
    %0:_(s16) = COPY $rs2
    %1:_(p0) = G_INTTOPTR %0:_(s16)
    %2:_(p1) = G_ADDRSPACE_CAST %1:_(p0)
    %3:_(s8) = G_PTRTOINT %2:_(p1)
    RTS implicit %3
...
---
name: addrspace_cast_zp_data
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: addrspace_cast_zp_data
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $rc2
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p1) = G_INTTOPTR [[COPY]](s8)
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s8) = G_PTRTOINT [[INTTOPTR]](p1)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[PTRTOINT]](s8), [[C]](s8)
    ; CHECK-NEXT: [[INTTOPTR1:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s16) = G_PTRTOINT [[INTTOPTR1]](p0)
    ; CHECK-NEXT: RTS implicit [[PTRTOINT1]](s16)
    %0:_(s8) = COPY $rc2
    %1:_(p1) = G_INTTOPTR %0:_(s8)
    %2:_(p0) = G_ADDRSPACE_CAST %1:_(p1)
    %3:_(s16) = G_PTRTOINT %2:_(p0)
    RTS implicit %3
...
---
name: fabs
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: fabs
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $rc2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 127
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: RTS implicit [[AND]](s8)
    %0:_(s8) = COPY $rc2
    %1:_(s8) = G_FABS %0
    RTS implicit %1
...
---
name: fptoui_sat
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: fptoui_sat
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[LOAD_INDIR_IDX:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C]] :: (load (s8), align 4)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[LOAD_INDIR_IDX1:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C1]] :: (load (s8) from unknown-address + 1)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 2
    ; CHECK-NEXT: [[LOAD_INDIR_IDX2:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C2]] :: (load (s8) from unknown-address + 2, align 2)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 3
    ; CHECK-NEXT: [[LOAD_INDIR_IDX3:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C3]] :: (load (s8) from unknown-address + 3)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s8) = G_CONSTANT i8 79
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[LOAD_INDIR_IDX]](s8)
    ; CHECK-NEXT: $x = COPY [[LOAD_INDIR_IDX1]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[LOAD_INDIR_IDX2]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[LOAD_INDIR_IDX3]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[C]](s8)
    ; CHECK-NEXT: JSR &fmaxf, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s8) = COPY $rc2
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(s8) = COPY $rc3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY1]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY2]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY3]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY4]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[C4]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[C5]](s8)
    ; CHECK-NEXT: JSR &fminf, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: RTS implicit [[COPY5]](s8)
    %0:_(p0) = COPY $rs0
    %1:_(s32) = G_LOAD %0 :: (load 4)
    %2:_(s32) = G_INTRINSIC intrinsic(@llvm.fptoui.sat), %1
    %3:_(s8) = G_TRUNC %2
    RTS implicit %3
...
---
name: fptosi_sat
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: fptosi_sat
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[LOAD_INDIR_IDX:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C]] :: (load (s8), align 4)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[LOAD_INDIR_IDX1:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C1]] :: (load (s8) from unknown-address + 1)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 2
    ; CHECK-NEXT: [[LOAD_INDIR_IDX2:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C2]] :: (load (s8) from unknown-address + 2, align 2)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 3
    ; CHECK-NEXT: [[LOAD_INDIR_IDX3:%[0-9]+]]:_(s8) = G_LOAD_INDIR_IDX [[COPY]](p0), [[C3]] :: (load (s8) from unknown-address + 3)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s8) = G_CONSTANT i8 127
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[LOAD_INDIR_IDX]], [[C4]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s8) = G_AND [[LOAD_INDIR_IDX1]], [[C4]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s8) = G_AND [[LOAD_INDIR_IDX2]], [[C4]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s8) = G_AND [[LOAD_INDIR_IDX3]], [[C5]]
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[AND3]], [[C5]], [[C7]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s1) = COPY [[SBC4]](s1)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s1) = COPY [[SBC1]](s1)
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[AND2]], [[C6]], [[C7]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s1) = COPY [[SBC9]](s1)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(s1) = COPY [[SBC6]](s1)
    ; CHECK-NEXT: [[SBC10:%[0-9]+]]:_(s8), [[SBC11:%[0-9]+]]:_(s1), [[SBC12:%[0-9]+]]:_, [[SBC13:%[0-9]+]]:_, [[SBC14:%[0-9]+]]:_ = G_SBC [[AND1]], [[C]], [[C7]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(s1) = COPY [[SBC14]](s1)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(s1) = COPY [[SBC11]](s1)
    ; CHECK-NEXT: [[SBC15:%[0-9]+]]:_(s8), [[SBC16:%[0-9]+]]:_(s1), [[SBC17:%[0-9]+]]:_, [[SBC18:%[0-9]+]]:_, [[SBC19:%[0-9]+]]:_ = G_SBC [[AND]], [[C1]], [[C7]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(s1) = COPY [[SBC16]](s1)
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[COPY5]](s1), [[COPY7]], [[COPY6]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s1) = G_SELECT [[COPY3]](s1), [[SELECT]], [[COPY4]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s1) = G_SELECT [[COPY1]](s1), [[SELECT1]], [[COPY2]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(s8) = COPY [[C]](s8)
    ; CHECK-NEXT: [[SELECT3:%[0-9]+]]:_(s8) = G_SELECT [[SELECT2]](s1), [[C1]], [[C]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s8) = G_OR [[COPY8]], [[SELECT3]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[OR]](s8)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:_(s1) = COPY [[TRUNC]](s1)
    ; CHECK-NEXT: [[C8:%[0-9]+]]:_(s8) = G_CONSTANT i8 79
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[LOAD_INDIR_IDX]](s8)
    ; CHECK-NEXT: $x = COPY [[LOAD_INDIR_IDX1]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[LOAD_INDIR_IDX2]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[LOAD_INDIR_IDX3]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[C8]](s8)
    ; CHECK-NEXT: JSR &fmaxf, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:_(s8) = COPY $rc2
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:_(s8) = COPY $rc3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY10]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY11]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY12]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY13]](s8)
    ; CHECK-NEXT: $rc4 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc5 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc6 = COPY [[C]](s8)
    ; CHECK-NEXT: $rc7 = COPY [[C8]](s8)
    ; CHECK-NEXT: JSR &fminf, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:_(s8) = COPY $rc2
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:_(s8) = COPY $rc3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: $a = COPY [[COPY14]](s8)
    ; CHECK-NEXT: $x = COPY [[COPY15]](s8)
    ; CHECK-NEXT: $rc2 = COPY [[COPY16]](s8)
    ; CHECK-NEXT: $rc3 = COPY [[COPY17]](s8)
    ; CHECK-NEXT: JSR &__fixunssfsi, mos_csr, implicit $a, implicit $x, implicit $rc2, implicit $rc3, implicit-def $a, implicit-def $x, implicit-def $rc2, implicit-def $rc3
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK-NEXT: [[SELECT4:%[0-9]+]]:_(s8) = G_SELECT [[COPY9]](s1), [[C]], [[COPY18]]
    ; CHECK-NEXT: RTS implicit [[SELECT4]](s8)
    %0:_(p0) = COPY $rs0
    %1:_(s32) = G_LOAD %0 :: (load 4)
    %2:_(s32) = G_INTRINSIC intrinsic(@llvm.fptosi.sat), %1
    %3:_(s8) = G_TRUNC %2
    RTS implicit %3
...
