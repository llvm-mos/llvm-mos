# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=mos -run-pass=instruction-select -verify-machineinstrs -o - %s | FileCheck %s -check-prefixes=6502
# RUN: llc -mtriple=mos -mcpu=mos65c02 -run-pass=instruction-select -verify-machineinstrs -o - %s | FileCheck %s -check-prefixes=65C02
--- |
  @.str = constant [1 x i8] c"X"
  define void @addrstk_fixed() norecurse {
    entry:
      ret void
  }
  define void @addrstk_local() {
    entry:
      ret void
  }
  define void @ldimm_local() norecurse {
    entry:
      ret void
  }
  define void @ldimm_global() {
    entry:
      ret void
  }
  define void @ldimm_global_offset() {
    entry:
      ret void
  }
  define void @load_absolute_const() {
    entry:
      ret void
  }
  define void @load_absolute_gv() {
    entry:
      ret void
  }
  define void @load_indexed() {
    entry:
      ret void
  }
  define void @load_volatile_not_indexed() {
    entry:
      ret void
  }
  define void @store_absolute_const() {
    entry:
      ret void
  }
  define void @store_absolute_gv() {
    entry:
      ret void
  }
  define void @store_indexed() {
    entry:
      ret void
  }
  define void @store_volatile_not_indexed() {
    entry:
      ret void
  }
  define void @store_zero_absolute_const() {
    entry:
      ret void
  }
  define void @store_zero_absolute_gv() {
    entry:
      ret void
  }
  define void @store_zero_indexed() {
    entry:
      ret void
  }
  define void @store_zero_volatile_not_indexed() {
    entry:
      ret void
  }
---
name: addrstk_fixed
legalized: true
regBankSelected: true
fixedStack:
  - { id: 0, size: 1 }
body: |
  bb.0.entry:
    ; 6502-LABEL: name: addrstk_fixed
    ; 6502: [[AddrLostk:%[0-9]+]]:anyi8, [[AddrLostk1:%[0-9]+]]:cc, [[AddrLostk2:%[0-9]+]]:vc = AddrLostk %fixed-stack.0, 0
    ; 6502: [[AddrHistk:%[0-9]+]]:anyi8, [[AddrHistk1:%[0-9]+]]:cc, [[AddrHistk2:%[0-9]+]]:vc = AddrHistk %fixed-stack.0, 0, [[AddrLostk1]]
    ; 6502: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[AddrLostk]], %subreg.sublo, [[AddrHistk]], %subreg.subhi
    ; 6502: RTS implicit [[REG_SEQUENCE]]
    ; 65C02-LABEL: name: addrstk_fixed
    ; 65C02: [[AddrLostk:%[0-9]+]]:anyi8, [[AddrLostk1:%[0-9]+]]:cc, [[AddrLostk2:%[0-9]+]]:vc = AddrLostk %fixed-stack.0, 0
    ; 65C02: [[AddrHistk:%[0-9]+]]:anyi8, [[AddrHistk1:%[0-9]+]]:cc, [[AddrHistk2:%[0-9]+]]:vc = AddrHistk %fixed-stack.0, 0, [[AddrLostk1]]
    ; 65C02: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[AddrLostk]], %subreg.sublo, [[AddrHistk]], %subreg.subhi
    ; 65C02: RTS implicit [[REG_SEQUENCE]]
    %0:any(p0) = G_FRAME_INDEX %fixed-stack.0
    RTS implicit %0
# Note: The HI and LO target operands are present on the frame index, but LLVM doesn't print them.
...
---
name: addrstk_local
legalized: true
regBankSelected: true
stack:
  - { id: 0, size: 1 }
body: |
  bb.0.entry:
    ; 6502-LABEL: name: addrstk_local
    ; 6502: [[AddrLostk:%[0-9]+]]:anyi8, [[AddrLostk1:%[0-9]+]]:cc, [[AddrLostk2:%[0-9]+]]:vc = AddrLostk %stack.0, 0
    ; 6502: [[AddrHistk:%[0-9]+]]:anyi8, [[AddrHistk1:%[0-9]+]]:cc, [[AddrHistk2:%[0-9]+]]:vc = AddrHistk %stack.0, 0, [[AddrLostk1]]
    ; 6502: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[AddrLostk]], %subreg.sublo, [[AddrHistk]], %subreg.subhi
    ; 6502: RTS implicit [[REG_SEQUENCE]]
    ; 65C02-LABEL: name: addrstk_local
    ; 65C02: [[AddrLostk:%[0-9]+]]:anyi8, [[AddrLostk1:%[0-9]+]]:cc, [[AddrLostk2:%[0-9]+]]:vc = AddrLostk %stack.0, 0
    ; 65C02: [[AddrHistk:%[0-9]+]]:anyi8, [[AddrHistk1:%[0-9]+]]:cc, [[AddrHistk2:%[0-9]+]]:vc = AddrHistk %stack.0, 0, [[AddrLostk1]]
    ; 65C02: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[AddrLostk]], %subreg.sublo, [[AddrHistk]], %subreg.subhi
    ; 65C02: RTS implicit [[REG_SEQUENCE]]
    %0:any(p0) = G_FRAME_INDEX %stack.0
    RTS implicit %0
# Note: The HI and LO target operands are present on the frame index, but LLVM doesn't print them.
...
---
name: ldimm_local
legalized: true
regBankSelected: true
stack:
  - { id: 0, size: 1 }
body: |
  bb.0.entry:
    ; 6502-LABEL: name: ldimm_local
    ; 6502: [[LDImm:%[0-9]+]]:gpr = LDImm %stack.0
    ; 6502: [[LDImm1:%[0-9]+]]:gpr = LDImm %stack.0
    ; 6502: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; 6502: RTS implicit [[REG_SEQUENCE]]
    ; 65C02-LABEL: name: ldimm_local
    ; 65C02: [[LDImm:%[0-9]+]]:gpr = LDImm %stack.0
    ; 65C02: [[LDImm1:%[0-9]+]]:gpr = LDImm %stack.0
    ; 65C02: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; 65C02: RTS implicit [[REG_SEQUENCE]]
    %0:any(p0) = G_FRAME_INDEX %stack.0
    RTS implicit %0
# Note: The HI and LO target operands are present on the frame index, but LLVM doesn't print them.
...
---
name: ldimm_global
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: ldimm_global
    ; 6502: [[LDImm:%[0-9]+]]:gpr = LDImm target-flags(lo) @.str
    ; 6502: [[LDImm1:%[0-9]+]]:gpr = LDImm target-flags(hi) @.str
    ; 6502: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; 6502: RTS implicit [[REG_SEQUENCE]]
    ; 65C02-LABEL: name: ldimm_global
    ; 65C02: [[LDImm:%[0-9]+]]:gpr = LDImm target-flags(lo) @.str
    ; 65C02: [[LDImm1:%[0-9]+]]:gpr = LDImm target-flags(hi) @.str
    ; 65C02: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; 65C02: RTS implicit [[REG_SEQUENCE]]
    %0:any(p0) = G_GLOBAL_VALUE @.str
    RTS implicit %0
...
---
name: ldimm_global_offset
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: ldimm_global_offset
    ; 6502: [[LDImm:%[0-9]+]]:gpr = LDImm target-flags(lo) @.str + 1234
    ; 6502: [[LDImm1:%[0-9]+]]:gpr = LDImm target-flags(hi) @.str + 1234
    ; 6502: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; 6502: RTS implicit [[REG_SEQUENCE]]
    ; 65C02-LABEL: name: ldimm_global_offset
    ; 65C02: [[LDImm:%[0-9]+]]:gpr = LDImm target-flags(lo) @.str + 1234
    ; 65C02: [[LDImm1:%[0-9]+]]:gpr = LDImm target-flags(hi) @.str + 1234
    ; 65C02: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; 65C02: RTS implicit [[REG_SEQUENCE]]
    %0:any(p0) = G_GLOBAL_VALUE @.str + 1234
    RTS implicit %0
...
---
name: load_absolute_const
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: load_absolute_const
    ; 6502: [[LDAbs:%[0-9]+]]:gpr = LDAbs 1234 :: (load 1)
    ; 6502: RTS implicit [[LDAbs]]
    ; 65C02-LABEL: name: load_absolute_const
    ; 65C02: [[LDAbs:%[0-9]+]]:gpr = LDAbs 1234 :: (load 1)
    ; 65C02: RTS implicit [[LDAbs]]
    %0:any(s16) = G_CONSTANT i16 1234
    %1:any(p0) = G_INTTOPTR %0
    %2:any(s8) = G_LOAD %1 :: (load 1)
    RTS implicit %2
...
---
name: load_absolute_gv
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: load_absolute_gv
    ; 6502: [[LDAbs:%[0-9]+]]:gpr = LDAbs @.str :: (load 1)
    ; 6502: RTS implicit [[LDAbs]]
    ; 65C02-LABEL: name: load_absolute_gv
    ; 65C02: [[LDAbs:%[0-9]+]]:gpr = LDAbs @.str :: (load 1)
    ; 65C02: RTS implicit [[LDAbs]]
    %0:any(p0) = G_GLOBAL_VALUE @.str
    %1:any(s8) = G_LOAD %0 :: (load 1)
    RTS implicit %1
...
---
name: load_indexed
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: load_indexed
    ; 6502: [[COPY:%[0-9]+]]:xy = COPY $a
    ; 6502: [[LDIdx:%[0-9]+]]:gpr = LDIdx @.str, [[COPY]] :: (load 1)
    ; 6502: RTS implicit [[LDIdx]]
    ; 65C02-LABEL: name: load_indexed
    ; 65C02: [[COPY:%[0-9]+]]:xy = COPY $a
    ; 65C02: [[LDIdx:%[0-9]+]]:gpr = LDIdx @.str, [[COPY]] :: (load 1)
    ; 65C02: RTS implicit [[LDIdx]]
    %0:any(p0) = G_GLOBAL_VALUE @.str
    %1:any(s8) = COPY $a
    %2:any(p0) = G_INDEX %0, %1
    %3:any(s8) = G_LOAD %2 :: (load 1)
    RTS implicit %3
...
---
name: load_volatile_not_indexed
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: load_volatile_not_indexed
    ; 6502: [[LDImm:%[0-9]+]]:gpr = LDImm target-flags(lo) @.str
    ; 6502: [[LDImm1:%[0-9]+]]:gpr = LDImm target-flags(hi) @.str
    ; 6502: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; 6502: [[COPY:%[0-9]+]]:imag8 = COPY $a
    ; 6502: [[COPY1:%[0-9]+]]:ac = COPY [[LDImm]]
    ; 6502: [[COPY2:%[0-9]+]]:ac = COPY [[LDImm1]]
    ; 6502: [[LDImm1_:%[0-9]+]]:cc = LDImm1 0
    ; 6502: [[ADCImag8_:%[0-9]+]]:ac, [[ADCImag8_1:%[0-9]+]]:cc, [[ADCImag8_2:%[0-9]+]]:vc = ADCImag8 [[COPY1]], [[COPY]], [[LDImm1_]]
    ; 6502: [[ADCImm:%[0-9]+]]:ac, [[ADCImm1:%[0-9]+]]:cc, [[ADCImm2:%[0-9]+]]:vc = ADCImm [[COPY2]], 0, [[ADCImag8_1]]
    ; 6502: [[REG_SEQUENCE1:%[0-9]+]]:imag16 = REG_SEQUENCE [[ADCImag8_]], %subreg.sublo, [[ADCImm]], %subreg.subhi
    ; 6502: [[LDImm2:%[0-9]+]]:yc = LDImm 0
    ; 6502: [[LDYIndir:%[0-9]+]]:ac = LDYIndir [[REG_SEQUENCE1]], [[LDImm2]] :: (volatile load 1)
    ; 6502: RTS implicit [[LDYIndir]]
    ; 65C02-LABEL: name: load_volatile_not_indexed
    ; 65C02: [[LDImm:%[0-9]+]]:gpr = LDImm target-flags(lo) @.str
    ; 65C02: [[LDImm1:%[0-9]+]]:gpr = LDImm target-flags(hi) @.str
    ; 65C02: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; 65C02: [[COPY:%[0-9]+]]:imag8 = COPY $a
    ; 65C02: [[COPY1:%[0-9]+]]:ac = COPY [[LDImm]]
    ; 65C02: [[COPY2:%[0-9]+]]:ac = COPY [[LDImm1]]
    ; 65C02: [[LDImm1_:%[0-9]+]]:cc = LDImm1 0
    ; 65C02: [[ADCImag8_:%[0-9]+]]:ac, [[ADCImag8_1:%[0-9]+]]:cc, [[ADCImag8_2:%[0-9]+]]:vc = ADCImag8 [[COPY1]], [[COPY]], [[LDImm1_]]
    ; 65C02: [[ADCImm:%[0-9]+]]:ac, [[ADCImm1:%[0-9]+]]:cc, [[ADCImm2:%[0-9]+]]:vc = ADCImm [[COPY2]], 0, [[ADCImag8_1]]
    ; 65C02: [[REG_SEQUENCE1:%[0-9]+]]:imag16 = REG_SEQUENCE [[ADCImag8_]], %subreg.sublo, [[ADCImm]], %subreg.subhi
    ; 65C02: [[LDImm2:%[0-9]+]]:yc = LDImm 0
    ; 65C02: [[LDYIndir:%[0-9]+]]:ac = LDYIndir [[REG_SEQUENCE1]], [[LDImm2]] :: (volatile load 1)
    ; 65C02: RTS implicit [[LDYIndir]]
    %0:any(p0) = G_GLOBAL_VALUE @.str
    %1:any(s8) = COPY $a
    %2:any(p0) = G_INDEX %0, %1
    %3:any(s8) = G_LOAD %2 :: (volatile load 1)
    RTS implicit %3
...
---
name: store_absolute_const
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: store_absolute_const
    ; 6502: [[COPY:%[0-9]+]]:gpr = COPY $x
    ; 6502: STAbs [[COPY]], 1234 :: (store 1)
    ; 6502: RTS
    ; 65C02-LABEL: name: store_absolute_const
    ; 65C02: [[COPY:%[0-9]+]]:gpr = COPY $x
    ; 65C02: STAbs [[COPY]], 1234 :: (store 1)
    ; 65C02: RTS
    %0:any(s8) = COPY $x
    %1:any(s16) = G_CONSTANT i16 1234
    %2:any(p0) = G_INTTOPTR %1
    G_STORE %0, %2 :: (store 1)
    RTS
...
---
name: store_absolute_gv
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: store_absolute_gv
    ; 6502: [[COPY:%[0-9]+]]:gpr = COPY $x
    ; 6502: STAbs [[COPY]], @.str :: (store 1)
    ; 6502: RTS
    ; 65C02-LABEL: name: store_absolute_gv
    ; 65C02: [[COPY:%[0-9]+]]:gpr = COPY $x
    ; 65C02: STAbs [[COPY]], @.str :: (store 1)
    ; 65C02: RTS
    %0:any(s8) = COPY $x
    %1:any(p0) = G_GLOBAL_VALUE @.str
    G_STORE %0, %1 :: (store 1)
    RTS
...
---
name: store_indexed
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: store_indexed
    ; 6502: [[COPY:%[0-9]+]]:ac = COPY $x
    ; 6502: [[COPY1:%[0-9]+]]:xy = COPY $a
    ; 6502: STIdx [[COPY]], @.str, [[COPY1]] :: (store 1)
    ; 6502: RTS
    ; 65C02-LABEL: name: store_indexed
    ; 65C02: [[COPY:%[0-9]+]]:ac = COPY $x
    ; 65C02: [[COPY1:%[0-9]+]]:xy = COPY $a
    ; 65C02: STIdx [[COPY]], @.str, [[COPY1]] :: (store 1)
    ; 65C02: RTS
    %0:any(s8) = COPY $x
    %1:any(p0) = G_GLOBAL_VALUE @.str
    %2:any(s8) = COPY $a
    %3:any(p0) = G_INDEX %1, %2
    G_STORE %0, %3 :: (store 1)
    RTS
...
---
name: store_volatile_not_indexed
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: store_volatile_not_indexed
    ; 6502: [[COPY:%[0-9]+]]:ac = COPY $x
    ; 6502: [[LDImm:%[0-9]+]]:gpr = LDImm target-flags(lo) @.str
    ; 6502: [[LDImm1:%[0-9]+]]:gpr = LDImm target-flags(hi) @.str
    ; 6502: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; 6502: [[COPY1:%[0-9]+]]:imag8 = COPY $a
    ; 6502: [[COPY2:%[0-9]+]]:ac = COPY [[LDImm]]
    ; 6502: [[COPY3:%[0-9]+]]:ac = COPY [[LDImm1]]
    ; 6502: [[LDImm1_:%[0-9]+]]:cc = LDImm1 0
    ; 6502: [[ADCImag8_:%[0-9]+]]:ac, [[ADCImag8_1:%[0-9]+]]:cc, [[ADCImag8_2:%[0-9]+]]:vc = ADCImag8 [[COPY2]], [[COPY1]], [[LDImm1_]]
    ; 6502: [[ADCImm:%[0-9]+]]:ac, [[ADCImm1:%[0-9]+]]:cc, [[ADCImm2:%[0-9]+]]:vc = ADCImm [[COPY3]], 0, [[ADCImag8_1]]
    ; 6502: [[REG_SEQUENCE1:%[0-9]+]]:imag16 = REG_SEQUENCE [[ADCImag8_]], %subreg.sublo, [[ADCImm]], %subreg.subhi
    ; 6502: [[LDImm2:%[0-9]+]]:yc = LDImm 0
    ; 6502: STYIndir [[COPY]], [[REG_SEQUENCE1]], [[LDImm2]] :: (volatile store 1)
    ; 6502: RTS
    ; 65C02-LABEL: name: store_volatile_not_indexed
    ; 65C02: [[COPY:%[0-9]+]]:ac = COPY $x
    ; 65C02: [[LDImm:%[0-9]+]]:gpr = LDImm target-flags(lo) @.str
    ; 65C02: [[LDImm1:%[0-9]+]]:gpr = LDImm target-flags(hi) @.str
    ; 65C02: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; 65C02: [[COPY1:%[0-9]+]]:imag8 = COPY $a
    ; 65C02: [[COPY2:%[0-9]+]]:ac = COPY [[LDImm]]
    ; 65C02: [[COPY3:%[0-9]+]]:ac = COPY [[LDImm1]]
    ; 65C02: [[LDImm1_:%[0-9]+]]:cc = LDImm1 0
    ; 65C02: [[ADCImag8_:%[0-9]+]]:ac, [[ADCImag8_1:%[0-9]+]]:cc, [[ADCImag8_2:%[0-9]+]]:vc = ADCImag8 [[COPY2]], [[COPY1]], [[LDImm1_]]
    ; 65C02: [[ADCImm:%[0-9]+]]:ac, [[ADCImm1:%[0-9]+]]:cc, [[ADCImm2:%[0-9]+]]:vc = ADCImm [[COPY3]], 0, [[ADCImag8_1]]
    ; 65C02: [[REG_SEQUENCE1:%[0-9]+]]:imag16 = REG_SEQUENCE [[ADCImag8_]], %subreg.sublo, [[ADCImm]], %subreg.subhi
    ; 65C02: [[LDImm2:%[0-9]+]]:yc = LDImm 0
    ; 65C02: STYIndir [[COPY]], [[REG_SEQUENCE1]], [[LDImm2]] :: (volatile store 1)
    ; 65C02: RTS
    %0:any(s8) = COPY $x
    %1:any(p0) = G_GLOBAL_VALUE @.str
    %2:any(s8) = COPY $a
    %3:any(p0) = G_INDEX %1, %2
    G_STORE %0, %3 :: (volatile store 1)
    RTS
...
---
name: store_zero_absolute_const
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: store_zero_absolute_const
    ; 6502: [[LDImm:%[0-9]+]]:gpr = LDImm 0
    ; 6502: STAbs [[LDImm]], 1234 :: (store 1)
    ; 6502: RTS
    ; 65C02-LABEL: name: store_zero_absolute_const
    ; 65C02: STZAbs 1234 :: (store 1)
    ; 65C02: RTS
    %0:any(s8) = G_CONSTANT i8 0
    %1:any(s16) = G_CONSTANT i16 1234
    %2:any(p0) = G_INTTOPTR %1
    G_STORE %0, %2 :: (store 1)
    RTS
...
---
name: store_zero_absolute_gv
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: store_zero_absolute_gv
    ; 6502: [[LDImm:%[0-9]+]]:gpr = LDImm 0
    ; 6502: STAbs [[LDImm]], @.str :: (store 1)
    ; 6502: RTS
    ; 65C02-LABEL: name: store_zero_absolute_gv
    ; 65C02: STZAbs @.str :: (store 1)
    ; 65C02: RTS
    %0:any(s8) = G_CONSTANT i8 0
    %1:any(p0) = G_GLOBAL_VALUE @.str
    G_STORE %0, %1 :: (store 1)
    RTS
...
---
name: store_zero_indexed
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: store_zero_indexed
    ; 6502: [[LDImm:%[0-9]+]]:ac = LDImm 0
    ; 6502: [[COPY:%[0-9]+]]:xy = COPY $a
    ; 6502: STIdx [[LDImm]], @.str, [[COPY]] :: (store 1)
    ; 6502: RTS
    ; 65C02-LABEL: name: store_zero_indexed
    ; 65C02: [[COPY:%[0-9]+]]:xc = COPY $a
    ; 65C02: STZIdx @.str, [[COPY]] :: (store 1)
    ; 65C02: RTS
    %0:any(s8) = G_CONSTANT i8 0
    %1:any(p0) = G_GLOBAL_VALUE @.str
    %2:any(s8) = COPY $a
    %3:any(p0) = G_INDEX %1, %2
    G_STORE %0, %3 :: (store 1)
    RTS
...
---
name: store_zero_volatile_not_indexed
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; 6502-LABEL: name: store_zero_volatile_not_indexed
    ; 6502: [[LDImm:%[0-9]+]]:ac = LDImm 0
    ; 6502: [[LDImm1:%[0-9]+]]:gpr = LDImm target-flags(lo) @.str
    ; 6502: [[LDImm2:%[0-9]+]]:gpr = LDImm target-flags(hi) @.str
    ; 6502: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm1]], %subreg.sublo, [[LDImm2]], %subreg.subhi
    ; 6502: [[COPY:%[0-9]+]]:imag8 = COPY $a
    ; 6502: [[COPY1:%[0-9]+]]:ac = COPY [[LDImm1]]
    ; 6502: [[COPY2:%[0-9]+]]:ac = COPY [[LDImm2]]
    ; 6502: [[LDImm1_:%[0-9]+]]:cc = LDImm1 0
    ; 6502: [[ADCImag8_:%[0-9]+]]:ac, [[ADCImag8_1:%[0-9]+]]:cc, [[ADCImag8_2:%[0-9]+]]:vc = ADCImag8 [[COPY1]], [[COPY]], [[LDImm1_]]
    ; 6502: [[ADCImm:%[0-9]+]]:ac, [[ADCImm1:%[0-9]+]]:cc, [[ADCImm2:%[0-9]+]]:vc = ADCImm [[COPY2]], 0, [[ADCImag8_1]]
    ; 6502: [[REG_SEQUENCE1:%[0-9]+]]:imag16 = REG_SEQUENCE [[ADCImag8_]], %subreg.sublo, [[ADCImm]], %subreg.subhi
    ; 6502: [[LDImm3:%[0-9]+]]:yc = LDImm 0
    ; 6502: STYIndir [[LDImm]], [[REG_SEQUENCE1]], [[LDImm3]] :: (volatile store 1)
    ; 6502: RTS
    ; 65C02-LABEL: name: store_zero_volatile_not_indexed
    ; 65C02: [[LDImm:%[0-9]+]]:ac = LDImm 0
    ; 65C02: [[LDImm1:%[0-9]+]]:gpr = LDImm target-flags(lo) @.str
    ; 65C02: [[LDImm2:%[0-9]+]]:gpr = LDImm target-flags(hi) @.str
    ; 65C02: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm1]], %subreg.sublo, [[LDImm2]], %subreg.subhi
    ; 65C02: [[COPY:%[0-9]+]]:imag8 = COPY $a
    ; 65C02: [[COPY1:%[0-9]+]]:ac = COPY [[LDImm1]]
    ; 65C02: [[COPY2:%[0-9]+]]:ac = COPY [[LDImm2]]
    ; 65C02: [[LDImm1_:%[0-9]+]]:cc = LDImm1 0
    ; 65C02: [[ADCImag8_:%[0-9]+]]:ac, [[ADCImag8_1:%[0-9]+]]:cc, [[ADCImag8_2:%[0-9]+]]:vc = ADCImag8 [[COPY1]], [[COPY]], [[LDImm1_]]
    ; 65C02: [[ADCImm:%[0-9]+]]:ac, [[ADCImm1:%[0-9]+]]:cc, [[ADCImm2:%[0-9]+]]:vc = ADCImm [[COPY2]], 0, [[ADCImag8_1]]
    ; 65C02: [[REG_SEQUENCE1:%[0-9]+]]:imag16 = REG_SEQUENCE [[ADCImag8_]], %subreg.sublo, [[ADCImm]], %subreg.subhi
    ; 65C02: [[LDImm3:%[0-9]+]]:yc = LDImm 0
    ; 65C02: STYIndir [[LDImm]], [[REG_SEQUENCE1]], [[LDImm3]] :: (volatile store 1)
    ; 65C02: RTS
    %0:any(s8) = G_CONSTANT i8 0
    %1:any(p0) = G_GLOBAL_VALUE @.str
    %2:any(s8) = COPY $a
    %3:any(p0) = G_INDEX %1, %2
    G_STORE %0, %3 :: (volatile store 1)
    RTS
...
