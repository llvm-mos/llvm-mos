; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs < %s | FileCheck %s

target datalayout = "e-m:e-p:16:8-p1:8:8-i16:8-i32:8-i64:8-f32:8-f64:8-a:8-Fi8-n8"
target triple = "mos"

define zeroext i8 @sgt_8(i8 noundef signext %x) {
; CHECK-LABEL: sgt_8:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    tax
; CHECK-NEXT:    bmi .LBB0_3
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    cmp #124
; CHECK-NEXT:    bcc .LBB0_3
; CHECK-NEXT:  ; %bb.2: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    rts
; CHECK-NEXT:  .LBB0_3: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rts
entry:
  %cmp = icmp sgt i8 %x, 123
  %conv2 = zext i1 %cmp to i8
  ret i8 %conv2
}

define zeroext i8 @sgt_16(i16 noundef %x) {
; CHECK-LABEL: sgt_16:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bpl .LBB1_2
; CHECK-NEXT:  .LBB1_1: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rts
; CHECK-NEXT:  .LBB1_2: ; %entry
; CHECK-NEXT:    cpx #4
; CHECK-NEXT:    bne .LBB1_4
; CHECK-NEXT:  ; %bb.3: ; %entry
; CHECK-NEXT:    cmp #211
; CHECK-NEXT:    bcc .LBB1_1
; CHECK-NEXT:    jmp .LBB1_5
; CHECK-NEXT:  .LBB1_4: ; %entry
; CHECK-NEXT:    cpx #4
; CHECK-NEXT:    bcc .LBB1_1
; CHECK-NEXT:  .LBB1_5: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    rts
entry:
  %cmp = icmp sgt i16 %x, 1234
  %conv1 = zext i1 %cmp to i8
  ret i8 %conv1
}

define zeroext i8 @sgt_32(i32 noundef %x) {
; CHECK-LABEL: sgt_32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    ldy __rc3
; CHECK-NEXT:    bpl .LBB2_2
; CHECK-NEXT:  .LBB2_1: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rts
; CHECK-NEXT:  .LBB2_2: ; %entry
; CHECK-NEXT:    stx __rc4
; CHECK-NEXT:    ldx __rc3
; CHECK-NEXT:    bne .LBB2_6
; CHECK-NEXT:  ; %bb.3: ; %entry
; CHECK-NEXT:    ldy __rc2
; CHECK-NEXT:    cpy #1
; CHECK-NEXT:    bne .LBB2_7
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    ldx __rc4
; CHECK-NEXT:    cpx #226
; CHECK-NEXT:    bne .LBB2_8
; CHECK-NEXT:  ; %bb.5: ; %entry
; CHECK-NEXT:    cmp #65
; CHECK-NEXT:    bcc .LBB2_1
; CHECK-NEXT:    jmp .LBB2_9
; CHECK-NEXT:  .LBB2_6: ; %entry
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bcc .LBB2_1
; CHECK-NEXT:    jmp .LBB2_9
; CHECK-NEXT:  .LBB2_7: ; %entry
; CHECK-NEXT:    cpy #1
; CHECK-NEXT:    bcc .LBB2_1
; CHECK-NEXT:    jmp .LBB2_9
; CHECK-NEXT:  .LBB2_8: ; %entry
; CHECK-NEXT:    cpx #226
; CHECK-NEXT:    bcc .LBB2_1
; CHECK-NEXT:  .LBB2_9: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    rts
entry:
  %cmp = icmp sgt i32 %x, 123456
  %conv1 = zext i1 %cmp to i8
  ret i8 %conv1
}

define zeroext i8 @sgt_64(i64 noundef %x) {
; CHECK-LABEL: sgt_64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    ldy __rc7
; CHECK-NEXT:    bmi .LBB3_10
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    stx __rc8
; CHECK-NEXT:    ldx __rc7
; CHECK-NEXT:    bne .LBB3_12
; CHECK-NEXT:  ; %bb.2: ; %entry
; CHECK-NEXT:    ldy __rc6
; CHECK-NEXT:    bne .LBB3_9
; CHECK-NEXT:  ; %bb.3: ; %entry
; CHECK-NEXT:    ldx __rc5
; CHECK-NEXT:    bne .LBB3_11
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    ldx __rc4
; CHECK-NEXT:    bne .LBB3_14
; CHECK-NEXT:  ; %bb.5: ; %entry
; CHECK-NEXT:    ldx __rc3
; CHECK-NEXT:    cpx #7
; CHECK-NEXT:    bne .LBB3_15
; CHECK-NEXT:  ; %bb.6: ; %entry
; CHECK-NEXT:    ldx __rc2
; CHECK-NEXT:    cpx #91
; CHECK-NEXT:    bne .LBB3_16
; CHECK-NEXT:  ; %bb.7: ; %entry
; CHECK-NEXT:    ldx __rc8
; CHECK-NEXT:    cpx #205
; CHECK-NEXT:    bne .LBB3_17
; CHECK-NEXT:  ; %bb.8: ; %entry
; CHECK-NEXT:    cmp #22
; CHECK-NEXT:    bcc .LBB3_10
; CHECK-NEXT:    jmp .LBB3_13
; CHECK-NEXT:  .LBB3_9: ; %entry
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    bcs .LBB3_13
; CHECK-NEXT:  .LBB3_10: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rts
; CHECK-NEXT:  .LBB3_11: ; %entry
; CHECK-NEXT:    ldx __rc5
; CHECK-NEXT:  .LBB3_12: ; %entry
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bcc .LBB3_10
; CHECK-NEXT:  .LBB3_13: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    rts
; CHECK-NEXT:  .LBB3_14: ; %entry
; CHECK-NEXT:    ldx __rc4
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bcc .LBB3_10
; CHECK-NEXT:    jmp .LBB3_13
; CHECK-NEXT:  .LBB3_15: ; %entry
; CHECK-NEXT:    cpx #7
; CHECK-NEXT:    bcc .LBB3_10
; CHECK-NEXT:    jmp .LBB3_13
; CHECK-NEXT:  .LBB3_16: ; %entry
; CHECK-NEXT:    cpx #91
; CHECK-NEXT:    bcc .LBB3_10
; CHECK-NEXT:    jmp .LBB3_13
; CHECK-NEXT:  .LBB3_17: ; %entry
; CHECK-NEXT:    cpx #205
; CHECK-NEXT:    bcc .LBB3_10
; CHECK-NEXT:    jmp .LBB3_13
entry:
  %cmp = icmp sgt i64 %x, 123456789
  %conv1 = zext i1 %cmp to i8
  ret i8 %conv1
}

define zeroext i8 @nsgt_8(i8 noundef signext %x) {
; CHECK-LABEL: nsgt_8:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    tax
; CHECK-NEXT:    bpl .LBB4_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    cmp #134
; CHECK-NEXT:    bcc .LBB4_3
; CHECK-NEXT:  .LBB4_2: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    rts
; CHECK-NEXT:  .LBB4_3: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rts
entry:
  %cmp = icmp sgt i8 %x, -123
  %conv2 = zext i1 %cmp to i8
  ret i8 %conv2
}

define zeroext i8 @nsgt_16(i16 noundef %x) {
; CHECK-LABEL: nsgt_16:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bpl .LBB5_3
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    cpx #251
; CHECK-NEXT:    bne .LBB5_4
; CHECK-NEXT:  ; %bb.2: ; %entry
; CHECK-NEXT:    cmp #47
; CHECK-NEXT:    bcc .LBB5_5
; CHECK-NEXT:  .LBB5_3: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    rts
; CHECK-NEXT:  .LBB5_4: ; %entry
; CHECK-NEXT:    cpx #251
; CHECK-NEXT:    bcs .LBB5_3
; CHECK-NEXT:  .LBB5_5: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rts
entry:
  %cmp = icmp sgt i16 %x, -1234
  %conv1 = zext i1 %cmp to i8
  ret i8 %conv1
}

define zeroext i8 @nsgt_32(i32 noundef %x) {
; CHECK-LABEL: nsgt_32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    ldy __rc3
; CHECK-NEXT:    bpl .LBB6_6
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    stx __rc4
; CHECK-NEXT:    ldx __rc3
; CHECK-NEXT:    cpx #255
; CHECK-NEXT:    bne .LBB6_5
; CHECK-NEXT:  ; %bb.2: ; %entry
; CHECK-NEXT:    ldy __rc2
; CHECK-NEXT:    cpy #237
; CHECK-NEXT:    bne .LBB6_7
; CHECK-NEXT:  ; %bb.3: ; %entry
; CHECK-NEXT:    ldx __rc4
; CHECK-NEXT:    cpx #41
; CHECK-NEXT:    bne .LBB6_9
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    cmp #122
; CHECK-NEXT:    bcs .LBB6_6
; CHECK-NEXT:    jmp .LBB6_8
; CHECK-NEXT:  .LBB6_5: ; %entry
; CHECK-NEXT:    cpx #255
; CHECK-NEXT:    bcc .LBB6_8
; CHECK-NEXT:  .LBB6_6: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    rts
; CHECK-NEXT:  .LBB6_7: ; %entry
; CHECK-NEXT:    cpy #237
; CHECK-NEXT:    bcs .LBB6_6
; CHECK-NEXT:  .LBB6_8: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rts
; CHECK-NEXT:  .LBB6_9: ; %entry
; CHECK-NEXT:    cpx #41
; CHECK-NEXT:    bcs .LBB6_6
; CHECK-NEXT:    jmp .LBB6_8
entry:
  %cmp = icmp sgt i32 %x, -1234567
  %conv1 = zext i1 %cmp to i8
  ret i8 %conv1
}

define zeroext i8 @nsgt_64(i64 noundef %x) {
; CHECK-LABEL: nsgt_64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    ldy __rc7
; CHECK-NEXT:    bpl .LBB7_10
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    stx __rc8
; CHECK-NEXT:    ldx __rc7
; CHECK-NEXT:    cpx #255
; CHECK-NEXT:    bne .LBB7_9
; CHECK-NEXT:  ; %bb.2: ; %entry
; CHECK-NEXT:    ldy __rc6
; CHECK-NEXT:    cpy #255
; CHECK-NEXT:    bne .LBB7_11
; CHECK-NEXT:  ; %bb.3: ; %entry
; CHECK-NEXT:    ldx __rc5
; CHECK-NEXT:    cpx #255
; CHECK-NEXT:    bne .LBB7_9
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    ldx __rc4
; CHECK-NEXT:    cpx #255
; CHECK-NEXT:    bne .LBB7_9
; CHECK-NEXT:  ; %bb.5: ; %entry
; CHECK-NEXT:    ldx __rc3
; CHECK-NEXT:    cpx #248
; CHECK-NEXT:    bne .LBB7_13
; CHECK-NEXT:  ; %bb.6: ; %entry
; CHECK-NEXT:    ldx __rc2
; CHECK-NEXT:    cpx #164
; CHECK-NEXT:    bne .LBB7_14
; CHECK-NEXT:  ; %bb.7: ; %entry
; CHECK-NEXT:    ldx __rc8
; CHECK-NEXT:    cpx #50
; CHECK-NEXT:    bne .LBB7_15
; CHECK-NEXT:  ; %bb.8: ; %entry
; CHECK-NEXT:    cmp #236
; CHECK-NEXT:    bcs .LBB7_10
; CHECK-NEXT:    jmp .LBB7_12
; CHECK-NEXT:  .LBB7_9: ; %entry
; CHECK-NEXT:    cpx #255
; CHECK-NEXT:    bcc .LBB7_12
; CHECK-NEXT:  .LBB7_10: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    rts
; CHECK-NEXT:  .LBB7_11: ; %entry
; CHECK-NEXT:    cpy #255
; CHECK-NEXT:    bcs .LBB7_10
; CHECK-NEXT:  .LBB7_12: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rts
; CHECK-NEXT:  .LBB7_13: ; %entry
; CHECK-NEXT:    cpx #248
; CHECK-NEXT:    bcs .LBB7_10
; CHECK-NEXT:    jmp .LBB7_12
; CHECK-NEXT:  .LBB7_14: ; %entry
; CHECK-NEXT:    cpx #164
; CHECK-NEXT:    bcs .LBB7_10
; CHECK-NEXT:    jmp .LBB7_12
; CHECK-NEXT:  .LBB7_15: ; %entry
; CHECK-NEXT:    cpx #50
; CHECK-NEXT:    bcs .LBB7_10
; CHECK-NEXT:    jmp .LBB7_12
entry:
  %cmp = icmp sgt i64 %x, -123456789
  %conv1 = zext i1 %cmp to i8
  ret i8 %conv1
}
