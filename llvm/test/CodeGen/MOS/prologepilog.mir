# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=mos -run-pass=prologepilog -verify-machineinstrs -o - %s | FileCheck %s
---
name: addrlostk
stack:
  - { id: 0, size: 256 }
  - { id: 1, size: 2 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: addrlostk
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, dead $v = ADCImm $a, 1, $c
    ; CHECK-NEXT: $rc2 = COPY killed $a
    $rc2, $c, dead $v = AddrLostk %stack.1, 1
...
---
name: addrlostk_0
stack:
  - { id: 0, size: 256 }
  - { id: 1, size: 2 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: addrlostk_0
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $c = LDCImm 0
    ; CHECK-NEXT: $rc2 = COPY $rc0
    $rc2, $c, dead $v = AddrLostk %stack.1, 0
...
---
name: addrhistk
stack:
  - { id: 0, size: 256 }
  - { id: 1, size: 2 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: addrhistk
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, dead $c, dead $v = ADCImm $a, 1, $c
    ; CHECK-NEXT: $rc3 = COPY killed $a
    $c = LDCImm 0
    $rc3, dead $c, dead $v = AddrHistk %stack.0, 255, $c
...
---
name: addrhistk_0
stack:
  - { id: 0, size: 256 }
  - { id: 1, size: 2 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: addrhistk_0
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $c = LDCImm 0
    ; CHECK-NEXT: $rc3 = COPY $rc1
    $c = LDCImm 0
    $rc3, dead $c, dead $v = AddrHistk %stack.1, 0, $c
...
---
name: incsp
stack:
  - { id: 0, size: 1234 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: incsp
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 46, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 251, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 210, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 4, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: RTS
    RTS
...
---
name: incsp_hi_only
stack:
  - { id: 0, size: 512 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: incsp_hi_only
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 2, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: RTS
    RTS
...
---
name: ld_byte
stack:
  - { id: 0, size: 1 }
  - { id: 1, size: 2 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ld_byte
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 253, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $y = LDImm 1
    ; CHECK-NEXT: $a = LDYIndir $rs0, killed $y :: (load (s8) from %stack.1 + 1)
    $a, early-clobber $rs1 = LDStk %stack.1, 1 :: (load 1 from %stack.1 + 1)
...
---
name: ld_byte_high
stack:
  - { id: 0, size: 256 }
  - { id: 1, size: 2 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ld_byte_high
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $c = LDCImm 0
    ; CHECK-NEXT: $rc2 = COPY $rc0
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 1, $c
    ; CHECK-NEXT: $rc3 = COPY killed $a
    ; CHECK-NEXT: $y = LDImm 0
    ; CHECK-NEXT: $a = LDYIndir $rs1, killed $y :: (load (s8) from %stack.0 + 254)
    $a, early-clobber $rs1 = LDStk %stack.0, 254 :: (load 1 from %stack.0 + 254)
...
---
name: ld_byte_x
stack:
  - { id: 0, size: 1 }
  - { id: 1, size: 2 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ld_byte_x
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 253, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $y = LDImm 1
    ; CHECK-NEXT: $a = LDYIndir $rs0, killed $y :: (load (s8) from %stack.1 + 1)
    ; CHECK-NEXT: $x = COPY killed $a
    $x, early-clobber $rs1 = LDStk %stack.1, 1 :: (load 1 from %stack.1 + 1)
...
---
name: ld_byte_xlsb
stack:
  - { id: 0, size: 1 }
  - { id: 1, size: 2 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ld_byte_xlsb
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 253, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $y = LDImm 1
    ; CHECK-NEXT: $a = LDYIndir $rs0, killed $y :: (load (s8) from %stack.1 + 1)
    ; CHECK-NEXT: $x = COPY killed $a
    $xlsb, early-clobber $rs1 = LDStk %stack.1, 1 :: (load 1 from %stack.1 + 1)
...
---
name: ld_byte_c
stack:
  - { id: 0, size: 1 }
  - { id: 1, size: 2 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ld_byte_c
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 253, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $y = LDImm 1
    ; CHECK-NEXT: $a = LDYIndir $rs0, killed $y :: (load (s8) from %stack.1 + 1)
    ; CHECK-NEXT: $c = COPY $alsb
    ; CHECK-NEXT: $xlsb = COPY killed $c
    $c, early-clobber $rs1 = LDStk %stack.1, 1 :: (load 1 from %stack.1 + 1)
    $xlsb = COPY killed $c
...
---
name: ld_ptr
stack:
  - { id: 0, size: 4 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ld_ptr
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 252, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $y = LDImm 2
    ; CHECK-NEXT: $a = LDYIndir $rs0, killed $y :: (load (s8) from %stack.0 + 2, align 2)
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $y = LDImm 3
    ; CHECK-NEXT: $a = LDYIndir $rs0, killed $y :: (load (s8) from %stack.0 + 3, basealign 2)
    ; CHECK-NEXT: $rc1 = COPY killed $a
    $rs0, early-clobber $rs1 = LDStk %stack.0, 2 :: (load 2 from %stack.0 + 2)

...
---
name: st_byte
stack:
  - { id: 0, size: 1 }
  - { id: 1, size: 2 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: st_byte
    ; CHECK: PH $a
    ; CHECK-NEXT: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 253, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $a = PL
    ; CHECK-NEXT: $y = LDImm 1
    ; CHECK-NEXT: STYIndir $a, $rs0, killed $y :: (store (s8) into %stack.1 + 1)
    early-clobber $rs1 = STStk $a, %stack.1, 1 :: (store 1 into %stack.1 + 1)
...
---
name: st_byte_c
stack:
  - { id: 0, size: 1 }
  - { id: 1, size: 2 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: st_byte_c
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 253, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $c = COPY $xlsb
    ; CHECK-NEXT: $alsb = COPY $c
    ; CHECK-NEXT: $y = LDImm 1
    ; CHECK-NEXT: STYIndir killed $a, $rs0, killed $y :: (store (s8) into %stack.1 + 1)
    $c = COPY $xlsb
    early-clobber $rs1 = STStk killed $c, %stack.1, 1 :: (store 1 into %stack.1 + 1)
...
---
name: st_byte_high
stack:
  - { id: 0, size: 256 }
  - { id: 1, size: 2 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: st_byte_high
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $c = LDCImm 0
    ; CHECK-NEXT: $rc2 = COPY $rc0
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 1, $c
    ; CHECK-NEXT: $rc3 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $x
    ; CHECK-NEXT: $y = LDImm 0
    ; CHECK-NEXT: STYIndir killed $a, $rs1, killed $y :: (store (s8) into %stack.0 + 254)
    early-clobber $rs1 = STStk $x, %stack.0, 254 :: (store 1 into %stack.0 + 254)
...
---
name: st_ptr
stack:
  - { id: 0, size: 4 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: st_ptr
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 252, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $rs0 = KILL $rs0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $y = LDImm 2
    ; CHECK-NEXT: STYIndir killed $a, $rs0, killed $y :: (store (s8) into %stack.0 + 2, align 2)
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $y = LDImm 3
    ; CHECK-NEXT: STYIndir killed $a, $rs0, killed $y :: (store (s8) into %stack.0 + 3, basealign 2)
    early-clobber $rs1 = STStk $rs0, %stack.0, 2 :: (store 2 into %stack.0 + 2)

...
---
name: variable_sized
stack:
  - { id: 0, type: variable-sized }
  - { id: 1, size: 1 }
  - { id: 2, size: 2 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: variable_sized
    ; CHECK: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 253, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: $a = frame-setup COPY $rc30
    ; CHECK-NEXT: frame-setup PH killed $a
    ; CHECK-NEXT: $a = frame-setup COPY $rc31
    ; CHECK-NEXT: frame-setup PH killed $a
    ; CHECK-NEXT: $rs15 = COPY $rs0
    ; CHECK-NEXT: $y = LDImm 1
    ; CHECK-NEXT: $a = LDYIndir $rs15, killed $y :: (load (s8) from %stack.2 + 1)
    ; CHECK-NEXT: $rs0 = COPY $rs15
    ; CHECK-NEXT: $a = frame-destroy PL
    ; CHECK-NEXT: $rc31 = frame-destroy COPY killed $a
    ; CHECK-NEXT: $a = frame-destroy PL
    ; CHECK-NEXT: $rc30 = frame-destroy COPY killed $a
    ; CHECK-NEXT: $c = LDCImm 0
    ; CHECK-NEXT: $a = COPY $rc0
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 3, $c
    ; CHECK-NEXT: $rc0 = COPY killed $a
    ; CHECK-NEXT: $a = COPY $rc1
    ; CHECK-NEXT: $a, $c, $v = ADCImm $a, 0, $c
    ; CHECK-NEXT: $rc1 = COPY killed $a
    ; CHECK-NEXT: RTS implicit $rc30, implicit $rc31
    $a, early-clobber $rs1 = LDStk %stack.2, 1 :: (load 1 from %stack.2 + 1)
    RTS
...
---
name: save_restore_csr
stack:
  - { id: 0, type: variable-sized }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: save_restore_csr
    ; CHECK: $a = frame-setup COPY $rc30
    ; CHECK-NEXT: frame-setup PH killed $a
    ; CHECK-NEXT: $a = frame-setup COPY $rc31
    ; CHECK-NEXT: frame-setup PH killed $a
    ; CHECK-NEXT: $rs15 = COPY $rs0
    ; CHECK-NEXT: $rs15 = IMPLICIT_DEF
    ; CHECK-NEXT: $rs16 = IMPLICIT_DEF
    ; CHECK-NEXT: $rs17 = IMPLICIT_DEF
    ; CHECK-NEXT: $rs0 = COPY $rs15
    ; CHECK-NEXT: $a = frame-destroy PL
    ; CHECK-NEXT: $rc31 = frame-destroy COPY killed $a
    ; CHECK-NEXT: $a = frame-destroy PL
    ; CHECK-NEXT: $rc30 = frame-destroy COPY killed $a
    ; CHECK-NEXT: RTS implicit $rc30, implicit $rc31
    $rs15 = IMPLICIT_DEF
    $rs16 = IMPLICIT_DEF
    $rs17 = IMPLICIT_DEF
    RTS
...
---
name: save_restore_csr_restorepoint
tracksRegLiveness: true
stack:
  - { id: 0, type: variable-sized }
frameInfo:
  savePoint:       '%bb.0'
  restorePoint:    '%bb.1'
body: |
  ; CHECK-LABEL: name: save_restore_csr_restorepoint
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a = frame-setup COPY $rc30
  ; CHECK-NEXT:   frame-setup PH killed $a
  ; CHECK-NEXT:   $a = frame-setup COPY $rc31
  ; CHECK-NEXT:   frame-setup PH killed $a
  ; CHECK-NEXT:   $rs15 = COPY $rs0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $rs15 = IMPLICIT_DEF
  ; CHECK-NEXT:   $rs16 = IMPLICIT_DEF
  ; CHECK-NEXT:   $rs17 = IMPLICIT_DEF
  ; CHECK-NEXT:   $rs0 = COPY $rs15
  ; CHECK-NEXT:   $a = frame-destroy PL
  ; CHECK-NEXT:   $rc31 = frame-destroy COPY killed $a
  ; CHECK-NEXT:   $a = frame-destroy PL
  ; CHECK-NEXT:   $rc30 = frame-destroy COPY killed $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   RTS implicit $rc30, implicit $rc31
  bb.0.entry:
  bb.1:
    $rs15 = IMPLICIT_DEF
    $rs16 = IMPLICIT_DEF
    $rs17 = IMPLICIT_DEF
  bb.2:
    RTS
...
