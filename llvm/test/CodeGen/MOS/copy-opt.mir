# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=mos -run-pass=mos-copy-opt -verify-machineinstrs -o - %s | FileCheck %s
---
name: prop
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0.entry:
    liveins: $a
    ; CHECK-LABEL: name: prop
    ; CHECK: liveins: $a
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $y = COPY killed $a
    ; CHECK-NEXT: RTS implicit killed $y
    $x = COPY $a
    $y = COPY $x
    RTS implicit $y
...
---
name: identity
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0.entry:
    liveins: $a
    ; CHECK-LABEL: name: identity
    ; CHECK: liveins: $a
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: RTS implicit killed $a
    $x = COPY $a
    $a = COPY $x
    RTS implicit $a
...
---
name: expensive
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0.entry:
    liveins: $rc2
    ; CHECK-LABEL: name: expensive
    ; CHECK: liveins: $rc2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $x = COPY killed $rc2
    ; CHECK-NEXT: $rc3 = COPY killed $x
    ; CHECK-NEXT: RTS implicit killed $rc3
    $x = COPY $rc2
    $rc3 = COPY $x
    RTS implicit $rc3
...
---
name: partial
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0.entry:
    liveins: $alsb, $x
    ; CHECK-LABEL: name: partial
    ; CHECK: liveins: $alsb, $x
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $xlsb = COPY killed $alsb, implicit-def $x
    ; CHECK-NEXT: $y = COPY killed $x
    ; CHECK-NEXT: RTS implicit killed $y
    $xlsb = COPY $alsb, implicit-def $x
    $y = COPY $x
    RTS implicit $y
...
---
name: clobbered_src
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0.entry:
    liveins: $a, $rc2
    ; CHECK-LABEL: name: clobbered_src
    ; CHECK: liveins: $a, $rc2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $x = COPY killed $a
    ; CHECK-NEXT: $a = COPY killed $rc2
    ; CHECK-NEXT: $y = COPY killed $x
    ; CHECK-NEXT: RTS implicit killed $y, implicit killed $a
    $x = COPY $a
    $a = COPY $rc2
    $y = COPY $x
    RTS implicit $y, implicit $a
...
---
name: clobbered_dst
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0.entry:
    liveins: $a, $rc2
    ; CHECK-LABEL: name: clobbered_dst
    ; CHECK: liveins: $a, $rc2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $y = COPY killed $rc2
    ; CHECK-NEXT: RTS implicit killed $y, implicit killed $a
    $x = COPY $a
    $x = COPY $rc2
    $y = COPY $x
    RTS implicit $y, implicit $a
...
---
name: parent_block
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: parent_block
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   dead renamable $c = CMPTermZ renamable $a, implicit-def $nz, implicit-def $z
  ; CHECK-NEXT:   BR %bb.2, killed $z, 1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $y = COPY killed $a
  ; CHECK-NEXT:   RTS implicit killed $y
  bb.0.entry:
    liveins: $a
    $x = COPY $a
    dead renamable $c = CMPTermZ killed renamable $a, implicit-def dead $nz, implicit-def $z
    BR %bb.2, $z, 1
  bb.1:
    liveins: $x
  bb.2:
    liveins: $x
    $y = COPY $x
    RTS implicit $y
...
---
name: parent_livein
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: parent_livein
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a, $x
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   dead renamable $c = CMPTermZ renamable $a, implicit-def $nz, implicit-def $z
  ; CHECK-NEXT:   BR %bb.2, killed $z, 1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $x = COPY killed $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $x
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $y = COPY killed $x
  ; CHECK-NEXT:   RTS implicit killed $y
  bb.0.entry:
    liveins: $a, $x
    dead renamable $c = CMPTermZ killed renamable $a, implicit-def dead $nz, implicit-def $z
    BR %bb.2, $z, 1
  bb.1:
    liveins: $a
    $x = COPY $a
  bb.2:
    liveins: $x
    $y = COPY $x
    RTS implicit $y
...
---
name: multiple_preds
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: multiple_preds
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   dead renamable $c = CMPTermZ renamable $a, implicit-def $nz, implicit-def $z
  ; CHECK-NEXT:   BR %bb.2, killed $z, 1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   JMP %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $y = COPY killed $a
  ; CHECK-NEXT:   RTS implicit killed $y
  bb.0.entry:
    liveins: $a
    dead renamable $c = CMPTermZ killed renamable $a, implicit-def dead $nz, implicit-def $z
    BR %bb.2, $z, 1
  bb.1:
    liveins: $a
    $x = COPY $a
    JMP %bb.3
  bb.2:
    liveins: $a
    $x = COPY $a
  bb.3:
    liveins: $x
    $y = COPY $x
    RTS implicit $y
...
---
name: divergent_preds
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: divergent_preds
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a, $y
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   dead renamable $c = CMPTermZ renamable $a, implicit-def $nz, implicit-def $z
  ; CHECK-NEXT:   BR %bb.2, killed $z, 1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $x = COPY killed $a
  ; CHECK-NEXT:   JMP %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $y
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $x = COPY killed $y
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $x
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $y = COPY killed $x
  ; CHECK-NEXT:   RTS implicit killed $y
  bb.0.entry:
    liveins: $a, $y
    dead renamable $c = CMPTermZ killed renamable $a, implicit-def dead $nz, implicit-def $z
    BR %bb.2, $z, 1
  bb.1:
    liveins: $a
    $x = COPY $a
    JMP %bb.3
  bb.2:
    liveins: $y
    $x = COPY $y
  bb.3:
    liveins: $x
    $y = COPY $x
    RTS implicit $y
...
---
name: clobbered_pred
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: clobbered_pred
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a, $y
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   dead renamable $c = CMPTermZ renamable $a, implicit-def $nz, implicit-def $z
  ; CHECK-NEXT:   BR %bb.2, killed $z, 1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $x = COPY $a
  ; CHECK-NEXT:   JMP %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $y, $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $x = COPY killed $a
  ; CHECK-NEXT:   $a = COPY killed $y
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   liveins: $a, $x
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $y = COPY killed $x
  ; CHECK-NEXT:   RTS implicit killed $y, implicit killed $a
  bb.0.entry:
    liveins: $a, $y
    dead renamable $c = CMPTermZ killed renamable $a, implicit-def dead $nz, implicit-def $z
    BR %bb.2, $z, 1
  bb.1:
    liveins: $a
    $x = COPY $a
    JMP %bb.3
  bb.2:
    liveins: $a, $y
    $x = COPY $a
    $a = COPY $y
  bb.3:
    liveins: $x, $a
    $y = COPY $x
    RTS implicit $y, implicit $a
...
---
name: term_clobber
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: term_clobber
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a, $c
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $rc2lsb = COPY killed $c
  ; CHECK-NEXT:   dead renamable $c = CMPTermZ killed renamable $a, implicit-def $nz, implicit-def $z
  ; CHECK-NEXT:   BR %bb.2, killed $z, 1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $rc2lsb
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $rc2lsb
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $c = COPY killed $rc2lsb
  ; CHECK-NEXT:   RTS implicit killed $c
  bb.0.entry:
    liveins: $a, $c
    $rc2lsb = COPY $c
    dead renamable $c = CMPTermZ killed renamable $a, implicit-def dead $nz, implicit-def $z
    BR %bb.2, $z, 1
  bb.1:
    liveins: $rc2lsb
  bb.2:
    liveins: $rc2lsb
    $c = COPY $rc2lsb
    RTS implicit $c
...
---
name: loop
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: loop
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $a, $rc2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $y = COPY $a
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $rc2, $a, $y
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $x = COPY killed $y
  ; CHECK-NEXT:   $y = COPY $rc2
  ; CHECK-NEXT:   dead renamable $c = CMPTermZ renamable $a, implicit-def $nz, implicit-def $z
  ; CHECK-NEXT:   BR %bb.1, killed $z, 1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   liveins: $x, $y
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RTS implicit killed $x, implicit killed $y
  bb.0.entry:
    liveins: $a, $rc2
    $y = COPY $a
  bb.1:
    liveins: $a, $y, $rc2
    $x = COPY $y
    $y = COPY $rc2
    dead renamable $c = CMPTermZ killed renamable $a, implicit-def dead $nz, implicit-def $z
    BR %bb.1, $z, 1
  bb.2:
    liveins: $x, $y
    RTS implicit $x, implicit $y
...
---
name: remat
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0.entry:
    liveins: $a
    ; CHECK-LABEL: name: remat
    ; CHECK: liveins: $a
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: dead $x = LDImm 0
    ; CHECK-NEXT: $y = LDImm 0
    ; CHECK-NEXT: RTS implicit killed $y
    $x = LDImm 0
    $y = COPY $x
    RTS implicit $y
...
---
name: no-remat-imag
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0.entry:
    liveins: $a
    ; CHECK-LABEL: name: no-remat-imag
    ; CHECK: liveins: $a
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $x = LDImm 0
    ; CHECK-NEXT: $rc2 = COPY killed $x
    ; CHECK-NEXT: RTS implicit killed $rc2
    $x = LDImm 0
    $rc2 = COPY $x
    RTS implicit $rc2
...
