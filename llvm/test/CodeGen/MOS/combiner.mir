# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=mos -run-pass=mos-combiner -verify-machineinstrs -o - %s | FileCheck %s
--- |
  @a = global i64 1
  @b = global i64 2

  define void @fold_global_offset() {
    entry:
      ret void
  }

  define void @sbc_literal_eq() {
    entry:
      ret void
  }

  define void @extract_low_bit_using_earlier_shift_8() {
    entry:
      ret void
  }

  define void @extract_low_bit_using_earlier_shift_16() {
    entry:
      ret void
  }

  define void @extract_low_bit_using_later_shift() {
    entry:
      ret void
  }

  define void @extract_low_bit_and() {
    entry:
      ret void
  }

  define void @extract_not_low_bit_and_using_earlier_shift() {
    entry:
      ret void
  }

  define void @extract_not_low_bit_and_using_later_shift() {
    entry:
      ret void
  }

  define void @extract_low_bits() {
    entry:
      ret void
  }

  define void @uaddo_1() {
    entry:
      ret void
  }

  define void @cmpz_0() {
    entry:
      ret void
  }

  define void @load_store_to_memcpy() {
    entry:
      ret void
  }

  define void @load_store_not_to_memcpy_if_volatile() {
    entry:
      ret void
  }

  define void @store_repeating_to_memset() {
    entry:
      ret void
  }

  define void @fold_adde() {
    entry:
      ret void
  }

  define void @fold_sbc() {
    entry:
      ret void
  }

  define void @fold_shift() {
    entry:
      ret void
  }

  define void @shift_unused_carry_in() {
    entry:
      ret void
  }

  define void @mul_to_shift() {
    entry:
      ret void
  }

  define void @mul_to_shift_and_add() {
    entry:
      ret void
  }
---
name: fold_global_offset
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: fold_global_offset
    ; CHECK: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @fold_global_offset + 42
    ; CHECK-NEXT: RTS implicit [[GV]](p0)
    %0:_(p0) = G_GLOBAL_VALUE @fold_global_offset
    %1:_(s16) = G_CONSTANT i16 42
    %2:_(p0) = G_PTR_ADD %0, %1
    RTS implicit %2
...
---
name: sbc_literal_eq
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: sbc_literal_eq
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: RTS implicit [[C1]](s8), implicit [[C]](s1), implicit [[C2]](s1), implicit [[C2]](s1), implicit [[C2]](s1), implicit [[C]](s1)
    %0:_(s8) = COPY $a
    %1:_(s1) = G_CONSTANT i1 -1
    %2:_(s8), %3:_(s1), %4:_(s1), %5:_(s1), %6:_(s1) = G_SBC %0, %0, %1
    RTS implicit %2, implicit %3, implicit %4, implicit %4, implicit %5, implicit %6
...
---
name: extract_low_bit_using_earlier_shift_8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bit_using_earlier_shift_8
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[C]]
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: RTS implicit [[LSHRE]](s8), implicit [[LSHRE1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    $x = COPY $y
    %3:_(s1) = G_TRUNC %0
    RTS implicit %2, implicit %3
...
---
name: extract_low_bit_using_earlier_shift_16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bit_using_earlier_shift_16
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[UV1]], [[C]]
    ; CHECK-NEXT: [[LSHRE2:%[0-9]+]]:_(s8), [[LSHRE3:%[0-9]+]]:_(s1) = G_LSHRE [[UV]], [[LSHRE1]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[LSHRE2]](s8), [[LSHRE]](s8)
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: RTS implicit [[MV]](s16), implicit [[LSHRE3]](s1)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = G_CONSTANT i16 1
    %2:_(s16) = G_LSHR %0, %1
    $x = COPY $y
    %3:_(s1) = G_TRUNC %0
    RTS implicit %2, implicit %3
...
---
name: extract_low_bit_using_later_shift
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bit_using_later_shift
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[C]]
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: RTS implicit [[LSHRE1]](s1), implicit [[LSHRE]](s8)
    %0:_(s8) = COPY $a
    %1:_(s1) = G_TRUNC %0
    $x = COPY $y
    %2:_(s8) = G_CONSTANT i8 1
    %3:_(s8) = G_LSHR %0, %2
    RTS implicit %1, implicit %3
...
---
name: extract_low_bit_and
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bit_and
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[C]]
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: RTS implicit [[LSHRE]](s8), implicit [[LSHRE1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    $x = COPY $y
    %4:_(s8) = G_AND %0, %1
    %5:_(s8) = G_CONSTANT i8 0
    %6:_(s1) = G_ICMP intpred(ne), %4, %5
    RTS implicit %2, implicit %6
...

---
name: extract_not_low_bit_and_using_earlier_shift
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_not_low_bit_and_using_earlier_shift
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s1) = G_XOR [[LSHRE1]], [[C1]]
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: RTS implicit [[LSHRE]](s8), implicit [[XOR]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    $x = COPY $y
    %4:_(s8) = G_AND %0, %1
    %5:_(s8) = G_CONSTANT i8 0
    %6:_(s1) = G_ICMP intpred(eq), %4, %5
    RTS implicit %2, implicit %6
...
---
name: extract_not_low_bit_and_using_later_shift
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_not_low_bit_and_using_later_shift
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s1) = G_XOR [[LSHRE1]], [[C1]]
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: RTS implicit [[XOR]](s1), implicit [[LSHRE]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_AND %0, %1
    %3:_(s8) = G_CONSTANT i8 0
    %4:_(s1) = G_ICMP intpred(eq), %2, %3
    $x = COPY $y
    %5:_(s8) = G_LSHR %0, %1
    RTS implicit %4, implicit %5
...
---
name: extract_low_bits
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bits
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s2) = G_TRUNC [[COPY]](s8)
    ; CHECK-NEXT: RTS implicit [[LSHR]](s8), implicit [[TRUNC]](s2)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    $x = COPY $y
    %3:_(s2) = G_TRUNC %0
    RTS implicit %2, implicit %3
...
---
name: uaddo_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: uaddo_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s8) = G_ADD [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s1) = G_ICMP intpred(eq), [[ADD]](s8), [[C1]]
    ; CHECK-NEXT: RTS implicit [[ADD]](s8), implicit [[ICMP]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8), %3:_(s1) = G_UADDO %0, %1
    RTS implicit %2, implicit %3
...
---
name: cmpz_0
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: cmpz_0
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[CMPZ:%[0-9]+]]:_(s1) = G_CMPZ [[COPY]](s8)
    ; CHECK-NEXT: RTS implicit [[CMPZ]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 0
    %2:_(s8) = G_CONSTANT i8 0
    %3:_(s1) = G_CMPZ %0, %1, %2
    RTS implicit %3
...
---
name: load_store_to_memcpy
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_store_to_memcpy
    ; CHECK: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @a
    ; CHECK-NEXT: [[GV1:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @b
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 8
    ; CHECK-NEXT: G_MEMCPY_INLINE [[GV1]](p0), [[GV]](p0), [[C]](s16) :: (store (s64) into @b), (load (s64) from @a)
    ; CHECK-NEXT: RTS implicit [[GV1]](p0)
    %1:_(p0) = G_GLOBAL_VALUE @a
    %2:_(p0) = G_GLOBAL_VALUE @b
    %0:_(s64) = G_LOAD %1:_(p0) :: (load (s64) from @a); example.c:11:3
    G_STORE %0:_(s64), %2:_(p0) :: (store (s64) into @b); example.c:11:3
    RTS implicit %2
...
---
name: load_store_not_to_memcpy_if_volatile
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_store_not_to_memcpy_if_volatile
    ; CHECK: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @a
    ; CHECK-NEXT: [[GV1:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @b
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s64) = G_LOAD [[GV]](p0) :: (volatile load (s64) from @a)
    ; CHECK-NEXT: G_STORE [[LOAD]](s64), [[GV1]](p0) :: (volatile store (s64) into @b)
    ; CHECK-NEXT: RTS implicit [[GV1]](p0)
    %1:_(p0) = G_GLOBAL_VALUE @a
    %2:_(p0) = G_GLOBAL_VALUE @b
    %0:_(s64) = G_LOAD %1:_(p0) :: (volatile load (s64) from @a); example.c:11:3
    G_STORE %0:_(s64), %2:_(p0) :: (volatile store (s64) into @b); example.c:11:3
    RTS implicit %2
...
---
name: store_repeating_to_memset
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: store_repeating_to_memset
    ; CHECK: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s16) = G_CONSTANT i16 4
    ; CHECK-NEXT: G_MEMSET [[GV]](p0), [[C]](s8), [[C1]](s16), 0 :: (store (s32) into @a)
    ; CHECK-NEXT: RTS implicit [[GV]](p0)
    %1:_(p0) = G_GLOBAL_VALUE @a
    %0:_(s32) = G_CONSTANT i32 16843009 ; 0x01010101
    G_STORE %0:_(s32), %1:_(p0) :: (store (s32) into @a); example.c:11:3
    RTS implicit %1
...
---
name: fold_adde
legalized: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: fold_adde
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s8) = G_CONSTANT i8 -127
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: RTS implicit [[C]](s8), implicit [[C2]](s1), implicit [[C1]](s8), implicit [[C3]](s1), implicit [[C]](s8), implicit [[C3]](s1), implicit [[C]](s8), implicit [[C2]](s1), implicit [[C4]](s8), implicit [[C3]](s1), implicit [[C5]](s8), implicit [[C3]](s1)
    %0:_(s8) = G_CONSTANT i8 0
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_CONSTANT i8 127
    %3:_(s8) = G_CONSTANT i8 255
    %4:_(s1) = G_CONSTANT i1 0
    %5:_(s1) = G_CONSTANT i1 1

    %6:_(s8), %7:_(s1) = G_UADDE %0, %0, %4
    %8:_(s8), %9:_(s1) = G_UADDE %3, %1, %5
    %10:_(s8), %11:_(s1) = G_UADDE %0, %3, %5

    %12:_(s8), %13:_(s1) = G_SADDE %0, %0, %4
    %14:_(s8), %15:_(s1) = G_SADDE %2, %1, %5
    %16:_(s8), %17:_(s1) = G_SADDE %0, %2, %5

    RTS implicit %6, implicit %7, implicit %8, implicit %9, implicit %10, implicit %11, implicit %12, implicit %13, implicit %14, implicit %15, implicit %16, implicit %17
...
---
name: fold_sbc
legalized: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: fold_sbc
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[SBC:%[0-9]+]]:_(s8), [[SBC1:%[0-9]+]]:_(s1), [[SBC2:%[0-9]+]]:_, [[SBC3:%[0-9]+]]:_, [[SBC4:%[0-9]+]]:_ = G_SBC [[C]], [[C1]], [[C2]]
    ; CHECK-NEXT: G_STORE_ABS [[SBC]](s8), 1234
    ; CHECK-NEXT: G_STORE_ABS [[SBC1]](s1), 1234
    ; CHECK-NEXT: G_STORE_ABS [[SBC2]](s1), 1234
    ; CHECK-NEXT: G_STORE_ABS [[SBC3]](s1), 1234
    ; CHECK-NEXT: G_STORE_ABS [[SBC4]](s1), 1234
    ; CHECK-NEXT: [[SBC5:%[0-9]+]]:_(s8), [[SBC6:%[0-9]+]]:_(s1), [[SBC7:%[0-9]+]]:_, [[SBC8:%[0-9]+]]:_, [[SBC9:%[0-9]+]]:_ = G_SBC [[C1]], [[C]], [[C2]]
    ; CHECK-NEXT: G_STORE_ABS [[SBC5]](s8), 1234
    ; CHECK-NEXT: G_STORE_ABS [[SBC6]](s1), 1234
    ; CHECK-NEXT: G_STORE_ABS [[SBC7]](s1), 1234
    ; CHECK-NEXT: G_STORE_ABS [[SBC8]](s1), 1234
    ; CHECK-NEXT: G_STORE_ABS [[SBC9]](s1), 1234
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: G_STORE_ABS [[C]](s8), 1234
    ; CHECK-NEXT: G_STORE_ABS [[C3]](s1), 1234
    ; CHECK-NEXT: G_STORE_ABS [[C2]](s1), 1234
    ; CHECK-NEXT: G_STORE_ABS [[C2]](s1), 1234
    ; CHECK-NEXT: G_STORE_ABS [[C3]](s1), 1234
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[SBC10:%[0-9]+]]:_(s8), [[SBC11:%[0-9]+]]:_(s1), [[SBC12:%[0-9]+]]:_, [[SBC13:%[0-9]+]]:_, [[SBC14:%[0-9]+]]:_ = G_SBC [[C]], [[C4]], [[C3]]
    ; CHECK-NEXT: G_STORE_ABS [[SBC10]](s8), 1234
    ; CHECK-NEXT: G_STORE_ABS [[SBC11]](s1), 1234
    ; CHECK-NEXT: G_STORE_ABS [[SBC12]](s1), 1234
    ; CHECK-NEXT: G_STORE_ABS [[SBC13]](s1), 1234
    ; CHECK-NEXT: G_STORE_ABS [[SBC14]](s1), 1234
    %0:_(s8) = G_CONSTANT i8 0
    %1:_(s8) = G_CONSTANT i8 -1
    %2:_(s1) = G_CONSTANT i1 0

    %3:_(s8), %4:_(s1), %5:_(s1), %6:_(s1), %7:_(s1) = G_SBC %0, %1, %2
    G_STORE_ABS %3, 1234
    G_STORE_ABS %4, 1234
    G_STORE_ABS %5, 1234
    G_STORE_ABS %6, 1234
    G_STORE_ABS %7, 1234

    %8:_(s8), %9:_(s1), %10:_(s1), %11:_(s1), %12:_(s1) = G_SBC %1, %0, %2
    G_STORE_ABS %8, 1234
    G_STORE_ABS %9, 1234
    G_STORE_ABS %10, 1234
    G_STORE_ABS %11, 1234
    G_STORE_ABS %12, 1234

    %13:_(s1) = G_CONSTANT i1 1
    %14:_(s8), %15:_(s1), %16:_(s1), %17:_(s1), %18:_(s1) = G_SBC %0, %0, %13
    G_STORE_ABS %14, 1234
    G_STORE_ABS %15, 1234
    G_STORE_ABS %16, 1234
    G_STORE_ABS %17, 1234
    G_STORE_ABS %18, 1234

    %19:_(s8) = G_CONSTANT i8 -128
    %20:_(s8), %21:_(s1), %22:_(s1), %23:_(s1), %24:_(s1) = G_SBC %0, %19, %13
    G_STORE_ABS %20, 1234
    G_STORE_ABS %21, 1234
    G_STORE_ABS %22, 1234
    G_STORE_ABS %23, 1234
    G_STORE_ABS %24, 1234
...
---
name: fold_shift
legalized: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: fold_shift
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: G_STORE_ABS [[C1]](s8), 1234
    ; CHECK-NEXT: G_STORE_ABS [[C2]](s1), 1234
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 -2
    ; CHECK-NEXT: G_STORE_ABS [[C3]](s8), 1234
    ; CHECK-NEXT: G_STORE_ABS [[C]](s1), 1234
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: G_STORE_ABS [[C4]](s8), 1234
    ; CHECK-NEXT: G_STORE_ABS [[C2]](s1), 1234
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s8) = G_CONSTANT i8 127
    ; CHECK-NEXT: G_STORE_ABS [[C5]](s8), 1234
    ; CHECK-NEXT: G_STORE_ABS [[C]](s1), 1234
    %0:_(s8) = G_CONSTANT i8 0
    %1:_(s8) = G_CONSTANT i8 255
    %2:_(s1) = G_CONSTANT i1 0
    %3:_(s1) = G_CONSTANT i1 1

    %4:_(s8), %5:_(s1) = G_SHLE %0, %3
    G_STORE_ABS %4, 1234
    G_STORE_ABS %5, 1234

    %6:_(s8), %7:_(s1) = G_SHLE %1, %0
    G_STORE_ABS %6, 1234
    G_STORE_ABS %7, 1234

    %8:_(s8), %9:_(s1) = G_LSHRE %0, %3
    G_STORE_ABS %8, 1234
    G_STORE_ABS %9, 1234

    %10:_(s8), %11:_(s1) = G_LSHRE %1, %0
    G_STORE_ABS %10, 1234
    G_STORE_ABS %11, 1234
...
---
name: shift_unused_carry_in
legalized: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shift_unused_carry_in
    ; CHECK: [[LOAD_ABS:%[0-9]+]]:_(s8) = G_LOAD_ABS 1234
    ; CHECK-NEXT: [[LOAD_ABS1:%[0-9]+]]:_(s1) = G_LOAD_ABS 1234
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[LOAD_ABS]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 127
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s8) = G_AND [[LSHRE]], [[C1]]
    ; CHECK-NEXT: G_STORE_ABS [[AND]](s8), 1234
    ; CHECK-NEXT: [[SHLE:%[0-9]+]]:_(s8), [[SHLE1:%[0-9]+]]:_(s1) = G_SHLE [[LOAD_ABS]], [[LOAD_ABS1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s8) = G_CONSTANT i8 -2
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s8) = G_AND [[SHLE]], [[C2]]
    ; CHECK-NEXT: G_STORE_ABS [[AND1]](s8), 1234
    ; CHECK-NEXT: [[LSHRE2:%[0-9]+]]:_(s8), [[LSHRE3:%[0-9]+]]:_(s1) = G_LSHRE [[LOAD_ABS]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 -128
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s8) = G_OR [[LSHRE2]], [[C3]]
    ; CHECK-NEXT: G_STORE_ABS [[OR]](s8), 1234
    ; CHECK-NEXT: [[LSHRE4:%[0-9]+]]:_(s8), [[LSHRE5:%[0-9]+]]:_(s1) = G_LSHRE [[LSHRE]], [[C]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s8) = G_CONSTANT i8 63
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s8) = G_AND [[LSHRE4]], [[C4]]
    ; CHECK-NEXT: G_STORE_ABS [[AND2]](s8), 1234
    ; CHECK-NEXT: [[SHLE2:%[0-9]+]]:_(s8), [[SHLE3:%[0-9]+]]:_(s1) = G_SHLE [[SHLE]], [[SHLE1]]
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s8) = G_CONSTANT i8 63
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s8) = G_AND [[SHLE2]], [[C5]]
    ; CHECK-NEXT: G_STORE_ABS [[AND3]](s8), 1234
    %0:_(s8) = G_LOAD_ABS 1234
    %1:_(s1) = G_LOAD_ABS 1234

    %2:_(s8), %3:_(s1) = G_LSHRE %0, %1
    %4:_(s8) = G_CONSTANT i8 127
    %5:_(s8) = G_AND %2, %4
    G_STORE_ABS %5, 1234

    %6:_(s8), %7:_(s1) = G_SHLE %0, %1
    %8:_(s8) = G_CONSTANT i8 254
    %9:_(s8) = G_AND %6, %8
    G_STORE_ABS %9, 1234

    %10:_(s8), %11:_(s1) = G_LSHRE %0, %1
    %12:_(s8) = G_CONSTANT i8 128
    %13:_(s8) = G_OR %10, %12
    G_STORE_ABS %13, 1234

    %14:_(s8), %15:_(s1) = G_LSHRE %2, %3
    %16:_(s8) = G_CONSTANT i8 63
    %17:_(s8) = G_AND %14, %16
    G_STORE_ABS %17, 1234

    %18:_(s8), %19:_(s1) = G_SHLE %6, %7
    %20:_(s8) = G_CONSTANT i8 63
    %21:_(s8) = G_AND %18, %20
    G_STORE_ABS %21, 1234
...
---
name: mul_to_shift
legalized: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: mul_to_shift
    ; CHECK: [[LOAD_ABS:%[0-9]+]]:_(s8) = G_LOAD_ABS 1234
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 2
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s8) = G_SHL [[LOAD_ABS]], [[C]](s8)
    ; CHECK-NEXT: G_STORE_ABS [[SHL]](s8), 1234
    %0:_(s8) = G_LOAD_ABS 1234
    %1:_(s8) = G_CONSTANT i8 4
    %2:_(s8) = G_MUL %0, %1
    G_STORE_ABS %2, 1234
...
---
name: mul_to_shift_and_add
legalized: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: mul_to_shift_and_add
    ; CHECK: [[LOAD_ABS:%[0-9]+]]:_(s8) = G_LOAD_ABS 1234
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 5
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s8) = G_SHL [[LOAD_ABS]], [[C]](s8)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 3
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s8) = G_SHL [[LOAD_ABS]], [[C1]](s8)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s8) = G_ADD [[SHL]], [[SHL1]]
    ; CHECK-NEXT: G_STORE_ABS [[ADD]](s8), 1234
    %0:_(s8) = G_LOAD_ABS 1234
    %1:_(s8) = G_CONSTANT i8 40
    %2:_(s8) = G_MUL %0, %1
    G_STORE_ABS %2, 1234
