# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=mos -run-pass=mos-combiner -verify-machineinstrs -o - %s | FileCheck %s
---
name: fold_global_offset
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: fold_global_offset
    ; CHECK: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @fold_global_offset + 42
    ; CHECK-NEXT: RTS implicit [[GV]](p0)
    %0:_(p0) = G_GLOBAL_VALUE @fold_global_offset
    %1:_(s16) = G_CONSTANT i16 42
    %2:_(p0) = G_PTR_ADD %0, %1
    RTS implicit %2
...
---
name: sbc_literal_eq
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: sbc_literal_eq
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: RTS implicit [[C1]](s8), implicit [[C2]](s1), implicit [[C2]](s1), implicit [[C2]](s1), implicit [[C2]](s1), implicit [[C]](s1)
    %0:_(s8) = COPY $a
    %1:_(s1) = G_CONSTANT i1 -1
    %2:_(s8), %3:_(s1), %4:_(s1), %5:_(s1), %6:_(s1) = G_SBC %0, %0, %1
    RTS implicit %2, implicit %3, implicit %4, implicit %4, implicit %5, implicit %6
...
---
name: extract_low_bit_using_earlier_shift_8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bit_using_earlier_shift_8
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[C]]
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: RTS implicit [[LSHRE]](s8), implicit [[LSHRE1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    $x = COPY $y
    %3:_(s1) = G_TRUNC %0
    RTS implicit %2, implicit %3
...
---
name: extract_low_bit_using_earlier_shift_16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bit_using_earlier_shift_16
    ; CHECK: [[COPY:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](s16)
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[UV1]], [[C]]
    ; CHECK-NEXT: [[LSHRE2:%[0-9]+]]:_(s8), [[LSHRE3:%[0-9]+]]:_(s1) = G_LSHRE [[UV]], [[LSHRE1]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[LSHRE2]](s8), [[LSHRE]](s8)
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: RTS implicit [[MV]](s16), implicit [[LSHRE3]](s1)
    %0:_(s16) = COPY $rs1
    %1:_(s16) = G_CONSTANT i16 1
    %2:_(s16) = G_LSHR %0, %1
    $x = COPY $y
    %3:_(s1) = G_TRUNC %0
    RTS implicit %2, implicit %3
...
---
name: extract_low_bit_using_later_shift
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bit_using_later_shift
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[C]]
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: RTS implicit [[LSHRE1]](s1), implicit [[LSHRE]](s8)
    %0:_(s8) = COPY $a
    %1:_(s1) = G_TRUNC %0
    $x = COPY $y
    %2:_(s8) = G_CONSTANT i8 1
    %3:_(s8) = G_LSHR %0, %2
    RTS implicit %1, implicit %3
...
---
name: extract_low_bit_and
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bit_and
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[C]]
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: RTS implicit [[LSHRE]](s8), implicit [[LSHRE1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    $x = COPY $y
    %4:_(s8) = G_AND %0, %1
    %5:_(s8) = G_CONSTANT i8 0
    %6:_(s1) = G_ICMP intpred(ne), %4, %5
    RTS implicit %2, implicit %6
...

---
name: extract_not_low_bit_and_using_earlier_shift
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_not_low_bit_and_using_earlier_shift
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s1) = G_XOR [[LSHRE1]], [[C1]]
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: RTS implicit [[LSHRE]](s8), implicit [[XOR]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    $x = COPY $y
    %4:_(s8) = G_AND %0, %1
    %5:_(s8) = G_CONSTANT i8 0
    %6:_(s1) = G_ICMP intpred(eq), %4, %5
    RTS implicit %2, implicit %6
...
---
name: extract_not_low_bit_and_using_later_shift
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_not_low_bit_and_using_later_shift
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK-NEXT: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s1) = G_XOR [[LSHRE1]], [[C1]]
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: RTS implicit [[XOR]](s1), implicit [[LSHRE]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_AND %0, %1
    %3:_(s8) = G_CONSTANT i8 0
    %4:_(s1) = G_ICMP intpred(eq), %2, %3
    $x = COPY $y
    %5:_(s8) = G_LSHR %0, %1
    RTS implicit %4, implicit %5
...
---
name: extract_low_bits
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: extract_low_bits
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s8) = G_LSHR [[COPY]], [[C]](s8)
    ; CHECK-NEXT: $x = COPY $y
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s2) = G_TRUNC [[COPY]](s8)
    ; CHECK-NEXT: RTS implicit [[LSHR]](s8), implicit [[TRUNC]](s2)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_LSHR %0, %1
    $x = COPY $y
    %3:_(s2) = G_TRUNC %0
    RTS implicit %2, implicit %3
...
---
name: uaddo_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: uaddo_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s8) = G_ADD [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s1) = G_ICMP intpred(eq), [[ADD]](s8), [[C1]]
    ; CHECK-NEXT: RTS implicit [[ADD]](s8), implicit [[ICMP]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8), %3:_(s1) = G_UADDO %0, %1
    RTS implicit %2, implicit %3
...
---
name: cmpz_0
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: cmpz_0
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK-NEXT: [[CMPZ:%[0-9]+]]:_(s1) = G_CMPZ [[COPY]](s8)
    ; CHECK-NEXT: RTS implicit [[CMPZ]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 0
    %2:_(s8) = G_CONSTANT i8 0
    %3:_(s1) = G_CMPZ %0, %1, %2
    RTS implicit %3
...
