# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=mos -run-pass=prologepilog -verify-machineinstrs -o - %s | FileCheck %s -check-prefixes=6502
# RUN: llc -mtriple=mos -mcpu=mos65c02 -run-pass=prologepilog -verify-machineinstrs -o - %s | FileCheck %s -check-prefixes=65C02
--- |
  target datalayout = "e-p:16:8:8-p1:8:8-i16:8:8-i32:8:8-i64:8:8-f32:8:8-f64:8:8-a:8:8-Fi8-n8"
  target triple = "mos"

  define void @nonreentrant() "nonreentrant" {
  entry:
    ret void
  }

  define void @nonreentrant_variable_sized() "nonreentrant" {
  entry:
    ret void
  }

  define void @interrupt_axy() "interrupt" {
  entry:
    ret void
  }

  define void @interrupt_x() "interrupt" {
  entry:
    ret void
  }

  define void @interrupt_csr() "interrupt" {
  entry:
    ret void
  }

  define void @interrupt_csrs_save_y() "interrupt" {
  entry:
    ret void
  }

  define void @interrupt_caller() "interrupt" {
  entry:
    ret void
  }
---
name: nonreentrant
stack:
  - { id: 0, size: 1}
  - { id: 1, size: 1}
body:             |
  bb.0.entry:
    ; 6502-LABEL: name: nonreentrant
    ; 6502: PH $a
    ; 6502-NEXT: $c = LDCImm 0
    ; 6502-NEXT: $a = COPY $rc0
    ; 6502-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; 6502-NEXT: $rc0 = COPY killed $a
    ; 6502-NEXT: $a = COPY $rc1
    ; 6502-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; 6502-NEXT: $rc1 = COPY killed $a
    ; 6502-NEXT: $a = PL
    ; 6502-NEXT: STAbs $a, target-index(mos-static-stack) :: (store (s8) into %stack.0)
    ; 6502-NEXT: $a = LDAbs target-index(mos-static-stack) + 1 :: (load (s8) from %stack.1)
    ; 6502-NEXT: $c = LDCImm 0
    ; 6502-NEXT: $a = COPY $rc0
    ; 6502-NEXT: $a, $c, $v = ADCImm $a, 2, $c
    ; 6502-NEXT: $rc0 = COPY killed $a
    ; 6502-NEXT: $a = COPY $rc1
    ; 6502-NEXT: $a, $c, $v = ADCImm $a, 0, $c
    ; 6502-NEXT: $rc1 = COPY killed $a
    ; 6502-NEXT: RTS
    ; 65C02-LABEL: name: nonreentrant
    ; 65C02: PH $a
    ; 65C02-NEXT: $c = LDCImm 0
    ; 65C02-NEXT: $a = COPY $rc0
    ; 65C02-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; 65C02-NEXT: $rc0 = COPY killed $a
    ; 65C02-NEXT: $a = COPY $rc1
    ; 65C02-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; 65C02-NEXT: $rc1 = COPY killed $a
    ; 65C02-NEXT: $a = PL
    ; 65C02-NEXT: STAbs $a, target-index(mos-static-stack) :: (store (s8) into %stack.0)
    ; 65C02-NEXT: $a = LDAbs target-index(mos-static-stack) + 1 :: (load (s8) from %stack.1)
    ; 65C02-NEXT: $c = LDCImm 0
    ; 65C02-NEXT: $a = COPY $rc0
    ; 65C02-NEXT: $a, $c, $v = ADCImm $a, 2, $c
    ; 65C02-NEXT: $rc0 = COPY killed $a
    ; 65C02-NEXT: $a = COPY $rc1
    ; 65C02-NEXT: $a, $c, $v = ADCImm $a, 0, $c
    ; 65C02-NEXT: $rc1 = COPY killed $a
    ; 65C02-NEXT: RTS
    STAbs $a, %stack.0 :: (store 1 into %stack.0)
    $a = LDAbs %stack.1 :: (load 1 from %stack.1)
    ADJCALLSTACKDOWN 1, 0, implicit-def $rs0, implicit $rs0
    ADJCALLSTACKUP 1, 0, implicit-def $rs0, implicit $rs0
    ADJCALLSTACKDOWN 2, 0, implicit-def $rs0, implicit $rs0
    ADJCALLSTACKUP 2, 0, implicit-def $rs0, implicit $rs0
    RTS
...
---
name: nonreentrant_variable_sized
stack:
  - { id: 0, type: variable-sized }
  - { id: 1, size: 1 }
  - { id: 2, size: 2 }
body: |
  bb.0.entry:
    ; 6502-LABEL: name: nonreentrant_variable_sized
    ; 6502: $a = frame-setup COPY $rc30
    ; 6502-NEXT: frame-setup PH killed $a
    ; 6502-NEXT: $a = frame-setup COPY $rc31
    ; 6502-NEXT: frame-setup PH killed $a
    ; 6502-NEXT: $rs15 = COPY $rs0
    ; 6502-NEXT: $a = LDAbs target-index(mos-static-stack) + 2 :: (load (s8) from %stack.2 + 1)
    ; 6502-NEXT: $rs0 = COPY $rs15
    ; 6502-NEXT: $a = frame-destroy PL
    ; 6502-NEXT: $rc31 = frame-destroy COPY killed $a
    ; 6502-NEXT: $a = frame-destroy PL
    ; 6502-NEXT: $rc30 = frame-destroy COPY killed $a
    ; 6502-NEXT: RTS implicit $rc30, implicit $rc31
    ; 65C02-LABEL: name: nonreentrant_variable_sized
    ; 65C02: $x = frame-setup COPY $rc30
    ; 65C02-NEXT: frame-setup PH killed $x
    ; 65C02-NEXT: $x = frame-setup COPY $rc31
    ; 65C02-NEXT: frame-setup PH killed $x
    ; 65C02-NEXT: $rs15 = COPY $rs0
    ; 65C02-NEXT: $a = LDAbs target-index(mos-static-stack) + 2 :: (load (s8) from %stack.2 + 1)
    ; 65C02-NEXT: $rs0 = COPY $rs15
    ; 65C02-NEXT: $x = frame-destroy PL
    ; 65C02-NEXT: $rc31 = frame-destroy COPY killed $x
    ; 65C02-NEXT: $x = frame-destroy PL
    ; 65C02-NEXT: $rc30 = frame-destroy COPY killed $x
    ; 65C02-NEXT: RTS implicit $rc30, implicit $rc31
    $a = LDAbs %stack.2 + 1 :: (load 1 from %stack.2 + 1)
    RTS
...
---
name: interrupt_axy
body: |
  bb.0.entry:
    ; 6502-LABEL: name: interrupt_axy
    ; 6502: liveins: $a, $x, $y
    ; 6502-NEXT: {{  $}}
    ; 6502-NEXT: CLD_Implied
    ; 6502-NEXT: PH $a
    ; 6502-NEXT: $c = LDCImm 0
    ; 6502-NEXT: $a = COPY $rc0
    ; 6502-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; 6502-NEXT: $rc0 = COPY killed $a
    ; 6502-NEXT: $a = COPY $rc1
    ; 6502-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; 6502-NEXT: $rc1 = COPY killed $a
    ; 6502-NEXT: $a = PL
    ; 6502-NEXT: frame-setup PH $a
    ; 6502-NEXT: $a = frame-setup COPY $x
    ; 6502-NEXT: frame-setup PH killed $a
    ; 6502-NEXT: $a = frame-setup COPY $y
    ; 6502-NEXT: frame-setup PH killed $a
    ; 6502-NEXT: $a = frame-setup COPY $rc16
    ; 6502-NEXT: frame-setup PH killed $a
    ; 6502-NEXT: $a = COPY $rc17
    ; 6502-NEXT: $y = LDImm 0
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.0)
    ; 6502-NEXT: $x = LDImm 42
    ; 6502-NEXT: $a = LDImm 43
    ; 6502-NEXT: $y = LDImm 44
    ; 6502-NEXT: $y = LDImm 0
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.0)
    ; 6502-NEXT: $rc17 = COPY killed $a
    ; 6502-NEXT: $a = frame-destroy PL
    ; 6502-NEXT: $rc16 = frame-destroy COPY killed $a
    ; 6502-NEXT: $a = frame-destroy PL
    ; 6502-NEXT: $y = frame-destroy COPY killed $a
    ; 6502-NEXT: $a = frame-destroy PL
    ; 6502-NEXT: $x = frame-destroy COPY killed $a
    ; 6502-NEXT: $a = frame-destroy PL
    ; 6502-NEXT: PH $a
    ; 6502-NEXT: $c = LDCImm 0
    ; 6502-NEXT: $a = COPY $rc0
    ; 6502-NEXT: $a, $c, $v = ADCImm $a, 1, $c
    ; 6502-NEXT: $rc0 = COPY killed $a
    ; 6502-NEXT: $a = COPY $rc1
    ; 6502-NEXT: $a, $c, $v = ADCImm $a, 1, $c
    ; 6502-NEXT: $rc1 = COPY killed $a
    ; 6502-NEXT: $a = PL
    ; 6502-NEXT: RTI implicit $a, implicit $x, implicit $y, implicit $rc16, implicit $rc17
    ; 65C02-LABEL: name: interrupt_axy
    ; 65C02: liveins: $a, $x, $y
    ; 65C02-NEXT: {{  $}}
    ; 65C02-NEXT: CLD_Implied
    ; 65C02-NEXT: PH $a
    ; 65C02-NEXT: $c = LDCImm 0
    ; 65C02-NEXT: $a = COPY $rc0
    ; 65C02-NEXT: $a, $c, $v = ADCImm $a, 255, $c
    ; 65C02-NEXT: $rc0 = COPY killed $a
    ; 65C02-NEXT: $a = COPY $rc1
    ; 65C02-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; 65C02-NEXT: $rc1 = COPY killed $a
    ; 65C02-NEXT: $a = PL
    ; 65C02-NEXT: frame-setup PH $a
    ; 65C02-NEXT: frame-setup PH $x
    ; 65C02-NEXT: frame-setup PH $y
    ; 65C02-NEXT: $x = frame-setup COPY $rc16
    ; 65C02-NEXT: frame-setup PH killed $x
    ; 65C02-NEXT: $a = COPY $rc17
    ; 65C02-NEXT: $y = LDImm 0
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.0)
    ; 65C02-NEXT: $x = LDImm 42
    ; 65C02-NEXT: $a = LDImm 43
    ; 65C02-NEXT: $y = LDImm 44
    ; 65C02-NEXT: $y = LDImm 0
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.0)
    ; 65C02-NEXT: $rc17 = COPY killed $a
    ; 65C02-NEXT: $x = frame-destroy PL
    ; 65C02-NEXT: $rc16 = frame-destroy COPY killed $x
    ; 65C02-NEXT: $y = frame-destroy PL
    ; 65C02-NEXT: $x = frame-destroy PL
    ; 65C02-NEXT: $a = frame-destroy PL
    ; 65C02-NEXT: PH $a
    ; 65C02-NEXT: $c = LDCImm 0
    ; 65C02-NEXT: $a = COPY $rc0
    ; 65C02-NEXT: $a, $c, $v = ADCImm $a, 1, $c
    ; 65C02-NEXT: $rc0 = COPY killed $a
    ; 65C02-NEXT: $a = COPY $rc1
    ; 65C02-NEXT: $a, $c, $v = ADCImm $a, 1, $c
    ; 65C02-NEXT: $rc1 = COPY killed $a
    ; 65C02-NEXT: $a = PL
    ; 65C02-NEXT: RTI implicit $a, implicit $x, implicit $y, implicit $rc16, implicit $rc17
    CLD_Implied
    $x = LDImm 42
    $a = LDImm 43
    $y = LDImm 44
    RTI
...
---
name: interrupt_x
tracksRegLiveness: true
body: |
  ; 6502-LABEL: name: interrupt_x
  ; 6502: bb.0.entry:
  ; 6502-NEXT:   successors: %bb.1(0x80000000)
  ; 6502-NEXT:   liveins: $a, $x, $y
  ; 6502-NEXT: {{  $}}
  ; 6502-NEXT:   CLD_Implied
  ; 6502-NEXT:   PH $a
  ; 6502-NEXT:   $c = LDCImm 0
  ; 6502-NEXT:   $a = COPY $rc0
  ; 6502-NEXT:   $a, $c, $v = ADCImm $a, 255, $c
  ; 6502-NEXT:   $rc0 = COPY killed $a
  ; 6502-NEXT:   $a = COPY $rc1
  ; 6502-NEXT:   $a, $c, $v = ADCImm $a, 254, $c
  ; 6502-NEXT:   $rc1 = COPY killed $a
  ; 6502-NEXT:   $a = PL
  ; 6502-NEXT:   frame-setup PH $a
  ; 6502-NEXT:   $a = frame-setup COPY $x
  ; 6502-NEXT:   frame-setup PH killed $a
  ; 6502-NEXT:   $a = frame-setup COPY $y
  ; 6502-NEXT:   frame-setup PH killed $a
  ; 6502-NEXT:   $a = frame-setup COPY $rc16
  ; 6502-NEXT:   frame-setup PH killed $a
  ; 6502-NEXT:   $a = COPY $rc17
  ; 6502-NEXT:   $y = LDImm 0
  ; 6502-NEXT:   STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.0)
  ; 6502-NEXT: {{  $}}
  ; 6502-NEXT: bb.1.entry:
  ; 6502-NEXT:   $x = LDImm 42
  ; 6502-NEXT:   $y = LDImm 0
  ; 6502-NEXT:   $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.0)
  ; 6502-NEXT:   $rc17 = COPY killed $a
  ; 6502-NEXT:   $a = frame-destroy PL
  ; 6502-NEXT:   $rc16 = frame-destroy COPY killed $a
  ; 6502-NEXT:   $a = frame-destroy PL
  ; 6502-NEXT:   $y = frame-destroy COPY killed $a
  ; 6502-NEXT:   $a = frame-destroy PL
  ; 6502-NEXT:   $x = frame-destroy COPY killed $a
  ; 6502-NEXT:   $a = frame-destroy PL
  ; 6502-NEXT:   PH $a
  ; 6502-NEXT:   $c = LDCImm 0
  ; 6502-NEXT:   $a = COPY $rc0
  ; 6502-NEXT:   $a, $c, $v = ADCImm $a, 1, $c
  ; 6502-NEXT:   $rc0 = COPY killed $a
  ; 6502-NEXT:   $a = COPY $rc1
  ; 6502-NEXT:   $a, $c, $v = ADCImm $a, 1, $c
  ; 6502-NEXT:   $rc1 = COPY killed $a
  ; 6502-NEXT:   $a = PL
  ; 6502-NEXT:   RTI implicit $a, implicit $x, implicit $y, implicit $rc16, implicit $rc17
  ; 65C02-LABEL: name: interrupt_x
  ; 65C02: bb.0.entry:
  ; 65C02-NEXT:   successors: %bb.1(0x80000000)
  ; 65C02-NEXT:   liveins: $a, $x, $y
  ; 65C02-NEXT: {{  $}}
  ; 65C02-NEXT:   CLD_Implied
  ; 65C02-NEXT:   PH $a
  ; 65C02-NEXT:   $c = LDCImm 0
  ; 65C02-NEXT:   $a = COPY $rc0
  ; 65C02-NEXT:   $a, $c, $v = ADCImm $a, 255, $c
  ; 65C02-NEXT:   $rc0 = COPY killed $a
  ; 65C02-NEXT:   $a = COPY $rc1
  ; 65C02-NEXT:   $a, $c, $v = ADCImm $a, 254, $c
  ; 65C02-NEXT:   $rc1 = COPY killed $a
  ; 65C02-NEXT:   $a = PL
  ; 65C02-NEXT:   frame-setup PH $a
  ; 65C02-NEXT:   frame-setup PH $x
  ; 65C02-NEXT:   frame-setup PH $y
  ; 65C02-NEXT:   $x = frame-setup COPY $rc16
  ; 65C02-NEXT:   frame-setup PH killed $x
  ; 65C02-NEXT:   $a = COPY $rc17
  ; 65C02-NEXT:   $y = LDImm 0
  ; 65C02-NEXT:   STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.0)
  ; 65C02-NEXT: {{  $}}
  ; 65C02-NEXT: bb.1.entry:
  ; 65C02-NEXT:   $x = LDImm 42
  ; 65C02-NEXT:   $y = LDImm 0
  ; 65C02-NEXT:   $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.0)
  ; 65C02-NEXT:   $rc17 = COPY killed $a
  ; 65C02-NEXT:   $x = frame-destroy PL
  ; 65C02-NEXT:   $rc16 = frame-destroy COPY killed $x
  ; 65C02-NEXT:   $y = frame-destroy PL
  ; 65C02-NEXT:   $x = frame-destroy PL
  ; 65C02-NEXT:   $a = frame-destroy PL
  ; 65C02-NEXT:   PH $a
  ; 65C02-NEXT:   $c = LDCImm 0
  ; 65C02-NEXT:   $a = COPY $rc0
  ; 65C02-NEXT:   $a, $c, $v = ADCImm $a, 1, $c
  ; 65C02-NEXT:   $rc0 = COPY killed $a
  ; 65C02-NEXT:   $a = COPY $rc1
  ; 65C02-NEXT:   $a, $c, $v = ADCImm $a, 1, $c
  ; 65C02-NEXT:   $rc1 = COPY killed $a
  ; 65C02-NEXT:   $a = PL
  ; 65C02-NEXT:   RTI implicit $a, implicit $x, implicit $y, implicit $rc16, implicit $rc17
  bb.0.entry:
    CLD_Implied
  bb.1.entry:
    $x = LDImm 42
    RTI
...
---
name: interrupt_csr
tracksRegLiveness: true
body: |
  ; 6502-LABEL: name: interrupt_csr
  ; 6502: bb.0.entry:
  ; 6502-NEXT:   successors: %bb.1(0x80000000)
  ; 6502-NEXT:   liveins: $a, $y, $rc30, $rc31
  ; 6502-NEXT: {{  $}}
  ; 6502-NEXT:   CLD_Implied
  ; 6502-NEXT:   PH $a
  ; 6502-NEXT:   $c = LDCImm 0
  ; 6502-NEXT:   $a = COPY $rc0
  ; 6502-NEXT:   $a, $c, $v = ADCImm $a, 254, $c
  ; 6502-NEXT:   $rc0 = COPY killed $a
  ; 6502-NEXT:   $a = COPY $rc1
  ; 6502-NEXT:   $a, $c, $v = ADCImm $a, 254, $c
  ; 6502-NEXT:   $rc1 = COPY killed $a
  ; 6502-NEXT:   $a = PL
  ; 6502-NEXT:   frame-setup PH $a
  ; 6502-NEXT:   $a = frame-setup COPY $y
  ; 6502-NEXT:   frame-setup PH killed $a
  ; 6502-NEXT:   $a = frame-setup COPY $rc16
  ; 6502-NEXT:   frame-setup PH killed $a
  ; 6502-NEXT:   $a = frame-setup COPY $rc17
  ; 6502-NEXT:   frame-setup PH killed $a
  ; 6502-NEXT:   $a = COPY $rc30
  ; 6502-NEXT:   $y = LDImm 1
  ; 6502-NEXT:   STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.0)
  ; 6502-NEXT:   $a = COPY $rc31
  ; 6502-NEXT:   $y = LDImm 0
  ; 6502-NEXT:   STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.1)
  ; 6502-NEXT: {{  $}}
  ; 6502-NEXT: bb.1.entry:
  ; 6502-NEXT:   $rs15 = IMPLICIT_DEF
  ; 6502-NEXT:   $y = LDImm 0
  ; 6502-NEXT:   $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.1)
  ; 6502-NEXT:   $rc31 = COPY killed $a
  ; 6502-NEXT:   $y = LDImm 1
  ; 6502-NEXT:   $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.0)
  ; 6502-NEXT:   $rc30 = COPY killed $a
  ; 6502-NEXT:   $a = frame-destroy PL
  ; 6502-NEXT:   $rc17 = frame-destroy COPY killed $a
  ; 6502-NEXT:   $a = frame-destroy PL
  ; 6502-NEXT:   $rc16 = frame-destroy COPY killed $a
  ; 6502-NEXT:   $a = frame-destroy PL
  ; 6502-NEXT:   $y = frame-destroy COPY killed $a
  ; 6502-NEXT:   $a = frame-destroy PL
  ; 6502-NEXT:   PH $a
  ; 6502-NEXT:   $c = LDCImm 0
  ; 6502-NEXT:   $a = COPY $rc0
  ; 6502-NEXT:   $a, $c, $v = ADCImm $a, 2, $c
  ; 6502-NEXT:   $rc0 = COPY killed $a
  ; 6502-NEXT:   $a = COPY $rc1
  ; 6502-NEXT:   $a, $c, $v = ADCImm $a, 1, $c
  ; 6502-NEXT:   $rc1 = COPY killed $a
  ; 6502-NEXT:   $a = PL
  ; 6502-NEXT:   RTI implicit $a, implicit $y, implicit $rc16, implicit $rc17, implicit $rc30, implicit $rc31
  ; 65C02-LABEL: name: interrupt_csr
  ; 65C02: bb.0.entry:
  ; 65C02-NEXT:   successors: %bb.1(0x80000000)
  ; 65C02-NEXT:   liveins: $a, $y, $rc30, $rc31
  ; 65C02-NEXT: {{  $}}
  ; 65C02-NEXT:   CLD_Implied
  ; 65C02-NEXT:   PH $a
  ; 65C02-NEXT:   $c = LDCImm 0
  ; 65C02-NEXT:   $a = COPY $rc0
  ; 65C02-NEXT:   $a, $c, $v = ADCImm $a, 254, $c
  ; 65C02-NEXT:   $rc0 = COPY killed $a
  ; 65C02-NEXT:   $a = COPY $rc1
  ; 65C02-NEXT:   $a, $c, $v = ADCImm $a, 254, $c
  ; 65C02-NEXT:   $rc1 = COPY killed $a
  ; 65C02-NEXT:   $a = PL
  ; 65C02-NEXT:   frame-setup PH $a
  ; 65C02-NEXT:   frame-setup PH $y
  ; 65C02-NEXT:   $y = frame-setup COPY $rc16
  ; 65C02-NEXT:   frame-setup PH killed $y
  ; 65C02-NEXT:   $y = frame-setup COPY $rc17
  ; 65C02-NEXT:   frame-setup PH killed $y
  ; 65C02-NEXT:   $a = COPY $rc30
  ; 65C02-NEXT:   $y = LDImm 1
  ; 65C02-NEXT:   STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.0)
  ; 65C02-NEXT:   $a = COPY $rc31
  ; 65C02-NEXT:   $y = LDImm 0
  ; 65C02-NEXT:   STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.1)
  ; 65C02-NEXT: {{  $}}
  ; 65C02-NEXT: bb.1.entry:
  ; 65C02-NEXT:   $rs15 = IMPLICIT_DEF
  ; 65C02-NEXT:   $y = LDImm 0
  ; 65C02-NEXT:   $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.1)
  ; 65C02-NEXT:   $rc31 = COPY killed $a
  ; 65C02-NEXT:   $y = LDImm 1
  ; 65C02-NEXT:   $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.0)
  ; 65C02-NEXT:   $rc30 = COPY killed $a
  ; 65C02-NEXT:   $y = frame-destroy PL
  ; 65C02-NEXT:   $rc17 = frame-destroy COPY killed $y
  ; 65C02-NEXT:   $y = frame-destroy PL
  ; 65C02-NEXT:   $rc16 = frame-destroy COPY killed $y
  ; 65C02-NEXT:   $y = frame-destroy PL
  ; 65C02-NEXT:   $a = frame-destroy PL
  ; 65C02-NEXT:   PH $a
  ; 65C02-NEXT:   $c = LDCImm 0
  ; 65C02-NEXT:   $a = COPY $rc0
  ; 65C02-NEXT:   $a, $c, $v = ADCImm $a, 2, $c
  ; 65C02-NEXT:   $rc0 = COPY killed $a
  ; 65C02-NEXT:   $a = COPY $rc1
  ; 65C02-NEXT:   $a, $c, $v = ADCImm $a, 1, $c
  ; 65C02-NEXT:   $rc1 = COPY killed $a
  ; 65C02-NEXT:   $a = PL
  ; 65C02-NEXT:   RTI implicit $a, implicit $y, implicit $rc16, implicit $rc17, implicit $rc30, implicit $rc31
  bb.0.entry:
    CLD_Implied
  bb.1.entry:
    $rs15 = IMPLICIT_DEF
    RTI
...
---
name: interrupt_csrs_save_y
tracksRegLiveness: true
body: |
  ; 6502-LABEL: name: interrupt_csrs_save_y
  ; 6502: bb.0.entry:
  ; 6502-NEXT:   successors: %bb.1(0x80000000)
  ; 6502-NEXT:   liveins: $a, $y, $rc30, $rc31
  ; 6502-NEXT: {{  $}}
  ; 6502-NEXT:   CLD_Implied
  ; 6502-NEXT:   PH $a
  ; 6502-NEXT:   $c = LDCImm 0
  ; 6502-NEXT:   $a = COPY $rc0
  ; 6502-NEXT:   $a, $c, $v = ADCImm $a, 254, $c
  ; 6502-NEXT:   $rc0 = COPY killed $a
  ; 6502-NEXT:   $a = COPY $rc1
  ; 6502-NEXT:   $a, $c, $v = ADCImm $a, 254, $c
  ; 6502-NEXT:   $rc1 = COPY killed $a
  ; 6502-NEXT:   $a = PL
  ; 6502-NEXT:   frame-setup PH $a
  ; 6502-NEXT:   $a = frame-setup COPY $y
  ; 6502-NEXT:   frame-setup PH killed $a
  ; 6502-NEXT:   $a = frame-setup COPY $rc16
  ; 6502-NEXT:   frame-setup PH killed $a
  ; 6502-NEXT:   $a = frame-setup COPY $rc17
  ; 6502-NEXT:   frame-setup PH killed $a
  ; 6502-NEXT:   $a = COPY $rc30
  ; 6502-NEXT:   $y = LDImm 1
  ; 6502-NEXT:   STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.0)
  ; 6502-NEXT:   $a = COPY $rc31
  ; 6502-NEXT:   $y = LDImm 0
  ; 6502-NEXT:   STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.1)
  ; 6502-NEXT: {{  $}}
  ; 6502-NEXT: bb.1.entry:
  ; 6502-NEXT:   $rs15 = IMPLICIT_DEF
  ; 6502-NEXT:   $rs16 = IMPLICIT_DEF
  ; 6502-NEXT:   $rs17 = IMPLICIT_DEF
  ; 6502-NEXT:   $y = LDImm 0
  ; 6502-NEXT:   $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.1)
  ; 6502-NEXT:   $rc31 = COPY killed $a
  ; 6502-NEXT:   $y = LDImm 1
  ; 6502-NEXT:   $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.0)
  ; 6502-NEXT:   $rc30 = COPY killed $a
  ; 6502-NEXT:   $a = frame-destroy PL
  ; 6502-NEXT:   $rc17 = frame-destroy COPY killed $a
  ; 6502-NEXT:   $a = frame-destroy PL
  ; 6502-NEXT:   $rc16 = frame-destroy COPY killed $a
  ; 6502-NEXT:   $a = frame-destroy PL
  ; 6502-NEXT:   $y = frame-destroy COPY killed $a
  ; 6502-NEXT:   $a = frame-destroy PL
  ; 6502-NEXT:   PH $a
  ; 6502-NEXT:   $c = LDCImm 0
  ; 6502-NEXT:   $a = COPY $rc0
  ; 6502-NEXT:   $a, $c, $v = ADCImm $a, 2, $c
  ; 6502-NEXT:   $rc0 = COPY killed $a
  ; 6502-NEXT:   $a = COPY $rc1
  ; 6502-NEXT:   $a, $c, $v = ADCImm $a, 1, $c
  ; 6502-NEXT:   $rc1 = COPY killed $a
  ; 6502-NEXT:   $a = PL
  ; 6502-NEXT:   RTI implicit $a, implicit $y, implicit $rc16, implicit $rc17, implicit $rc30, implicit $rc31
  ; 65C02-LABEL: name: interrupt_csrs_save_y
  ; 65C02: bb.0.entry:
  ; 65C02-NEXT:   successors: %bb.1(0x80000000)
  ; 65C02-NEXT:   liveins: $a, $y, $rc30, $rc31
  ; 65C02-NEXT: {{  $}}
  ; 65C02-NEXT:   CLD_Implied
  ; 65C02-NEXT:   PH $a
  ; 65C02-NEXT:   $c = LDCImm 0
  ; 65C02-NEXT:   $a = COPY $rc0
  ; 65C02-NEXT:   $a, $c, $v = ADCImm $a, 254, $c
  ; 65C02-NEXT:   $rc0 = COPY killed $a
  ; 65C02-NEXT:   $a = COPY $rc1
  ; 65C02-NEXT:   $a, $c, $v = ADCImm $a, 254, $c
  ; 65C02-NEXT:   $rc1 = COPY killed $a
  ; 65C02-NEXT:   $a = PL
  ; 65C02-NEXT:   frame-setup PH $a
  ; 65C02-NEXT:   frame-setup PH $y
  ; 65C02-NEXT:   $y = frame-setup COPY $rc16
  ; 65C02-NEXT:   frame-setup PH killed $y
  ; 65C02-NEXT:   $y = frame-setup COPY $rc17
  ; 65C02-NEXT:   frame-setup PH killed $y
  ; 65C02-NEXT:   $a = COPY $rc30
  ; 65C02-NEXT:   $y = LDImm 1
  ; 65C02-NEXT:   STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.0)
  ; 65C02-NEXT:   $a = COPY $rc31
  ; 65C02-NEXT:   $y = LDImm 0
  ; 65C02-NEXT:   STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.1)
  ; 65C02-NEXT: {{  $}}
  ; 65C02-NEXT: bb.1.entry:
  ; 65C02-NEXT:   $rs15 = IMPLICIT_DEF
  ; 65C02-NEXT:   $rs16 = IMPLICIT_DEF
  ; 65C02-NEXT:   $rs17 = IMPLICIT_DEF
  ; 65C02-NEXT:   $y = LDImm 0
  ; 65C02-NEXT:   $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.1)
  ; 65C02-NEXT:   $rc31 = COPY killed $a
  ; 65C02-NEXT:   $y = LDImm 1
  ; 65C02-NEXT:   $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.0)
  ; 65C02-NEXT:   $rc30 = COPY killed $a
  ; 65C02-NEXT:   $y = frame-destroy PL
  ; 65C02-NEXT:   $rc17 = frame-destroy COPY killed $y
  ; 65C02-NEXT:   $y = frame-destroy PL
  ; 65C02-NEXT:   $rc16 = frame-destroy COPY killed $y
  ; 65C02-NEXT:   $y = frame-destroy PL
  ; 65C02-NEXT:   $a = frame-destroy PL
  ; 65C02-NEXT:   PH $a
  ; 65C02-NEXT:   $c = LDCImm 0
  ; 65C02-NEXT:   $a = COPY $rc0
  ; 65C02-NEXT:   $a, $c, $v = ADCImm $a, 2, $c
  ; 65C02-NEXT:   $rc0 = COPY killed $a
  ; 65C02-NEXT:   $a = COPY $rc1
  ; 65C02-NEXT:   $a, $c, $v = ADCImm $a, 1, $c
  ; 65C02-NEXT:   $rc1 = COPY killed $a
  ; 65C02-NEXT:   $a = PL
  ; 65C02-NEXT:   RTI implicit $a, implicit $y, implicit $rc16, implicit $rc17, implicit $rc30, implicit $rc31
  bb.0.entry:
    CLD_Implied
  bb.1.entry:
    $rs15 = IMPLICIT_DEF
    $rs16 = IMPLICIT_DEF
    $rs17 = IMPLICIT_DEF
    RTI
...
---
name: interrupt_caller
body: |
  bb.0.entry:
    ; 6502-LABEL: name: interrupt_caller
    ; 6502: liveins: $a, $x, $y, $rc2, $rc3, $rc4, $rc5, $rc6, $rc7, $rc8, $rc9, $rc10, $rc11, $rc12, $rc13, $rc14, $rc15, $rc18, $rc19
    ; 6502-NEXT: {{  $}}
    ; 6502-NEXT: CLD_Implied
    ; 6502-NEXT: PH $a
    ; 6502-NEXT: $c = LDCImm 0
    ; 6502-NEXT: $a = COPY $rc0
    ; 6502-NEXT: $a, $c, $v = ADCImm $a, 239, $c
    ; 6502-NEXT: $rc0 = COPY killed $a
    ; 6502-NEXT: $a = COPY $rc1
    ; 6502-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; 6502-NEXT: $rc1 = COPY killed $a
    ; 6502-NEXT: $a = PL
    ; 6502-NEXT: frame-setup PH $a
    ; 6502-NEXT: $a = frame-setup COPY $x
    ; 6502-NEXT: frame-setup PH killed $a
    ; 6502-NEXT: $a = frame-setup COPY $y
    ; 6502-NEXT: frame-setup PH killed $a
    ; 6502-NEXT: $a = frame-setup COPY $rc2
    ; 6502-NEXT: frame-setup PH killed $a
    ; 6502-NEXT: $a = COPY $rc3
    ; 6502-NEXT: $y = LDImm 16
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.0)
    ; 6502-NEXT: $a = COPY $rc4
    ; 6502-NEXT: $y = LDImm 15
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.1)
    ; 6502-NEXT: $a = COPY $rc5
    ; 6502-NEXT: $y = LDImm 14
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.2)
    ; 6502-NEXT: $a = COPY $rc6
    ; 6502-NEXT: $y = LDImm 13
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.3)
    ; 6502-NEXT: $a = COPY $rc7
    ; 6502-NEXT: $y = LDImm 12
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.4)
    ; 6502-NEXT: $a = COPY $rc8
    ; 6502-NEXT: $y = LDImm 11
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.5)
    ; 6502-NEXT: $a = COPY $rc9
    ; 6502-NEXT: $y = LDImm 10
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.6)
    ; 6502-NEXT: $a = COPY $rc10
    ; 6502-NEXT: $y = LDImm 9
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.7)
    ; 6502-NEXT: $a = COPY $rc11
    ; 6502-NEXT: $y = LDImm 8
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.8)
    ; 6502-NEXT: $a = COPY $rc12
    ; 6502-NEXT: $y = LDImm 7
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.9)
    ; 6502-NEXT: $a = COPY $rc13
    ; 6502-NEXT: $y = LDImm 6
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.10)
    ; 6502-NEXT: $a = COPY $rc14
    ; 6502-NEXT: $y = LDImm 5
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.11)
    ; 6502-NEXT: $a = COPY $rc15
    ; 6502-NEXT: $y = LDImm 4
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.12)
    ; 6502-NEXT: $a = COPY $rc16
    ; 6502-NEXT: $y = LDImm 3
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.13)
    ; 6502-NEXT: $a = COPY $rc17
    ; 6502-NEXT: $y = LDImm 2
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.14)
    ; 6502-NEXT: $a = COPY $rc18
    ; 6502-NEXT: $y = LDImm 1
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.15)
    ; 6502-NEXT: $a = COPY $rc19
    ; 6502-NEXT: $y = LDImm 0
    ; 6502-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.16)
    ; 6502-NEXT: JSR &fn, mos_csr
    ; 6502-NEXT: $y = LDImm 0
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.16)
    ; 6502-NEXT: $rc19 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 1
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.15)
    ; 6502-NEXT: $rc18 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 2
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.14)
    ; 6502-NEXT: $rc17 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 3
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.13)
    ; 6502-NEXT: $rc16 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 4
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.12)
    ; 6502-NEXT: $rc15 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 5
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.11)
    ; 6502-NEXT: $rc14 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 6
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.10)
    ; 6502-NEXT: $rc13 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 7
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.9)
    ; 6502-NEXT: $rc12 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 8
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.8)
    ; 6502-NEXT: $rc11 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 9
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.7)
    ; 6502-NEXT: $rc10 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 10
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.6)
    ; 6502-NEXT: $rc9 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 11
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.5)
    ; 6502-NEXT: $rc8 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 12
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.4)
    ; 6502-NEXT: $rc7 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 13
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.3)
    ; 6502-NEXT: $rc6 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 14
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.2)
    ; 6502-NEXT: $rc5 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 15
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.1)
    ; 6502-NEXT: $rc4 = COPY killed $a
    ; 6502-NEXT: $y = LDImm 16
    ; 6502-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.0)
    ; 6502-NEXT: $rc3 = COPY killed $a
    ; 6502-NEXT: $a = frame-destroy PL
    ; 6502-NEXT: $rc2 = frame-destroy COPY killed $a
    ; 6502-NEXT: $a = frame-destroy PL
    ; 6502-NEXT: $y = frame-destroy COPY killed $a
    ; 6502-NEXT: $a = frame-destroy PL
    ; 6502-NEXT: $x = frame-destroy COPY killed $a
    ; 6502-NEXT: $a = frame-destroy PL
    ; 6502-NEXT: PH $a
    ; 6502-NEXT: $c = LDCImm 0
    ; 6502-NEXT: $a = COPY $rc0
    ; 6502-NEXT: $a, $c, $v = ADCImm $a, 17, $c
    ; 6502-NEXT: $rc0 = COPY killed $a
    ; 6502-NEXT: $a = COPY $rc1
    ; 6502-NEXT: $a, $c, $v = ADCImm $a, 1, $c
    ; 6502-NEXT: $rc1 = COPY killed $a
    ; 6502-NEXT: $a = PL
    ; 6502-NEXT: RTI implicit $a, implicit $x, implicit $y, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit $rc8, implicit $rc9, implicit $rc10, implicit $rc11, implicit $rc12, implicit $rc13, implicit $rc14, implicit $rc15, implicit $rc16, implicit $rc17, implicit $rc18, implicit $rc19
    ; 65C02-LABEL: name: interrupt_caller
    ; 65C02: liveins: $a, $x, $y, $rc2, $rc3, $rc4, $rc5, $rc6, $rc7, $rc8, $rc9, $rc10, $rc11, $rc12, $rc13, $rc14, $rc15, $rc18, $rc19
    ; 65C02-NEXT: {{  $}}
    ; 65C02-NEXT: CLD_Implied
    ; 65C02-NEXT: PH $a
    ; 65C02-NEXT: $c = LDCImm 0
    ; 65C02-NEXT: $a = COPY $rc0
    ; 65C02-NEXT: $a, $c, $v = ADCImm $a, 239, $c
    ; 65C02-NEXT: $rc0 = COPY killed $a
    ; 65C02-NEXT: $a = COPY $rc1
    ; 65C02-NEXT: $a, $c, $v = ADCImm $a, 254, $c
    ; 65C02-NEXT: $rc1 = COPY killed $a
    ; 65C02-NEXT: $a = PL
    ; 65C02-NEXT: frame-setup PH $a
    ; 65C02-NEXT: frame-setup PH $x
    ; 65C02-NEXT: frame-setup PH $y
    ; 65C02-NEXT: $x = frame-setup COPY $rc2
    ; 65C02-NEXT: frame-setup PH killed $x
    ; 65C02-NEXT: $a = COPY $rc3
    ; 65C02-NEXT: $y = LDImm 16
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.0)
    ; 65C02-NEXT: $a = COPY $rc4
    ; 65C02-NEXT: $y = LDImm 15
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.1)
    ; 65C02-NEXT: $a = COPY $rc5
    ; 65C02-NEXT: $y = LDImm 14
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.2)
    ; 65C02-NEXT: $a = COPY $rc6
    ; 65C02-NEXT: $y = LDImm 13
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.3)
    ; 65C02-NEXT: $a = COPY $rc7
    ; 65C02-NEXT: $y = LDImm 12
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.4)
    ; 65C02-NEXT: $a = COPY $rc8
    ; 65C02-NEXT: $y = LDImm 11
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.5)
    ; 65C02-NEXT: $a = COPY $rc9
    ; 65C02-NEXT: $y = LDImm 10
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.6)
    ; 65C02-NEXT: $a = COPY $rc10
    ; 65C02-NEXT: $y = LDImm 9
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.7)
    ; 65C02-NEXT: $a = COPY $rc11
    ; 65C02-NEXT: $y = LDImm 8
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.8)
    ; 65C02-NEXT: $a = COPY $rc12
    ; 65C02-NEXT: $y = LDImm 7
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.9)
    ; 65C02-NEXT: $a = COPY $rc13
    ; 65C02-NEXT: $y = LDImm 6
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.10)
    ; 65C02-NEXT: $a = COPY $rc14
    ; 65C02-NEXT: $y = LDImm 5
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.11)
    ; 65C02-NEXT: $a = COPY $rc15
    ; 65C02-NEXT: $y = LDImm 4
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.12)
    ; 65C02-NEXT: $a = COPY $rc16
    ; 65C02-NEXT: $y = LDImm 3
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.13)
    ; 65C02-NEXT: $a = COPY $rc17
    ; 65C02-NEXT: $y = LDImm 2
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.14)
    ; 65C02-NEXT: $a = COPY $rc18
    ; 65C02-NEXT: $y = LDImm 1
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.15)
    ; 65C02-NEXT: $a = COPY $rc19
    ; 65C02-NEXT: $y = LDImm 0
    ; 65C02-NEXT: STIndirIdx killed $a, $rs0, killed $y :: (store (s8) into %stack.16)
    ; 65C02-NEXT: JSR &fn, mos_csr
    ; 65C02-NEXT: $y = LDImm 0
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.16)
    ; 65C02-NEXT: $rc19 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 1
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.15)
    ; 65C02-NEXT: $rc18 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 2
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.14)
    ; 65C02-NEXT: $rc17 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 3
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.13)
    ; 65C02-NEXT: $rc16 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 4
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.12)
    ; 65C02-NEXT: $rc15 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 5
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.11)
    ; 65C02-NEXT: $rc14 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 6
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.10)
    ; 65C02-NEXT: $rc13 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 7
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.9)
    ; 65C02-NEXT: $rc12 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 8
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.8)
    ; 65C02-NEXT: $rc11 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 9
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.7)
    ; 65C02-NEXT: $rc10 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 10
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.6)
    ; 65C02-NEXT: $rc9 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 11
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.5)
    ; 65C02-NEXT: $rc8 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 12
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.4)
    ; 65C02-NEXT: $rc7 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 13
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.3)
    ; 65C02-NEXT: $rc6 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 14
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.2)
    ; 65C02-NEXT: $rc5 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 15
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.1)
    ; 65C02-NEXT: $rc4 = COPY killed $a
    ; 65C02-NEXT: $y = LDImm 16
    ; 65C02-NEXT: $a = LDIndirIdx $rs0, killed $y :: (load (s8) from %stack.0)
    ; 65C02-NEXT: $rc3 = COPY killed $a
    ; 65C02-NEXT: $x = frame-destroy PL
    ; 65C02-NEXT: $rc2 = frame-destroy COPY killed $x
    ; 65C02-NEXT: $y = frame-destroy PL
    ; 65C02-NEXT: $x = frame-destroy PL
    ; 65C02-NEXT: $a = frame-destroy PL
    ; 65C02-NEXT: PH $a
    ; 65C02-NEXT: $c = LDCImm 0
    ; 65C02-NEXT: $a = COPY $rc0
    ; 65C02-NEXT: $a, $c, $v = ADCImm $a, 17, $c
    ; 65C02-NEXT: $rc0 = COPY killed $a
    ; 65C02-NEXT: $a = COPY $rc1
    ; 65C02-NEXT: $a, $c, $v = ADCImm $a, 1, $c
    ; 65C02-NEXT: $rc1 = COPY killed $a
    ; 65C02-NEXT: $a = PL
    ; 65C02-NEXT: RTI implicit $a, implicit $x, implicit $y, implicit $rc2, implicit $rc3, implicit $rc4, implicit $rc5, implicit $rc6, implicit $rc7, implicit $rc8, implicit $rc9, implicit $rc10, implicit $rc11, implicit $rc12, implicit $rc13, implicit $rc14, implicit $rc15, implicit $rc16, implicit $rc17, implicit $rc18, implicit $rc19
    CLD_Implied
    ADJCALLSTACKDOWN 0, 0, implicit $rs0, implicit-def $rs0
    JSR &fn, mos_csr
    ADJCALLSTACKUP 0, 0, implicit $rs0, implicit-def $rs0
    RTI
...
