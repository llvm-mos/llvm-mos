; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -O2 -zp-avail=224 -o - %s | FileCheck %s

; Allocating to the zero page can involve rewriting callee-saved imaginary
; registers to other zero page locations. This is done assembly "printing",
; however, inline assembly has a completely different process for this,
; so it must be explicitly tested.

target datalayout = "e-m:e-p:16:8-p1:8:8-i16:8-i32:8-i64:8-f32:8-f64:8-a:8-Fi8-n8"
target triple = "mos"

define void @inline_asm_zp_csr(i8 %c) "nonreentrant" {
; CHECK-LABEL: inline_asm_zp_csr:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(.Linline_asm_zp_csr_zp_stk)
; CHECK-NEXT:    sta mos8(.Linline_asm_zp_csr_zp_stk+1)
; CHECK-NEXT:    ;APP
; CHECK-NEXT:    lda mos8(.Linline_asm_zp_csr_zp_stk)
; CHECK-EMPTY:
; CHECK-NEXT:    lda mos8(.Linline_asm_zp_csr_zp_stk+1)
; CHECK-EMPTY:
; CHECK-NEXT:    ;NO_APP
; CHECK-NEXT:    rts
entry:
  %c.addr = alloca i8, align 1
  %d = alloca i8, align 1
  %e = alloca i8, align 1
  store i8 %c, ptr %c.addr, align 1
  %0 = load i8, ptr %c.addr, align 1
  store i8 %0, ptr %d, align 1
  %1 = load i8, ptr %c.addr, align 1
  store i8 %1, ptr %e, align 1
  %2 = load i8, ptr %d, align 1
  %3 = load i8, ptr %e, align 1
  call void asm sideeffect "lda $0\0Alda $1", "{rc20},{rc21},~{a}"(i8 %2, i8 %3)
  ret void
}
