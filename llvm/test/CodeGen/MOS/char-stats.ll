; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs < %s | FileCheck %s -check-prefix=NMOS
; RUN: llc -mcpu=mos65c02 -verify-machineinstrs < %s | FileCheck %s -check-prefix=CMOS

target datalayout = "e-p:16:8:8-p1:8:8-i16:8:8-i32:8:8-i64:8:8-f32:8:8-f64:8:8-a:8:8-Fi8-n8"
target triple = "mos"

; Function Attrs: nounwind
define void @char_stats() local_unnamed_addr #0 {
; NMOS-LABEL: char_stats:
; NMOS:       ; %bb.0: ; %entry
; NMOS-NEXT:    clc
; NMOS-NEXT:    lda mos8(__rc1)
; NMOS-NEXT:    adc #254
; NMOS-NEXT:    sta mos8(__rc1)
; NMOS-NEXT:    lda mos8(__rc20)
; NMOS-NEXT:    pha
; NMOS-NEXT:    lda mos8(__rc21)
; NMOS-NEXT:    pha
; NMOS-NEXT:    clc
; NMOS-NEXT:    ldx mos8(__rc0)
; NMOS-NEXT:    stx mos8(__rc20)
; NMOS-NEXT:    ldx mos8(__rc1)
; NMOS-NEXT:    stx mos8(__rc21)
; NMOS-NEXT:    ldx mos8(__rc20)
; NMOS-NEXT:    stx mos8(__rc2)
; NMOS-NEXT:    ldx mos8(__rc21)
; NMOS-NEXT:    stx mos8(__rc3)
; NMOS-NEXT:    lda #0
; NMOS-NEXT:    ldx #2
; NMOS-NEXT:    stx mos8(__rc4)
; NMOS-NEXT:    tax
; NMOS-NEXT:    jsr __memset
; NMOS-NEXT:    jmp .LBB0_2
; NMOS-NEXT:  .LBB0_1: ; %while.body
; NMOS-NEXT:    ; in Loop: Header=BB0_2 Depth=1
; NMOS-NEXT:    ldy #0
; NMOS-NEXT:    sta (mos8(__rc2)),y
; NMOS-NEXT:    txa
; NMOS-NEXT:    iny
; NMOS-NEXT:    sta (mos8(__rc2)),y
; NMOS-NEXT:  .LBB0_2: ; %while.body
; NMOS-NEXT:    ; =>This Inner Loop Header: Depth=1
; NMOS-NEXT:    jsr next_char
; NMOS-NEXT:    tax
; NMOS-NEXT:    beq .LBB0_5
; NMOS-NEXT:  ; %bb.3: ; %while.body
; NMOS-NEXT:    ; in Loop: Header=BB0_2 Depth=1
; NMOS-NEXT:    asl
; NMOS-NEXT:    sta mos8(__rc2)
; NMOS-NEXT:    ldx #0
; NMOS-NEXT:    stx mos8(__rc3)
; NMOS-NEXT:    ldy #0
; NMOS-NEXT:    rol mos8(__rc3)
; NMOS-NEXT:    clc
; NMOS-NEXT:    lda mos8(__rc0)
; NMOS-NEXT:    ldx mos8(__rc1)
; NMOS-NEXT:    clc
; NMOS-NEXT:    adc mos8(__rc2)
; NMOS-NEXT:    sta mos8(__rc2)
; NMOS-NEXT:    txa
; NMOS-NEXT:    adc mos8(__rc3)
; NMOS-NEXT:    sta mos8(__rc3)
; NMOS-NEXT:    lda (mos8(__rc2)),y
; NMOS-NEXT:    sta mos8(__rc4)
; NMOS-NEXT:    iny
; NMOS-NEXT:    lda (mos8(__rc2)),y
; NMOS-NEXT:    tax
; NMOS-NEXT:    lda mos8(__rc4)
; NMOS-NEXT:    clc
; NMOS-NEXT:    adc #1
; NMOS-NEXT:    bne .LBB0_1
; NMOS-NEXT:  ; %bb.4: ; %while.body
; NMOS-NEXT:    ; in Loop: Header=BB0_2 Depth=1
; NMOS-NEXT:    inx
; NMOS-NEXT:    jmp .LBB0_1
; NMOS-NEXT:  .LBB0_5: ; %while.end
; NMOS-NEXT:    ldx mos8(__rc20)
; NMOS-NEXT:    stx mos8(__rc2)
; NMOS-NEXT:    ldx mos8(__rc21)
; NMOS-NEXT:    stx mos8(__rc3)
; NMOS-NEXT:    jsr report_counts
; NMOS-NEXT:    pla
; NMOS-NEXT:    sta mos8(__rc21)
; NMOS-NEXT:    pla
; NMOS-NEXT:    sta mos8(__rc20)
; NMOS-NEXT:    clc
; NMOS-NEXT:    lda mos8(__rc1)
; NMOS-NEXT:    adc #2
; NMOS-NEXT:    sta mos8(__rc1)
; NMOS-NEXT:    rts
;
; CMOS-LABEL: char_stats:
; CMOS:       ; %bb.0: ; %entry
; CMOS-NEXT:    clc
; CMOS-NEXT:    lda mos8(__rc1)
; CMOS-NEXT:    adc #254
; CMOS-NEXT:    sta mos8(__rc1)
; CMOS-NEXT:    ldx mos8(__rc20)
; CMOS-NEXT:    phx
; CMOS-NEXT:    ldx mos8(__rc21)
; CMOS-NEXT:    phx
; CMOS-NEXT:    clc
; CMOS-NEXT:    ldx mos8(__rc0)
; CMOS-NEXT:    stx mos8(__rc20)
; CMOS-NEXT:    sta mos8(__rc21)
; CMOS-NEXT:    ldx mos8(__rc20)
; CMOS-NEXT:    stx mos8(__rc2)
; CMOS-NEXT:    sta mos8(__rc3)
; CMOS-NEXT:    lda #0
; CMOS-NEXT:    ldx #2
; CMOS-NEXT:    stx mos8(__rc4)
; CMOS-NEXT:    tax
; CMOS-NEXT:    jsr __memset
; CMOS-NEXT:    bra .LBB0_2
; CMOS-NEXT:  .LBB0_1: ; %while.body
; CMOS-NEXT:    ; in Loop: Header=BB0_2 Depth=1
; CMOS-NEXT:    ldy #0
; CMOS-NEXT:    sta (mos8(__rc2)),y
; CMOS-NEXT:    txa
; CMOS-NEXT:    iny
; CMOS-NEXT:    sta (mos8(__rc2)),y
; CMOS-NEXT:  .LBB0_2: ; %while.body
; CMOS-NEXT:    ; =>This Inner Loop Header: Depth=1
; CMOS-NEXT:    jsr next_char
; CMOS-NEXT:    tax
; CMOS-NEXT:    beq .LBB0_5
; CMOS-NEXT:  ; %bb.3: ; %while.body
; CMOS-NEXT:    ; in Loop: Header=BB0_2 Depth=1
; CMOS-NEXT:    asl
; CMOS-NEXT:    sta mos8(__rc2)
; CMOS-NEXT:    stz mos8(__rc3)
; CMOS-NEXT:    ldy #0
; CMOS-NEXT:    rol mos8(__rc3)
; CMOS-NEXT:    clc
; CMOS-NEXT:    lda mos8(__rc0)
; CMOS-NEXT:    ldx mos8(__rc1)
; CMOS-NEXT:    clc
; CMOS-NEXT:    adc mos8(__rc2)
; CMOS-NEXT:    sta mos8(__rc2)
; CMOS-NEXT:    txa
; CMOS-NEXT:    adc mos8(__rc3)
; CMOS-NEXT:    sta mos8(__rc3)
; CMOS-NEXT:    lda (mos8(__rc2)),y
; CMOS-NEXT:    sta mos8(__rc4)
; CMOS-NEXT:    iny
; CMOS-NEXT:    lda (mos8(__rc2)),y
; CMOS-NEXT:    tax
; CMOS-NEXT:    lda mos8(__rc4)
; CMOS-NEXT:    clc
; CMOS-NEXT:    adc #1
; CMOS-NEXT:    bne .LBB0_1
; CMOS-NEXT:  ; %bb.4: ; %while.body
; CMOS-NEXT:    ; in Loop: Header=BB0_2 Depth=1
; CMOS-NEXT:    inx
; CMOS-NEXT:    bra .LBB0_1
; CMOS-NEXT:  .LBB0_5: ; %while.end
; CMOS-NEXT:    ldx mos8(__rc20)
; CMOS-NEXT:    stx mos8(__rc2)
; CMOS-NEXT:    ldx mos8(__rc21)
; CMOS-NEXT:    stx mos8(__rc3)
; CMOS-NEXT:    jsr report_counts
; CMOS-NEXT:    plx
; CMOS-NEXT:    stx mos8(__rc21)
; CMOS-NEXT:    plx
; CMOS-NEXT:    stx mos8(__rc20)
; CMOS-NEXT:    clc
; CMOS-NEXT:    lda mos8(__rc1)
; CMOS-NEXT:    adc #2
; CMOS-NEXT:    sta mos8(__rc1)
; CMOS-NEXT:    rts
entry:
  %counts = alloca [256 x i16], align 1
  %0 = bitcast [256 x i16]* %counts to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %0) #4
  call void @llvm.memset.p0i8.i16(i8* nonnull align 1 dereferenceable(512) %0, i8 0, i16 512, i1 false)
  %call1 = tail call zeroext i8 bitcast (i8 (...)* @next_char to i8 ()*)() #4
  %tobool.not2 = icmp eq i8 %call1, 0
  br i1 %tobool.not2, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %call3 = phi i8 [ %call, %while.body ], [ %call1, %entry ]
  %idxprom = zext i8 %call3 to i16
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* %counts, i16 0, i16 %idxprom
  %1 = load i16, i16* %arrayidx, align 1, !tbaa !2
  %inc = add nsw i16 %1, 1
  store i16 %inc, i16* %arrayidx, align 1, !tbaa !2
  %call = tail call zeroext i8 bitcast (i8 (...)* @next_char to i8 ()*)() #4
  %tobool.not = icmp eq i8 %call, 0
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !6

while.end:                                        ; preds = %while.body, %entry
  %arraydecay = getelementptr inbounds [256 x i16], [256 x i16]* %counts, i16 0, i16 0
  call void @report_counts(i16* nonnull %arraydecay) #4
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %0) #4
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i16(i8* nocapture writeonly, i8, i16, i1 immarg) #2

declare zeroext i8 @next_char(...) local_unnamed_addr #3

declare void @report_counts(i16*) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }
attributes #2 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0 (git@github.com:mysterymath/clang6502.git b8d4efa1d0099ce79290e539ba71fa8599aaa274)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
